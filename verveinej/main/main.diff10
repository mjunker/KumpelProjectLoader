Index: verveine.core/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/NamedEntity.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/NamedEntity.java	(revision 112)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/NamedEntity.java	(revision 113)
@@ -234,7 +234,7 @@
 	@Override
 	public String toString() {
 	// mainly for debugging purposes (in Eclipse debugger)
-		return "a " + this.getClass().getCanonicalName() + " named: " + this.getName();
+		return "a " + this.getClass().getSimpleName() + " named: " + this.getName();
 	}
     
 
Index: verveine.core/export-verveine-core.jardesc
===================================================================
--- verveine.core/export-verveine-core.jardesc	(revision 0)
+++ verveine.core/export-verveine-core.jardesc	(revision 79)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<jardesc>
+    <jar path="verveine.core/lib/verveine.core.jar"/>
+    <options buildIfNeeded="true" compress="true" descriptionLocation="/verveine.core/export-verveine-core.jardesc" exportErrors="true" exportWarnings="true" includeDirectoryEntries="false" overwrite="false" saveDescription="true" storeRefactorings="false" useSourceFolders="false"/>
+    <storedRefactorings deprecationInfo="true" structuralOnly="false"/>
+    <selectedProjects/>
+    <manifest generateManifest="true" manifestLocation="/Fame/META-INF/MANIFEST.MF" manifestVersion="1.0" reuseManifest="false" saveManifest="false" usesManifest="true">
+        <sealing sealJar="false">
+            <packagesToSeal/>
+            <packagesToUnSeal/>
+        </sealing>
+    </manifest>
+    <selectedElements exportClassFiles="true" exportJavaFiles="false" exportOutputFolder="false">
+        <javaElement handleIdentifier="=verveine.core/src&lt;fr.inria.verveine.core"/>
+        <file path="/verveine.core/.project"/>
+        <javaElement handleIdentifier="=verveine.core/src&lt;test.fr.inria.verveine.core"/>
+        <file path="/verveine.core/.classpath"/>
+    </selectedElements>
+</jardesc>
Index: verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: verveine.extractor.java/lib/verveine.core.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: verveine.core/src/fr/inria/verveine/core/gen/famix/Class.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/Class.java	(revision 59)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/Class.java	(revision 60)
@@ -1,6 +1,8 @@
 // Automagically generated code, please do not change
 package fr.inria.verveine.core.gen.famix;
 
+import java.util.Collection;
+
 import ch.akuhn.fame.FameProperty;
 import ch.akuhn.fame.FameDescription;
 import ch.akuhn.fame.FamePackage;
@@ -29,7 +31,14 @@
         this.isInterface = isInterface;
     }
     
-
-
-}
-
+    private Collection<Type> parameterTypes;
+    
+    @FameProperty(name = "parameterTypes")
+    public Collection<Type> getParameterTypes() {
+    	return parameterTypes;
+    }
+    
+    public void setParameterTypes(Collection<Type> parameterTypes) {
+    	this.parameterTypes = parameterTypes;
+    }
+}
\ No newline at end of file
Index: verveine.extractor.java/.classpath
===================================================================
--- verveine.extractor.java/.classpath	(revision 24)
+++ verveine.extractor.java/.classpath	(revision 25)
@@ -14,6 +14,6 @@
 	<classpathentry kind="var" path="ECLIPSE_HOME/plugins/org.hamcrest.core_1.1.0.v20090501071000.jar"/>
 	<classpathentry kind="lib" path="lib/fame.jar"/>
 	<classpathentry kind="lib" path="lib/famix.jar"/>
-	<classpathentry kind="lib" path="lib/verveine.core.jar" sourcepath="/verveine.core"/>
+	<classpathentry kind="lib" path="lib/verveine.core.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: verveine.extractor.java/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 24)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 25)
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010 Simon Denier
+ * Copyright (c) 2010 Nicolas Anquetil
  */
 package tests.fr.inria.verveine.extractor.java;
 
@@ -11,8 +11,10 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
+import java.io.File;
 import java.util.Collection;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -35,7 +37,7 @@
 import fr.inria.verveine.extractor.java.VerveineJParser;
 
 /**
- * @author Simon Denier
+ * @author Nicolas Anquetil
  * @since May 28, 2010
  *
  */
@@ -50,12 +52,49 @@
 	 */
 	@Before
 	public void setUp() throws Exception {
+		String[] files = new String[] {
+				"AbstractDestinationAddress.java",
+				"Node.java",
+				"Packet.java",
+				"SingleDestinationAddress.java",
+				"WorkStation.java",
+				"server/FileServer.java",
+				"server/IPrinter.java",
+				"server/OutputServer.java",
+				"server/PrintServer.java"
+		};
+		
+		// separate parsing of each source file
+		for (String f : files) {
+			parseFile(f);
+		}
+	}
+
+	/**
+	 * Parses the file received in parameter independently from any other
+	 * The "separate parsing" mechanism should ensure that linkages are appropriately done
+	 * @param file -- name of the file to parse
+	 */
+	private void parseFile(String file) {
+		String[] args = new String[] {
+				"-cp",
+				"test_src/LANModel/",
+				"test_src/LANModel/moose/lan/"+file
+				};
+		
 		VerveineJParser parser = new VerveineJParser();
-		parser.compile(new String[] {"test_src/LANModel"});
-		parser.renameNamespaces();
+		parser.compile(args);
 		repo = parser.getFamixRepo();
+		
+		new File(VerveineJParser.OUTPUT_FILE).delete();  // delete old MSE file
+		parser.outputMSE();  // to create a new one
 	}
 
+	@After
+	public void tearDown() {
+		new File(VerveineJParser.OUTPUT_FILE).delete();
+	}
+	
 	@Test
 	public void testEntitiesNumber() {
 		assertEquals(11+8, TestVerveineUtils.selectElementsOfType(repo,fr.inria.verveine.core.gen.famix.Class.class).size()); // 11 + {Object,String,StringBuffer,AbstractStringBuilder,PrintStream,FilterOutputStream,OutputStream,System}
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 24)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 25)
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010 Simon Denier
+ * Copyright (c) 2010 Anquetil Nicolas
  */
 package tests.fr.inria.verveine.extractor.java;
 
@@ -7,6 +7,10 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;
+
+import java.io.File;
+
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -19,14 +23,20 @@
 import fr.inria.verveine.extractor.java.VerveineJParser;
 
 /**
- * @author Simon Denier
- * @since May 28, 2010
+ * @author Nicolas Anquetil
+ * @since November 25, 2010
  *
  */
 public class VerveineJTest_AdHoc {
 
 	private Repository repo;
 
+	public VerveineJTest_AdHoc() {
+		// make sure we don't have any pre-existing mse lying in the way
+		new File(VerveineJParser.OUTPUT_FILE).delete();
+	}
+	
+
 	/**
 	 * @throws java.lang.Exception
 	 */
@@ -34,10 +44,14 @@
 	public void setUp() throws Exception {
 		VerveineJParser parser = new VerveineJParser();
 		parser.compile(new String[] {"test_src/ad_hoc"});
-		parser.renameNamespaces();
 		repo = parser.getFamixRepo();
 	}
 
+	@After
+	public void tearDown() {
+		new File(VerveineJParser.OUTPUT_FILE).delete();
+	}
+	
 	@Test
 	public void testExceptions() {
 		// there are two "lire" methods, but both serve our purpose here so we just take the first that will be returned
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 24)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 25)
@@ -158,6 +158,10 @@
 			System.err.println("Warning: Unexpected null binding, cannot create Famix Class");
 			return null;
 		}
+		
+		if (bnd.getName().equals(OBJECT_NAME)) {
+			return ensureFamixClassObject(bnd);
+		}
 
 		while (bnd.isArray()) {
 			bnd = bnd.getComponentType();
@@ -243,24 +247,24 @@
 			wasBound = false;
 			// trying to recover from name and other informations
 			for (fr.inria.verveine.core.gen.famix.Class candidate : getEntityByName(fr.inria.verveine.core.gen.famix.Class.class, identifier) ) {
-				if ( (! candidate.getIsStub()) &&
-						(candidate.getBelongsTo() == owner) ) {
+				if ( //(! candidate.getIsStub()) &&
+						(candidate.getContainer() == owner) ) {
 					// could test superclass also...
 					fmx = candidate;
 					mapBind.put(bnd, fmx);
 					break;
 				}
-				else if ( candidate.getIsStub() ) {
+/*				else if ( candidate.getIsStub() ) {
 					// find out whether this candidate is defined in the same namespace as the binding received in parameter
 					ContainerEntity ownerBnd = owner;  // the owner of the bounded entity received as parameter
-					ContainerEntity ownerStub = candidate.getBelongsTo();  // the owner of the current candidate
+					ContainerEntity ownerStub = candidate.getContainer();  // the owner of the current candidate
 					while ( (ownerBnd != null) &&
 							(ownerStub != null) &&
 							(! (ownerBnd instanceof Namespace)) &&
 							(ownerBnd.getClass() == ownerStub.getClass()) &&
 							ownerBnd.getName().equals(ownerStub.getName()) ) {
-								ownerBnd = ownerBnd.getBelongsTo();
-								ownerStub = ownerStub.getBelongsTo();
+								ownerBnd = ownerBnd.getContainer();
+								ownerStub = ownerStub.getContainer();
 					}
 					if ( (ownerBnd instanceof Namespace) &&
 						(ownerStub instanceof Namespace) &&
@@ -269,7 +273,7 @@
 						mapBind.put(bnd, fmx);
 						break;
 					}
-				}
+				}*/
 			}
 		}
 		
@@ -415,7 +419,7 @@
 			wasBound = false;
 			// trying to recover from name and other informationsparentBehaviouralEntity
 			for (Attribute candidate : getEntityByName(Attribute.class, bnd.getName()) ) {
-				if ( (! candidate.getIsStub()) &&
+				if ( //(! candidate.getIsStub()) &&
 					 (candidate.getParentType() == owner) &&
 					 (candidate.getDeclaredType() == typ) ) {
 					fmx = candidate;
@@ -446,11 +450,16 @@
 	 * @param mod -- a description of the modifiers as understood by org.eclipse.jdt.core.dom.Modifier
 	 */
 	private void setNamedEntityModifiers(NamedEntity fmx, int mod) {
-		fmx.setIsAbstract(Modifier.isAbstract(mod));
-		fmx.setIsFinal(Modifier.isFinal(mod));
-		fmx.setIsPrivate(Modifier.isPrivate(mod));
-		fmx.setIsProtected(Modifier.isProtected(mod));
-		fmx.setIsPublic(Modifier.isPublic(mod));
+		if (Modifier.isAbstract(mod)) {
+			// don't know why there are two different ways to mark abstract classes !!!
+			// But this is a pain!
+			fmx.addModifiers("abstract");
+		}
+		fmx.setIsAbstract(new Boolean(Modifier.isAbstract(mod)));
+		fmx.setIsFinal(new Boolean(Modifier.isFinal(mod)));
+		fmx.setIsPrivate(new Boolean(Modifier.isPrivate(mod)));
+		fmx.setIsProtected(new Boolean(Modifier.isProtected(mod)));
+		fmx.setIsPublic(new Boolean(Modifier.isPublic(mod)));
 	}
 
 	/**
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineJParser.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineJParser.java	(revision 24)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineJParser.java	(revision 25)
@@ -19,15 +19,28 @@
 	public static void main(String[] args) {
 		VerveineJParser parser = new VerveineJParser();
 		parser.compile(args);
-		parser.renameNamespaces();
 		parser.outputMSE();
 	}
+	
+	@Override
+	public boolean compile(String[] argv) {
+		boolean ret;
+		if (this.linkToExisting()) {
+			this.expandNamespacesNames();
+		}
+		
+		ret = super.compile(argv);
+		
+		this.compressNamespacesNames();
+		
+		return ret;
+	}
 
 	/**
-	 * As explained in JavaDictionary, Namespaces are created with their fully qualified name
+	 * As explained in JavaDictionary, Namespaces are created with their fully qualified name.
 	 * We need now to give them their simple name
 	 */
-	public void renameNamespaces() {
+	protected void compressNamespacesNames() {
 		for (Namespace ns : listAll(Namespace.class)) {
 			String name = ns.getName();
 			int last = name.lastIndexOf('.');
@@ -37,6 +50,32 @@
 		}
 	}
 
+	/**
+	 * @see VerveineJParser.compressNamespacesNames()
+	 */
+	protected void expandNamespacesNames() {
+		for (Namespace ns : listAll(Namespace.class)) {
+			expandNamespaceName(ns);
+		}		
+	}
+	
+	private void expandNamespaceName(Namespace ns) {
+		String name = ns.getName();
+		if (name.indexOf('.') > 0) {
+			return;
+		}
+		else {
+			Namespace parent = (Namespace) ns.getParentScope();
+			if (parent == null) {
+				return;
+			}
+			else {
+				expandNamespaceName(parent);
+				ns.setName(parent.getName()+"."+ns.getName());
+			}
+		}
+	}
+
 	/*
 	 *  Low-level API performing the actual parsing
 	 *  Overwrite the one in org.eclipse.jdt.internal.compiler.batch.Main;
