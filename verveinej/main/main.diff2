Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 120)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 121)
@@ -496,7 +496,7 @@
 	 * @return the Invocation
 	 */
 	public Invocation addFamixInvocation(BehaviouralEntity sender, BehaviouralEntity invoked, NamedEntity receiver, Association prev) {
-		if ( (sender == null) || (invoked == null) || (receiver == null) ) {
+		if ( (sender == null) || (invoked == null) ) {
 			return null;
 		}
 		Invocation invok = new Invocation();
Index: verveine.extractor.java/test_src/ad_hoc/Dictionary.java
===================================================================
--- verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 120)
+++ verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 121)
@@ -30,7 +30,7 @@
 		this.mapName = new Hashtable<String,Collection<NamedEntity>>();
 		this.mapImpVar = new Hashtable<NamedEntity,ImplicitVars>();
 		
-		if (! this.famixRepo.isEmpty()) {
+		if (! this.mapBind.isEmpty()) {
 			// nothing
 		}
 	}
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 120)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 121)
@@ -112,7 +112,7 @@
 		assertEquals(10+1,  TestVerveineUtils.selectElementsOfType(repo, Attribute.class).size());//10+{System.out}
 		assertEquals(2+4,   TestVerveineUtils.selectElementsOfType(repo, Namespace.class).size());//2+{moose,java.lang,java.io,java}
 		assertEquals(26,    TestVerveineUtils.selectElementsOfType(repo, Parameter.class).size());
-		assertEquals(54,    TestVerveineUtils.selectElementsOfType(repo, Invocation.class).size());
+		assertEquals(54,    TestVerveineUtils.selectElementsOfType(repo, Invocation.class).size());//FIXME pb with getreceiver
 		assertEquals(6+24,  TestVerveineUtils.selectElementsOfType(repo, Inheritance.class).size());//6 internal + 24 from imported packages/classes
 		assertEquals(25,    TestVerveineUtils.selectElementsOfType(repo, Access.class).size());// 16 "internal" attributes + 9 System.out
 		assertEquals(0,     TestVerveineUtils.selectElementsOfType(repo, LocalVariable.class).size());
@@ -383,17 +383,17 @@
 				 (mNode.getName().equals("methodWithEmptyBody")) ||
 				 (mNode.getName().equals("canOutput")) ||
 				 (mNode.getName().equals("canOriginate")) ) {
-				assertEquals("Wrong number of outgoing invocation for method Node."+mNode.getName()+"()", 0, mNode.getOutgoingInvocations().size());
+				assertEquals("Wrong number of outgoing invocation for Node."+mNode.getSignature(), 0, mNode.getOutgoingInvocations().size());
 			}
 			else if ( (mNode.getName().equals("Node")) ||
 					  (mNode.getName().equals("accept")) ) {
-				assertEquals("Wrong number of outgoing invocation for method Node."+mNode.getName()+"()", 1, mNode.getOutgoingInvocations().size());
+				assertEquals("Wrong number of outgoing invocation for Node."+mNode.getSignature(), 1, mNode.getOutgoingInvocations().size());
 			}
 			else if (mNode.getName().equals("send"))  {
-				assertEquals("Wrong number of outgoing invocation for method Node.send()", 6, mNode.getOutgoingInvocations().size());
+				assertEquals("Wrong number of outgoing invocation for Node.send()", 6, mNode.getOutgoingInvocations().size());
 			}
 			else if (mNode.getName().equals("printOn")) {
-				assertEquals("Wrong number of outgoing invocation for method Node.printOn()", 8, mNode.getOutgoingInvocations().size());
+				assertEquals("Wrong number of outgoing invocation for Node.printOn()", 8, mNode.getOutgoingInvocations().size());
 			}
 		}
 		
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_Basic.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_Basic.java	(revision 120)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_Basic.java	(revision 121)
@@ -6,12 +6,15 @@
 
 import test.fr.inria.verveine.core.TestVerveineUtils;
 import ch.akuhn.fame.Repository;
+import fr.inria.verveine.core.gen.famix.Access;
 import fr.inria.verveine.core.gen.famix.Association;
 import fr.inria.verveine.core.gen.famix.Attribute;
 import fr.inria.verveine.core.gen.famix.BehaviouralEntity;
 import fr.inria.verveine.core.gen.famix.Inheritance;
+import fr.inria.verveine.core.gen.famix.Invocation;
 import fr.inria.verveine.core.gen.famix.Namespace;
 import fr.inria.verveine.core.gen.famix.PrimitiveType;
+import fr.inria.verveine.core.gen.famix.Reference;
 import fr.inria.verveine.core.gen.famix.StructuralEntity;
 import fr.inria.verveine.core.gen.famix.Type;
 import fr.inria.verveine.extractor.java.JavaDictionary;
@@ -24,11 +27,13 @@
 
 	@Test
 	public void testAssociation() {
-		for (Association ass : TestVerveineUtils.selectElementsOfType(repo, Association.class) ) {
-			assertNotNull(ass.getClass().getSimpleName()+(ass.getTo()==null?"":" to: "+ass.getTo().getName())+" as no From", ass.getFrom());
+		for (Association ass : TestVerveineUtils.selectElementsOfType(repo, Access.class) ) {
+			if (! (ass instanceof Invocation)) { // null receiver allowed for invocations
+				assertNotNull(ass.getClass().getSimpleName()+(ass.getTo()==null? "" : " to: "+ass.getTo().getName())+" as no From", ass.getFrom());
+			}
 			assertNotNull(ass.getClass().getSimpleName()+" from: "+ass.getFrom().getName()+" as no To", ass.getTo());
 		}
-		
+
 		for (Association ass : TestVerveineUtils.selectElementsOfType(repo, Association.class) ) {
 			Association n = ass.getNext();
 			if (n!=null) {
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineVisitor.java	(revision 120)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineVisitor.java	(revision 121)
@@ -77,6 +77,7 @@
 import fr.inria.verveine.core.gen.famix.ContainerEntity;
 import fr.inria.verveine.core.gen.famix.EnumValue;
 import fr.inria.verveine.core.gen.famix.ImplicitVariable;
+import fr.inria.verveine.core.gen.famix.Invocation;
 import fr.inria.verveine.core.gen.famix.Method;
 import fr.inria.verveine.core.gen.famix.NamedEntity;
 import fr.inria.verveine.core.gen.famix.Namespace;
@@ -382,7 +383,7 @@
 
 	@SuppressWarnings("unchecked")
 	public boolean visit(VariableDeclarationExpression node) {
-//		System.err.println("TRACE, DefVisiting VariableDeclarationExpression");
+//		System.err.println("TRACE, DefVisiting VariableDeclarationExpression: "+((VariableDeclaration)node.fragments().iterator().next()).getName().getIdentifier()+" (...)");
 
 		// we don't declare (local) variables that have a primitive type
 		// because we are assuming that the user is not interested in them 
@@ -398,7 +399,7 @@
 
 	@SuppressWarnings("unchecked")
 	public boolean visit(VariableDeclarationStatement node) {
-//		System.err.println("TRACE, DefVisiting VariableDeclarationStatement");
+//		System.err.println("TRACE, DefVisiting VariableDeclarationStatement: "+((VariableDeclaration)node.fragments().iterator().next()).getName().getIdentifier()+" (...)");
 
 		// we don't declare (local) variables that have a primitive type
 		// because we are assuming that the user is not interested in them 
@@ -428,11 +429,7 @@
 				// creating a class' field
 				fmx = dico.ensureFamixAttribute(bnd, name, varTyp, (fr.inria.verveine.core.gen.famix.Class) ctxt);
 			}
-			else if (node instanceof VariableDeclarationExpression) {
-				// creating a method's local variable
-				fmx = dico.ensureFamixLocalVariable(bnd, name, varTyp, (Method) ctxt);
-			}
-			else if (node instanceof VariableDeclarationExpression) {
+			else if ( (node instanceof VariableDeclarationExpression) || (node instanceof VariableDeclarationStatement) ) {
 				// creating a method's local variable
 				fmx = dico.ensureFamixLocalVariable(bnd, name, varTyp, (Method) ctxt);
 			}
@@ -500,7 +497,8 @@
 	}
 
 	public boolean visit(SuperMethodInvocation node) {
-		methodInvocation(node.resolveMethodBinding(), node.getName().getFullyQualifiedName(), this.dico.ensureFamixImplicitVariable(Dictionary.SUPER_NAME, this.context.topClass(), context.top()));
+		NamedEntity receiver = this.dico.ensureFamixImplicitVariable(Dictionary.SUPER_NAME, this.context.topClass(), context.top());
+		methodInvocation(node.resolveMethodBinding(), node.getName().getFullyQualifiedName(), receiver);
 
 		this.context.addTopMethodNOS(1);
 		return super.visit(node);
@@ -513,7 +511,13 @@
 		String name = context.topMethod().getName();
 		Method invoked = this.dico.ensureFamixMethod(node.resolveConstructorBinding(), name, (Collection<org.eclipse.jdt.core.dom.Type>)null, /*retType*/null, /*owner*/context.topClass());  // cast needed to desambiguate the call
 		ImplicitVariable receiver = dico.ensureFamixImplicitVariable(Dictionary.SELF_NAME, context.topClass(), context.topMethod());
-		context.setLastInvocation( dico.addFamixInvocation(context.topMethod(), invoked, receiver, context.getLastInvocation()) );
+		Invocation invok = dico.addFamixInvocation(context.topMethod(), invoked, receiver, context.getLastInvocation());
+		if (invok == null) {
+			System.err.println("Could not create invocation:'"+context.topMethod()+"' / '"+receiver+"' / '"+invoked+"'");
+		}
+		else {
+			context.setLastInvocation( invok );
+		}
 
 		return super.visit(node);
 	}
@@ -524,7 +528,13 @@
 		// ConstructorInvocation (i.e. 'super(...)' ) happen in constructor, so the name is that of the superclass
 		Method invoked = this.dico.ensureFamixMethod(node.resolveConstructorBinding(), null, (Collection<org.eclipse.jdt.core.dom.Type>)null, /*retType*/null, /*owner*/context.topClass());  // cast needed to desambiguate the call
 		ImplicitVariable receiver = dico.ensureFamixImplicitVariable(Dictionary.SUPER_NAME, context.topClass(), context.topMethod());
-		context.setLastInvocation( dico.addFamixInvocation(context.topMethod(), invoked, receiver, context.getLastInvocation()) );
+		Invocation invok = dico.addFamixInvocation(context.topMethod(), invoked, receiver, context.getLastInvocation());
+		if (invok == null) {
+			System.err.println("Could not create invocation:'"+context.topMethod()+"' / '"+receiver+"' / '"+invoked+"'");
+		}
+		else {
+			context.setLastInvocation( invok );
+		}
 
 		return super.visit(node);
 	}
@@ -544,10 +554,16 @@
 				invoked = this.dico.ensureFamixMethod(calledBnd, calledName, (Collection<org.eclipse.jdt.core.dom.Type>)null, /*retType*/null, /*owner*/varTyp);  // cast needed to desambiguate the call
 			}
 			else {
-				// method static of a class called on the class
+				//  static method called on the class (or null receiver)
 				invoked = this.dico.ensureFamixMethod(calledBnd, calledName, (Collection<org.eclipse.jdt.core.dom.Type>)null, /*retType*/null, /*owner*/(fr.inria.verveine.core.gen.famix.Type)receiver);  // cast needed to desambiguate the call
 			}
-			context.setLastInvocation( dico.addFamixInvocation(sender, invoked, receiver, context.getLastInvocation()) );
+			Invocation invok = dico.addFamixInvocation(sender, invoked, receiver, context.getLastInvocation());
+			if (invok == null) {
+				System.err.println("Could not create invocation:'"+sender+"' / '"+receiver+"' / '"+invoked+"'");
+			}
+			else {
+				context.setLastInvocation( invok );
+			}
 		}
 	}
 
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: verveine.extractor.java/lib/verveine.core.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 34)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 35)
@@ -102,14 +102,14 @@
 	
 	@Test
 	public void testEntitiesNumber() {
-		assertEquals(11+8, TestVerveineUtils.selectElementsOfType(repo,fr.inria.verveine.core.gen.famix.Class.class).size()); // 11 + {Object,String,StringBuffer,AbstractStringBuilder,PrintStream,FilterOutputStream,OutputStream,System}
+		assertEquals(11+14, TestVerveineUtils.selectElementsOfType(repo,fr.inria.verveine.core.gen.famix.Class.class).size()); // 11 + {Object,String,StringBuffer,AbstractStringBuilder,PrintStream,FilterOutputStream,OutputStream,System,Comparable,Serializable,Flushable,Appendable,CharSequence,Closeable,}
 		assertEquals(3, TestVerveineUtils.selectElementsOfType(repo,PrimitiveType.class).size());//int,boolean,void
 		assertEquals(40+7, TestVerveineUtils.selectElementsOfType(repo,Method.class).size());//40+{System.out.println(),System.out.println(...),System.out.print,StringBuffer.append,Object.equals,String.equals,Object.toString}
 		assertEquals(10+1, TestVerveineUtils.selectElementsOfType(repo,Attribute.class).size());//10+{System.out}
 		assertEquals(2+4, TestVerveineUtils.selectElementsOfType(repo,Namespace.class).size());//2+{moose,java.lang,java.io,java}
 		assertEquals(26, TestVerveineUtils.selectElementsOfType(repo,Parameter.class).size());
 		assertEquals(54, TestVerveineUtils.selectElementsOfType(repo,Invocation.class).size());//actually 54, missing 2 !!!!
-		assertEquals(5+12, TestVerveineUtils.selectElementsOfType(repo,Inheritance.class).size());//5 internal + 12 from imported packages/classes
+		assertEquals(6+24, TestVerveineUtils.selectElementsOfType(repo,Inheritance.class).size());//6 internal + 24 from imported packages/classes
 		assertEquals(25, TestVerveineUtils.selectElementsOfType(repo,Access.class).size());// 16 "internal" attributes + 9 System.out
 		assertEquals(0, TestVerveineUtils.selectElementsOfType(repo,LocalVariable.class).size());
 	}
@@ -174,7 +174,7 @@
 	public void testInheritance() {
 		fr.inria.verveine.core.gen.famix.Class clazz;
 		Collection<Inheritance> superInheritances;
-		Inheritance inh;
+		Inheritance inh, inh2 = null;
 		
 		clazz = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "PrintServer");
 		assertNotNull(clazz);
@@ -191,6 +191,27 @@
 		inh = superInheritances.iterator().next();
 		assertSame(clazz, inh.getSubclass());
 		assertSame(TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, JavaDictionary.OBJECT_NAME), inh.getSuperclass());
+		
+		clazz = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "XPrinter");
+		assertNotNull(clazz);
+		superInheritances = clazz.getSuperInheritances();
+		assertEquals(2, superInheritances.size()); // superInheritances: Object and IPrinter (in this order)
+		for (Inheritance inheritance : superInheritances) {
+			assertSame(clazz, inheritance.getSubclass());
+			if (inheritance.getSuperclass().getName().equals("IPrinter")) {
+				inh2 = inheritance;
+				assertNull(inheritance.getNext());
+				assertSame(inheritance,inheritance.getPrevious().getNext());
+				assertSame(TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "IPrinter"), inheritance.getSuperclass());
+			} else {
+				inh = inheritance;
+				assertNull(inheritance.getPrevious());
+				assertSame(inheritance,inheritance.getNext().getPrevious());
+				assertSame(TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, JavaDictionary.OBJECT_NAME), inheritance.getSuperclass());
+			}
+		}
+		assertSame(inh.getNext(), inh2);
+		assertSame(inh2.getPrevious(), inh);
 	}
 
 	@Test
@@ -248,7 +269,7 @@
 		String javaLangName = JavaDictionary.OBJECT_PACKAGE_NAME.substring(JavaDictionary.OBJECT_PACKAGE_NAME.lastIndexOf('.')+1);
 		Namespace ns = TestVerveineUtils.detectElement(repo,Namespace.class, javaLangName);
 		assertNotNull(ns);
-		assertEquals(5, ns.getTypes().size());  // Object,String,StringBuffer,AbstractStringBuilder,System
+		assertEquals(8, ns.getTypes().size());  // Object,String,StringBuffer,AbstractStringBuilder,System,Comparable,Appendable,CharSequence
 		assertTrue(ns.getIsStub());
 			
 		fr.inria.verveine.core.gen.famix.Class obj = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, JavaDictionary.OBJECT_NAME);
