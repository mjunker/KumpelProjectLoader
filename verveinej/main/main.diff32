Index: branches/postMoose4_3Refactoring/verveine.extractor.java/.classpath
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/.classpath	(revision 90)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/.classpath	(revision 91)
@@ -2,7 +2,7 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
-	<classpathentry kind="lib" path="lib/org.eclipse.jdt.core_3.6.0.v_A58.jar" sourcepath="/org.eclipse.jdt.core/dom">
+	<classpathentry kind="lib" path="lib/org.eclipse.jdt.core_3.6.0.v_A58.jar" sourcepath="/org.eclipse.jdt.core/">
 		<attributes>
 			<attribute name="javadoc_location" value="jar:file:/usr/local/share/eclipse-3_6/plugins/isv-3.2.1-r321_v20060907.jar!/reference/api"/>
 		</attributes>
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/ad_hoc/Dictionary.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 90)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 91)
@@ -32,6 +32,11 @@
 
 public class Dictionary<B> {
 
+	/**
+	 * The FAMIX repository where all FAMIX entities are created and stored
+	 */
+	protected Repository famixRepo;
+
 	protected Map<B,NamedEntity> mapBind;
 
 	protected Map<String,Collection<NamedEntity>> mapName;
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 90)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 91)
@@ -75,6 +75,7 @@
 		for (String f : files) {
 			parseFile(f);
 		}*/
+		
 		// or parsing the entire project in one pass ---
 		VerveineJParser parser = new VerveineJParser();
 		parser.compile(	new String[] {"test_src/LANModel/moose/lan/"});
@@ -86,10 +87,10 @@
 	 * The "separate parsing" mechanism should ensure that linkages are appropriately done
 	 * @param file -- name of the file to parse
 	 */
-/*	private void parseFile(String file) {
+	private void parseFile(String file) {
 		String[] args = new String[] {
 				"-cp",
-				"test_src/LANModel//moose/lan/",
+				"test_src/LANModel/",
 				"test_src/LANModel/moose/lan/"+file
 				};
 		
@@ -100,7 +101,7 @@
 		new File(VerveineJParser.OUTPUT_FILE).delete();  // delete old MSE file
 		parser.outputMSE();  // to create a new one
 	}
-*/
+
 	@After
 	public void tearDown() {
 		new File(VerveineJParser.OUTPUT_FILE).delete();
@@ -108,6 +109,9 @@
 	
 	@Test
 	public void testEntitiesNumber() {
+		for (fr.inria.verveine.core.gen.famix.Class c : TestVerveineUtils.selectElementsOfType(repo,fr.inria.verveine.core.gen.famix.Class.class)) {
+			//System.out.println("class -- "+c.getName());
+		}
 		assertEquals(11+14, TestVerveineUtils.selectElementsOfType(repo,fr.inria.verveine.core.gen.famix.Class.class).size()); // 11 + {Object,String,StringBuffer,AbstractStringBuilder,PrintStream,FilterOutputStream,OutputStream,System,Comparable,Serializable,Flushable,Appendable,CharSequence,Closeable}
 		assertEquals(3,     TestVerveineUtils.selectElementsOfType(repo,PrimitiveType.class).size());//int,boolean,void
 		assertEquals(40+7,  TestVerveineUtils.selectElementsOfType(repo,Method.class).size());//40+{System.out.println(),System.out.println(...),System.out.print,StringBuffer.append,Object.equals,String.equals,Object.toString}
@@ -161,7 +165,7 @@
 	public void testNamedEntities() {
 		JavaDictionary dico = new JavaDictionary(repo);
 		
-		assertNotSame(dico.ensureFamixClass(null, A_CLASS_NAME, null),dico.ensureFamixClass(null, A_CLASS_NAME, null));
+		assertNotSame(dico.createFamixClass(null, A_CLASS_NAME, null),dico.createFamixClass(null, A_CLASS_NAME, null));
 		
 		Namespace javaLang = dico.ensureFamixNamespaceJavaLang(null);
 		assertEquals( JavaDictionary.OBJECT_PACKAGE_NAME, javaLang.getName());
@@ -173,9 +177,9 @@
 		assertEquals(0, obj.getSuperInheritances().size());
 		assertSame(javaLang, obj.getContainer());
 		
-		fr.inria.verveine.core.gen.famix.Class fmx = dico.ensureFamixClassStubOwner();
+		fr.inria.verveine.core.gen.famix.Class fmx = dico.createFamixClassStubOwner();
 		assertEquals(JavaDictionary.STUB_METHOD_CONTAINER_NAME, fmx.getName());
-		assertSame(fmx, dico.ensureFamixClassStubOwner());
+		assertSame(fmx, dico.createFamixClassStubOwner());
 	}
 
 	@Test
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 90)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 91)
@@ -5,14 +5,15 @@
 
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
 import java.io.File;
+import java.io.FileWriter;
 import java.util.Collection;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -46,32 +47,23 @@
 
 	private Repository repo;
 
-	public VerveineJTest_AdHoc() {
-		// make sure we don't have any pre-existing mse lying in the way
-		new File(VerveineJParser.OUTPUT_FILE).delete();
-	}
-	
-
 	/**
 	 * @throws java.lang.Exception
 	 */
 	@Before
 	public void setUp() throws Exception {
+		new File(VerveineJParser.OUTPUT_FILE).delete();
 		VerveineJParser parser = new VerveineJParser();
 		parser.compile(new String[] {"test_src/ad_hoc"});
 		repo = parser.getFamixRepo();
+		repo.exportMSE(new FileWriter(VerveineJParser.OUTPUT_FILE));
 	}
 
-	@After
-	public void tearDown() {
-		new File(VerveineJParser.OUTPUT_FILE).delete();
-	}
-	
 	@Test
 	public void testExceptions() {
 		Method meth = TestVerveineUtils.detectElement(repo, Method.class, "lire");
 		assertNotNull(meth);
-		
+
 		fr.inria.verveine.core.gen.famix.Class excepClass = TestVerveineUtils.detectElement(repo, fr.inria.verveine.core.gen.famix.Class.class, "ReadException");
 		assertNotNull(excepClass);
 
@@ -79,7 +71,7 @@
 		DeclaredException exD = meth.getDeclaredExceptions().iterator().next();
 		assertSame(meth, exD.getDefiningMethod());
 		assertSame(excepClass, exD.getExceptionClass());
-		
+
 		assertEquals(1, meth.getThrownExceptions().size());
 		ThrownException exT = meth.getThrownExceptions().iterator().next();
 		assertSame(meth, exT.getDefiningMethod());
@@ -169,19 +161,24 @@
 	}
 
 	@Test
-	public void testClassParameterTypes() {
-		ParameterizableClass dicoClass = TestVerveineUtils.detectElement(repo, ParameterizableClass.class, "Dictionary");
-		assertNotNull(dicoClass);
-		assertEquals("Dictionary", dicoClass.getName());
-		assertEquals(2, dicoClass.getTypes().size());
-		assertEquals(1, dicoClass.getParameters().size());
+	public void testParameterizableClass() {
+		ParameterizableClass dico = TestVerveineUtils.detectElement(repo, ParameterizableClass.class, "Dictionary");
+		assertNotNull(dico);
+		assertEquals("Dictionary", dico.getName());
+		assertEquals(2, dico.getTypes().size());
+		assertEquals(1, dico.getParameters().size());
 		
 		ParameterType dicoParam = TestVerveineUtils.detectElement(repo, ParameterType.class, "B");
 		assertNotNull(dicoParam);
 		assertEquals("B", dicoParam.getName());
 		
-		assertSame(dicoClass, dicoParam.getContainer());
-		assertSame(dicoParam, dicoClass.getParameters().iterator().next());
+		assertSame(dico, dicoParam.getContainer());
+		assertSame(dicoParam, dico.getParameters().iterator().next());
+
+		/* Collection<Object> is not seen as parameterizable by JDT 		 */
+		 ParameterizableClass collec = TestVerveineUtils.detectElement(repo, ParameterizableClass.class, "Collection");
+		 assertNotNull(collec);
+
 	}
 
 	@Test
@@ -206,17 +203,6 @@
 	}
 	
 	@Test
-	public void testFieldArgumentTypes() {
-		Attribute famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "mapBind");
-		assertNotNull(famixAtt);
-		assertEquals("mapBind", famixAtt.getName());
-		//assertEquals(2, famixAtt.getDeclaredArgumentTypes().size());
-		//Iterator<Type> it = famixAtt.getDeclaredArgumentTypes().iterator();
-		//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "B"), it.next());
-		//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "NamedEntity"), it.next());
-	}
-	
-	@Test
 	public void testMethodParameterArgumentTypes() {
 		Method fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "getEntityByName");
 		assertNotNull(fmxMethod);
@@ -321,8 +307,7 @@
 			}
 		}
 	}
-	
-	
+
 	@Test
 	public void testMethodReturnArgumentTypes() {
 		Method fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "getEntityByName");
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 90)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 91)
@@ -73,15 +73,24 @@
 	// VISITOR METHODS
 
 	public boolean visit(CompilationUnit node) {
+		System.err.println("TRACE, RefVisiting CompilationUnit");
+
 		PackageDeclaration pckg = node.getPackage();
+		Namespace fmx = null;
 		if (pckg==null) {
-			this.context.pushPckg( dico.ensureFamixNamespaceDefault() );
+			 fmx = dico.createFamixNamespaceDefault();
 		}
 		else {
-			this.context.pushPckg( (Namespace)dico.getEntityByKey(pckg.resolveBinding()) );
+			fmx = (Namespace)dico.getEntityByKey(pckg.resolveBinding());
 		}
-		return super.visit(node);
-
+		if (pckg != null) {
+			this.context.pushPckg(fmx);
+			return super.visit(node);
+		}
+		else {
+			this.context.pushPckg(null);
+			return false;
+		}
 	}
 
 	public void endVisit(CompilationUnit node) {
@@ -120,13 +129,20 @@
 	}
 
 	public boolean visit(TypeDeclaration node) {
+		System.err.println("TRACE, RefVisiting TypeDeclaration: "+node.getName().getIdentifier());
 		ITypeBinding bnd = node.resolveBinding();
 		fr.inria.verveine.core.gen.famix.Class fmx = (fr.inria.verveine.core.gen.famix.Class)dico.getEntityByKey(bnd);
-		this.context.pushClass(fmx );
+		if (fmx != null) {
+			this.context.pushClass(fmx );
 
-		dico.addFamixAnnotationInstances(bnd, fmx);
+			dico.addFamixAnnotationInstances(bnd, fmx);
 
-		return super.visit(node);
+			return super.visit(node);
+		}
+		else {
+			this.context.pushClass(null);
+			return false;
+		}
 	}
 
 	public void endVisit(TypeDeclaration node) {
@@ -135,15 +151,24 @@
 	}
 
 	public boolean visit(ClassInstanceCreation node) {
+		System.err.println("TRACE, RefVisiting ClassInstanceCreation");
 		AnonymousClassDeclaration decl = node.getAnonymousClassDeclaration(); 
 		if (decl != null) {
 			ITypeBinding bnd = decl.resolveBinding();
 			fr.inria.verveine.core.gen.famix.Class fmx = (fr.inria.verveine.core.gen.famix.Class)dico.getEntityByKey(bnd); 
-			this.context.pushClass(fmx);
-
-			dico.addFamixAnnotationInstances(bnd, fmx);
+			if (fmx != null) {
+				this.context.pushClass(fmx);
+				dico.addFamixAnnotationInstances(bnd, fmx);
+				return super.visit(node);
+			}
+			else {
+				this.context.pushClass(null );
+				return false;
+			}
 		}
-		return super.visit(node);
+		else {
+			return super.visit(node);
+		}
 	}
 
 	public void endVisit(AnonymousClassDeclaration node) {
@@ -153,6 +178,8 @@
 
 	@SuppressWarnings("unchecked")
 	public boolean visit(MethodDeclaration node) {
+		System.err.println("TRACE, RefVisiting MethodDeclaration: "+node.getName().getIdentifier());
+
 		IMethodBinding bnd = node.resolveBinding();
 		Method meth = (Method) dico.getEntityByKey(bnd);
 
@@ -163,14 +190,18 @@
 
 			// Exceptions
 			for (Name excepName : (List<Name>)node.thrownExceptions()) {
-				fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.ensureFamixClass(excepName.resolveTypeBinding(), excepName.getFullyQualifiedName(), null);
+				fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.createFamixClass(excepName.resolveTypeBinding(), excepName.getFullyQualifiedName(), null);
 				if (excepFmx != null) {
 					dico.createFamixDeclaredException(meth, excepFmx);
 				}
 			}
+			return super.visit(node);
+		}
+		else {
+			this.context.pushMethod(null);
+			return false;
 		}
 
-		return super.visit(node);
 	}
 
 	public void endVisit(MethodDeclaration node) {
@@ -180,7 +211,7 @@
 
 	@SuppressWarnings({ "unchecked" })
 	public boolean visit(FieldDeclaration node) {
-//		System.err.println("TRACE, RefVisiting FieldDeclaration");
+		System.err.println("TRACE, RefVisiting FieldDeclaration: ");
 		for (VariableDeclarationFragment vd : (List<VariableDeclarationFragment>)node.fragments()) {
 			IVariableBinding bnd = vd.resolveBinding();
 			Attribute fmx = (Attribute) dico.getEntityByKey(bnd);
@@ -199,7 +230,7 @@
 
 	@SuppressWarnings({ "static-access" })
 	public boolean visit(SuperMethodInvocation node) {
-		methodInvocation(node.resolveMethodBinding(), node.getName().getFullyQualifiedName(), this.dico.ensureFamixImplicitVariable(this.context.topClass(), dico.SUPER_NAME));
+		methodInvocation(node.resolveMethodBinding(), node.getName().getFullyQualifiedName(), this.dico.createFamixImplicitVariable(this.context.topClass(), dico.SUPER_NAME));
 		return super.visit(node);
 	}
 
@@ -252,10 +283,10 @@
 		if (meth != null) {
 			fr.inria.verveine.core.gen.famix.Class excepFmx = null;
 			if (excepClass instanceof SimpleType) {
-				excepFmx = this.dico.ensureFamixClass(excepClass.resolveBinding(), ((SimpleType) excepClass).getName().getFullyQualifiedName(), null);
+				excepFmx = this.dico.createFamixClass(excepClass.resolveBinding(), ((SimpleType) excepClass).getName().getFullyQualifiedName(), null);
 			}
 			else if (excepClass instanceof QualifiedType) {
-				excepFmx = this.dico.ensureFamixClass(excepClass.resolveBinding(), ((QualifiedType) excepClass).getName().getIdentifier(), null);
+				excepFmx = this.dico.createFamixClass(excepClass.resolveBinding(), ((QualifiedType) excepClass).getName().getIdentifier(), null);
 			}
 			if (excepFmx != null) {
 				dico.createFamixCaughtException(meth, excepFmx);
@@ -268,7 +299,7 @@
 	@Override
 	public boolean visit(ThrowStatement node) {
 		Method meth = this.context.topMethod();
-		fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.ensureFamixClass(node.getExpression().resolveTypeBinding(), null, null);
+		fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.createFamixClass(node.getExpression().resolveTypeBinding(), null, null);
 		if (excepFmx != null) {
 			dico.createFamixThrownException(meth, excepFmx);
 		}
@@ -285,7 +316,7 @@
 	private NamedEntity getReceiver(Expression expr) {
 		// msg(), same as ThisExpression
 		if (expr == null) {
-			return this.dico.ensureFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
+			return this.dico.createFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
 		}
 
 		// array[i].msg()
@@ -359,12 +390,12 @@
 			if (bnd instanceof ITypeBinding) {
 				// msg() is a static method of Name
 				//TODO why returning a variable here? Should not it be the class itself?
-				ret = dico.createFamixUnknownVariable( dico.ensureFamixType((ITypeBinding)bnd, null, null), bnd.getName());
+				ret = dico.createFamixUnknownVariable( dico.ensureFamixType((ITypeBinding)bnd, null, null, context.top()), bnd.getName());
 			}
 			else if (bnd instanceof IVariableBinding) {
 				String varName = ( ((Name)expr).isSimpleName() ? ((SimpleName)expr).getFullyQualifiedName() : ((QualifiedName)expr).getName().getIdentifier());
 				if ( ((IVariableBinding)bnd).isField() ) {
-					ret = dico.ensureFamixAttribute(bnd, varName, null, null);
+					ret = dico.createFamixAttribute(bnd, varName, null, null);
 				}
 				else if ( ((IVariableBinding)bnd).isParameter() ) {
 					ret = dico.ensureFamixParameter( (IVariableBinding)bnd, varName, null, context.topMethod());
@@ -406,13 +437,13 @@
 		
 		// this.msg()
 		else if (expr instanceof ThisExpression) {
-			return this.dico.ensureFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
+			return this.dico.createFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
 		}
 
 		// type.class.msg()
 		else if (expr instanceof TypeLiteral) {
 			// may be could specify: ensureFamixClass ??
-			return dico.ensureFamixType( expr.resolveTypeBinding(), null, null);
+			return dico.ensureFamixType( expr.resolveTypeBinding(), null, null,  context.top());
 		}
 
 		// ... OTHER POSSIBLE EXPRESSIONS ?
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 90)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 91)
@@ -38,6 +38,8 @@
 import org.eclipse.jdt.core.dom.TryStatement;
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
+import org.eclipse.jdt.core.dom.TypeParameter;
+import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.eclipse.jdt.core.dom.VariableDeclarationExpression;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
@@ -47,11 +49,16 @@
 import fr.inria.verveine.core.gen.famix.AnnotationType;
 import fr.inria.verveine.core.gen.famix.AnnotationTypeAttribute;
 import fr.inria.verveine.core.gen.famix.Attribute;
+import fr.inria.verveine.core.gen.famix.Class;
+import fr.inria.verveine.core.gen.famix.ContainerEntity;
 import fr.inria.verveine.core.gen.famix.EnumValue;
 import fr.inria.verveine.core.gen.famix.LocalVariable;
 import fr.inria.verveine.core.gen.famix.Method;
 import fr.inria.verveine.core.gen.famix.Namespace;
 import fr.inria.verveine.core.gen.famix.Parameter;
+import fr.inria.verveine.core.gen.famix.ParameterType;
+import fr.inria.verveine.core.gen.famix.ParameterizableClass;
+import fr.inria.verveine.core.gen.famix.StructuralEntity;
 
 /**
  * AST Visitor that defines all the (Famix) entities of interest
@@ -81,15 +88,20 @@
 		Namespace fmx = null;
 		PackageDeclaration pckg = node.getPackage();
 		if (pckg==null) {
-			fmx = dico.ensureFamixNamespaceDefault();
+			fmx = dico.createFamixNamespaceDefault();
 		}
 		else {
 			fmx = dico.ensureFamixNamespace(pckg.resolveBinding(), pckg.getName().getFullyQualifiedName());
 			fmx.setIsStub(false);
 		}
-		this.context.pushPckg(fmx);
-		return super.visit(node);
 
+		if (pckg != null) {
+			return super.visit(node);
+		}
+		else {
+			this.context.pushPckg(null);
+			return false;
+		}
 	}
 
 	public void endVisit(CompilationUnit node) {
@@ -98,9 +110,13 @@
 	}
 
 	public boolean visit(TypeDeclaration node) {
+		// Can only be a class or interface declaration
+
 		//System.err.println("TRACE, DefVisiting TypeDeclaration: "+node.getName().getIdentifier());
 		ITypeBinding bnd = node.resolveBinding();
-		fr.inria.verveine.core.gen.famix.Class fmx = dico.ensureFamixClass(bnd, node.getName().getIdentifier(), context.top());
+		@SuppressWarnings("unchecked")
+		List<TypeParameter> tparams = node.typeParameters();
+		fr.inria.verveine.core.gen.famix.Class fmx = (Class) dico.ensureFamixType(bnd, /*name*/node.getName().getIdentifier(), /*owner*/context.top(), /*ctxt*/context.top());  // isGeneric = (tparams.size()>0)
 		if (fmx != null) {
 			fmx.setIsStub(false);
 
@@ -108,11 +124,20 @@
 
 			dico.addSourceAnchor(fmx, node);
 			dico.createFamixComment(node.getJavadoc(), fmx);
+			
+			for (TypeParameter tp : tparams) {
+				// if there is a type parameter, then fmx will be a Famix ParameterizableClass
+				ParameterType fmxParam = dico.createFamixParameterType( tp.resolveBinding(), tp.getName().getIdentifier(), (ParameterizableClass)fmx); // note owner of the ParameterType is the ParameterizableClass
+				if (fmxParam != null) {
+					fmxParam.setIsStub(false);
+				}
+			}
+			return super.visit(node);
 		}
-
-		//TODO fmx.setParameterTypes(dico.ensureFamixTypesParameters(node.typeParameters()));
-		
-		return super.visit(node);
+		else {
+			this.context.pushClass(null);
+			return false;
+		}
 	}
 
 	public void endVisit(TypeDeclaration node) {
@@ -125,19 +150,26 @@
 		fr.inria.verveine.core.gen.famix.Class fmx = null;
 		AnonymousClassDeclaration decl = node.getAnonymousClassDeclaration(); 
 		if (decl != null) {
-			fmx = this.dico.ensureFamixClass(decl.resolveBinding(), null, context.top());
+			fmx = (Class) this.dico.ensureFamixType(decl.resolveBinding(), /*name*/"anonymous("+dico.findTypeName(node.getType())+")", /*owner*/context.top(), /*ctxt*/context.top());  //  isGeneric = false
 			if (fmx != null) {
 				fmx.setIsStub(false);
-			}
 
-			dico.addSourceAnchor(fmx, node);
+				dico.addSourceAnchor(fmx, node);
+				this.context.pushClass(fmx);
+				return super.visit(node);
+			}
+			else {
+				this.context.pushClass(null);
+				return false;
+			}
 		}
-		this.context.pushClass(fmx);
 		return super.visit(node);
 	}
 
 	public void endVisit(ClassInstanceCreation node) {
-		this.context.popClass();
+		if (node.getAnonymousClassDeclaration() != null) {
+			this.context.popClass();
+		}
 		super.endVisit(node);
 	}
 
@@ -149,12 +181,14 @@
 			fmx.setIsStub(Boolean.FALSE);
 			
 			context.pushAnnotationType(fmx);
+			return super.visit(node);
 		}
-
-		return super.visit(node);
+		else {
+			context.pushAnnotationType(null);
+			return false;
+		}
 	}
 
-
 	public void endVisit(AnnotationTypeDeclaration node) {
 		this.context.popAnnotationType();
 		super.endVisit(node);
@@ -168,9 +202,12 @@
 			fmx.setIsStub(false);
 			
 			context.pushAnnotationMember(fmx);
+			return super.visit(node);
 		}
-
-		return super.visit(node);
+		else {
+			context.pushAnnotationMember(null);
+			return false;
+		}
 	}
 
 	public void endVisit(AnnotationTypeMemberDeclaration node) {
@@ -181,7 +218,7 @@
 	@SuppressWarnings("unchecked")
 	public boolean visit(EnumDeclaration node) {
 //		System.err.println("TRACE, DefVisiting EnumDeclaration: "+node.getName().getIdentifier());
-		fr.inria.verveine.core.gen.famix.Enum fmx = dico.ensureFamixEnum(node.resolveBinding(), node.getName().getIdentifier(), context.top());
+		fr.inria.verveine.core.gen.famix.Enum fmx = dico.createFamixEnum(node.resolveBinding(), node.getName().getIdentifier(), context.top());
 		if (fmx != null) {
 			fmx.setIsStub(Boolean.FALSE);
 			
@@ -189,8 +226,11 @@
 				EnumValue ev = dico.ensureFamixEnumValue(ecst.resolveVariable(), ecst.getName().getIdentifier(), fmx);
 				ev.setIsStub(Boolean.FALSE);
 			}
+			return super.visit(node);
 		}
-		return super.visit(node);
+		else {
+			return false;
+		}
 	}
 
 	@SuppressWarnings("unchecked")
@@ -204,13 +244,24 @@
 		for (SingleVariableDeclaration param : (List<SingleVariableDeclaration>)node.parameters()) {
 				paramTypes.add(param.getType());
 		}
+
+		fr.inria.verveine.core.gen.famix.Type fmxTyp;
+		if (retTyp == null) {
+			fmxTyp = null;
+		}
+		else if (retTyp.isParameterizedType()) {
+			// some type (e.g. Collection<...>) are defined as ParameterizedType in the AST (here 'nodeTyp') and not in the binding (here 'nodeTyp.resolveBinding()')
+			fmxTyp = dico.ensureFamixParameterizedType(retTyp.resolveBinding(), dico.findTypeName(retTyp), /*owner*/null, context.top());
+		}
+		else {
+			fmxTyp = dico.ensureFamixType(retTyp.resolveBinding(), dico.findTypeName(retTyp), /*owner*/null, context.top());
+		}
+
 		// creating/recovering it
-		Method fmx = dico.ensureFamixMethod(bnd, node.getName().getIdentifier(), paramTypes,
-											(retTyp == null) ? null : dico.ensureFamixType(retTyp.resolveBinding(), retTyp.toString(), null),
-											context.topClass());
+		Method fmx = dico.ensureFamixMethod(bnd, node.getName().getIdentifier(), paramTypes, fmxTyp, context.topClass());
 		
-		if (node.getReturnType2() != null && node.getReturnType2().isParameterizedType()) {
-			//TODO fmx.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)node.getReturnType2()).typeArguments()));
+		if (retTyp != null && retTyp.isParameterizedType()) {
+			//TODO fmx.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)retTyp).typeArguments()));
 		}
 		
 		if (fmx != null) {
@@ -225,44 +276,43 @@
 			dico.createFamixComment(node.getJavadoc(), fmx);
 
 			// creating the method's parameters
+			List<VariableDeclaration> paramAsVarList;
 			for (SingleVariableDeclaration param : (List<SingleVariableDeclaration>)node.parameters()) {
-				fr.inria.verveine.core.gen.famix.Type paramTyp = dico.ensureFamixType(param.getType().resolveBinding(), dico.findTypeName(param.getType()), null);
-				Parameter fmxParam = dico.ensureFamixParameter(param.resolveBinding(), param.getName().getIdentifier(), paramTyp, fmx);
-				if (fmxParam != null) {
-					fmxParam.setIsStub(false);
-				}
-				if (param.getType().isParameterizedType()) {
-					//TODO fmxParam.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)param.getType()).typeArguments()));
-				}
+				// Note: method and ParamTyp bindings are null for ParameterType :-(
+				paramAsVarList = new ArrayList<VariableDeclaration>(1);
+				paramAsVarList.add(param);
+				visitVariablesDeclarations(node, param.getType(), paramAsVarList, context.topMethod());
 			}
+			return super.visit(node);
+		}
+		else {
+			this.context.pushMethod(null);
+			return false;
 		}
-		return super.visit(node);	
 	}
 
 	public void endVisit(MethodDeclaration node) {
-		int cyclo = context.getTopMethodCyclo();
-		int nos = context.getTopMethodNOS();
+		int cyclo = 0;
+		int nos = 0;
+		if (context.topMethod() != null) {
+			cyclo = context.getTopMethodCyclo();
+			nos = context.getTopMethodNOS();
+		}
 		Method fmx = this.context.popMethod();
-		fmx.setNOS(nos);
-		fmx.setCyclo(cyclo);
+		if (fmx != null) {
+			fmx.setNOS(nos);
+			fmx.setCyclo(cyclo);
+		}
 		super.endVisit(node);
 	}
 	
 	@SuppressWarnings({ "unchecked" })
 	public boolean visit(FieldDeclaration node) {
 //		System.err.println("TRACE, DefVisiting FieldDeclaration");
-		for (VariableDeclarationFragment vd : (List<VariableDeclarationFragment>)node.fragments()) {
-			Attribute fmx = dico.ensureFamixAttribute(vd.resolveBinding(), vd.getName().getFullyQualifiedName(), dico.ensureFamixType(null, node.getType().toString(), null), context.topClass());
-
-			if (fmx != null) {
-				fmx.setIsStub(false);
-			}
-			if (node.getType().isParameterizedType()) {
-				//TODO fmx.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)node.getType()).typeArguments()));
-			}
 
-			dico.addSourceAnchor(fmx, node);
-			dico.createFamixComment(node.getJavadoc(), fmx);
+		for (StructuralEntity att : visitVariablesDeclarations(node, node.getType(), (List<VariableDeclaration>)node.fragments(), context.topClass()) ) {
+			dico.addSourceAnchor(att, node);
+			dico.createFamixComment(node.getJavadoc(), att);
 		}
 		return super.visit(node);
 	}
@@ -270,34 +320,74 @@
 	@SuppressWarnings("unchecked")
 	public boolean visit(VariableDeclarationExpression node) {
 		//System.err.println("TRACE, DefVisiting VariableDeclarationExpression");
-		visitVariablesDeclarations(node, node.getType(), (List<VariableDeclarationFragment>)node.fragments());
+
+		// we don't declare (local) variables that have a primitive type
+		// because we are assuming that the user is not interested in them 
+		if (! node.getType().isPrimitiveType()) {
+			for (StructuralEntity att : visitVariablesDeclarations(node, node.getType(), (List<VariableDeclaration>)node.fragments(), context.topMethod())) {
+				dico.addSourceAnchor(att, node);
+			}
+		}
+
 		return super.visit(node);
 	}
 
 	@SuppressWarnings("unchecked")
 	public boolean visit(VariableDeclarationStatement node) {
 		//System.err.println("TRACE, DefVisiting VariableDeclarationStatement");
-		visitVariablesDeclarations(node, node.getType(), (List<VariableDeclarationFragment>)node.fragments());
+
+		// we don't declare (local) variables that have a primitive type
+		// because we are assuming that the user is not interested in them 
+		if (! node.getType().isPrimitiveType()) {
+			for (StructuralEntity att : visitVariablesDeclarations(node, node.getType(), (List<VariableDeclaration>)node.fragments(), context.topMethod())) {
+				dico.addSourceAnchor(att, node);
+			}
+		}
+
 		return super.visit(node);
 	}
 
-	private void visitVariablesDeclarations(ASTNode node, Type nodeTyp, List<VariableDeclarationFragment> fragments) {
-		// we don't declare (local) variables that have a primitive type
-		// because we are assuming here that the user is not interested in them 
-		if (nodeTyp.isPrimitiveType()) {
-			return;
+	private Collection<StructuralEntity> visitVariablesDeclarations(ASTNode node, Type varTyp, List<VariableDeclaration> fragments, ContainerEntity ctxt) {
+		Collection<StructuralEntity> ret = new ArrayList<StructuralEntity>();
+
+		fr.inria.verveine.core.gen.famix.Type fmxTyp;
+		if (varTyp.isParameterizedType()) {
+			// some type (e.g. Collection<...>) are defined as ParameterizedType in the AST (here 'nodeTyp') and not in the binding (here 'nodeTyp.resolveBinding()')
+			fmxTyp = dico.ensureFamixParameterizedType(varTyp.resolveBinding(), dico.findTypeName(varTyp), /*owner*/null, ctxt);
+			// TODO treat ParameterTypes
 		}
+		else {
+			fmxTyp = dico.ensureFamixType(varTyp.resolveBinding(), dico.findTypeName(varTyp), /*owner*/null, ctxt);
+		}
+		for (VariableDeclaration vd : fragments) {
+			StructuralEntity fmx;
+			if (node instanceof MethodDeclaration) {
+				// creating the parameters of a method. In this case, 'fragment' is aList<SingleVariableDeclarationFragment> and 'varType' is null
+				fmx = dico.ensureFamixParameter(vd.resolveBinding(), vd.getName().getIdentifier(), fmxTyp, (Method)ctxt);
+			}
+			else if (node instanceof FieldDeclaration) {
+				// creating a class' field
+				fmx = dico.ensureFamixAttribute(vd.resolveBinding(), vd.getName().getIdentifier(), fmxTyp, (fr.inria.verveine.core.gen.famix.Class) ctxt);
+			}
+			else if (node instanceof VariableDeclarationExpression) {
+				// creating a method's local variable
+				fmx = dico.ensureFamixLocalVariable(vd.resolveBinding(), vd.getName().getIdentifier(), fmxTyp, (Method) ctxt);
+			}
+			else if (node instanceof VariableDeclarationExpression) {
+				// creating a method's local variable
+				fmx = dico.ensureFamixLocalVariable(vd.resolveBinding(), vd.getName().getIdentifier(), fmxTyp, (Method) ctxt);
+			}
+			else {
+				fmx = null;
+			}
 
-		for (VariableDeclarationFragment vd : fragments) {
-			LocalVariable fmx = dico.ensureFamixLocalVariable(vd.resolveBinding(), vd.getName().getIdentifier(), dico.ensureFamixType(null, nodeTyp.toString(), null), context.topMethod());
 			if (fmx != null) {
 				fmx.setIsStub(false);
-				dico.addSourceAnchor(fmx, node);
-			}
-			if (nodeTyp.isParameterizedType()) {
-				//TODO fmx.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)nodeTyp).typeArguments()));
+				ret.add(fmx);
 			}
 		}
+
+		return ret;
 	}
 
 	// METRICS: CYCLO, NOS
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 90)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 91)
@@ -3,7 +3,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.LinkedList;
-import java.util.List;
 
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.ArrayType;
@@ -18,7 +17,6 @@
 import org.eclipse.jdt.core.dom.Modifier;
 import org.eclipse.jdt.core.dom.QualifiedType;
 import org.eclipse.jdt.core.dom.SimpleType;
-import org.eclipse.jdt.core.dom.TypeParameter;
 
 import ch.akuhn.fame.Repository;
 import fr.inria.verveine.core.Dictionary;
@@ -38,6 +36,9 @@
 import fr.inria.verveine.core.gen.famix.NamedEntity;
 import fr.inria.verveine.core.gen.famix.Namespace;
 import fr.inria.verveine.core.gen.famix.Parameter;
+import fr.inria.verveine.core.gen.famix.ParameterType;
+import fr.inria.verveine.core.gen.famix.ParameterizableClass;
+import fr.inria.verveine.core.gen.famix.ParameterizedType;
 import fr.inria.verveine.core.gen.famix.PrimitiveType;
 import fr.inria.verveine.core.gen.famix.SourceAnchor;
 import fr.inria.verveine.core.gen.famix.SourcedEntity;
@@ -69,7 +70,7 @@
 
 	/**
 	 * Returns a Famix Namespace associated with its IPackageBinding and/or name.
-	 * The Entity is created if it does not exist (see also {@link Dictionary#ensureFamixNamespace(Object, String)}).
+	 * The Entity is created if it does not exist (see also {@link Dictionary#createFamixNamespace(Object, String)}).
 	 * Also creates or recovers recusively it's parent namespaces.<br>
 	 * At least one of <b>bnd</b> and <b>name</b> must be non null.
 	 * @param bnd -- the JDT Binding that may be used as a uniq key to recover this namespace
@@ -89,8 +90,8 @@
 			 * (for example when creating parent packages of a package we have a binding for).
 			 * Because the preferred solution in Moose is to give their simple names to packages, they must be post-processed when
 			 * all is said and done. */
-			fmx = super.ensureFamixNamespace( bnd, name);
-			parent = this.ensureFamixNamespace(null, removeLastName(name));
+			fmx = createFamixNamespace( bnd, name);
+			parent = ensureFamixNamespace(null, removeLastName(name));
 			// set the parentscope relationship
 			if ( (parent != null) && (fmx != null) && (fmx.getParentScope() == null)) {
 				parent.addChildScopes(fmx);
@@ -100,67 +101,262 @@
 		return fmx;
 	}
 
-	public Collection<Type> ensureFamixTypes(List<org.eclipse.jdt.core.dom.Type> types) {
-		Collection<Type> fmxTypes = new ArrayList<Type>();
-		
-		Type fmxType = null;
-		for (org.eclipse.jdt.core.dom.Type type : types) {
-			ITypeBinding bnd = type.resolveBinding();
-			if (bnd != null) {
-				fmxType = ensureFamixType(bnd, findTypeName(type), null);
-			} else {
-				fmxType = ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, type.toString());
+	/**
+	 * Recovers or creates a Famix Type (see also {@link Dictionary#createFamixType(Object, String, ContainerEntity)}
+	 */
+	public Type ensureFamixType(ITypeBinding bnd, String name, ContainerEntity owner, ContainerEntity ctxt) {
+		Type fmx = null;
+
+		if (bnd == null) {
+			if (name == null) {
+				return null;
 			}
-			fmxTypes.add(fmxType);
+			fmx = searchTypeInContext(name, ctxt);
+			if (fmx != null) {
+				return fmx;
+			}
+
+			if ( (owner != null) && (owner instanceof ParameterizableClass) ) {
+				return createFamixParameterType(null, name, (ParameterizableClass) owner);
+			}
+			else {
+				return super.createFamixType(null, name, owner);
+			}
 		}
-		return fmxTypes;
+
+		// bnd != null
+
+		fmx = (Type) getEntityByKey(bnd);
+		if (fmx != null) {
+			return fmx;
+		}
+
+		if (bnd.isArray()) {
+			bnd = bnd.getElementType();
+		}
+
+		if (bnd.isPrimitive()) {
+			return createFamixPrimitiveType(bnd, name);
+		}
+
+		if (bnd.isEnum()) {
+			return createFamixEnum(bnd, name, owner);
+		}
+		
+		if (bnd.isTypeVariable() ) {
+			return createFamixParameterType(bnd, name, (ParameterizableClass) owner);
+		}
+
+		if (bnd.isRawType() || bnd.isGenericType()) {
+			return ensureFamixClass(bnd.getErasure(), name, owner, /*isGeneric*/true);
+		}
+
+		if (bnd.isParameterizedType()) {
+			return ensureFamixParameterizedType(bnd, name, (ParameterizableClass) ensureFamixClass(bnd.getErasure(), name, owner, /*isGeneric*/true), owner);
+		}
+
+		// it seems wise to test isClass after isGenericType, isParameterizedType, ... ? 
+		if (bnd.isClass() || bnd.isInterface()) {
+			return ensureFamixClass(bnd, name, owner, /*isGeneric*/false);
+		}
+
+
+		return super.createFamixType(bnd, name, owner);
 	}
 
 	/**
-	 * Recovers or creates a Famix Type (see also {@link Dictionary#ensureFamixType(Object, String, ContainerEntity)}
+	 * Returns a Famix Class associated with the ITypeBinding.
+	 * The Entity is created if it does not exist.<br>
+	 * Params: see {@link Dictionary#createFamixClass(Object, String, ContainerEntity)}.
+	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
-	public Type ensureFamixType(ITypeBinding bnd, String name, ContainerEntity owner) {
+	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(ITypeBinding bnd, String name, ContainerEntity owner, boolean isGeneric) {
+		fr.inria.verveine.core.gen.famix.Class fmx = null;
 
+		// if Binding is null, we can only rely on provided parameters, so lets do it now and return
 		if (bnd == null) {
-			return super.ensureFamixType(null, name, owner);
+			if (name == null) {
+				return null;
+			}
+			if (owner == null) {
+				owner = createFamixNamespaceDefault();
+			}
+			
+			if (isGeneric) {
+				return super.createFamixParameterizableClass(null, name, owner);
+			}
+			else {
+				return super.createFamixClass(null, name, owner);
+			}
 		}
 
+		// --------------- some special cases
 		if (bnd.isArray()) {
 			bnd = bnd.getElementType();
 		}
 
-		if (bnd.isClass() || bnd.isInterface()) {
-			return this.ensureFamixClass(bnd, name, owner);
+		if (bnd.isPrimitive()) {
+			// should have called ensureFamixPrimitiveType(bnd). Why are we here ?
+			return null;
+		}
+
+		fmx = (fr.inria.verveine.core.gen.famix.Class)getEntityByKey(bnd);	// to avoid useless computations if we can
+		if (fmx != null) {
+			return fmx;
+		}
+
+		// --------------- name
+		if (name == null) {
+			if (! bnd.isAnonymous()) {
+				name = bnd.getErasure().getName();  // for generics, will give the "core" type name, for naormal type, won't change anything
+			}
+			else { // anonymous class
+				if (bnd.getSuperclass() != null) {
+					name = bnd.getSuperclass().getName();
+				}
+				if ( (name == null) || name.equals(OBJECT_NAME)) {
+					ITypeBinding[] intfcs = bnd.getInterfaces();
+					if ( (intfcs != null) && (intfcs.length > 0) ) {
+						name = bnd.getInterfaces()[0].getName();
+					}
+					else {
+						name = "???";
+					}
+				}
+				name = "anonymous(" + name + ")";
+			}
 		}
 		
-		if (bnd.isPrimitive()) {
-			return ensureFamixPrimitiveType(bnd, name);
+		if (name.equals(OBJECT_NAME)) {
+			return ensureFamixClassObject(bnd);
 		}
 
-		if (bnd.isEnum()) {
-			return ensureFamixEnum(bnd, name, owner);
+		// --------------- owner
+		if (owner == null) {
+			IMethodBinding parentMtd = bnd.getDeclaringMethod();
+			if (parentMtd != null) {
+				owner = this.ensureFamixMethod(parentMtd, null, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, null);  // cast needed to desambiguate the call
+			}
+			else {
+				ITypeBinding parentClass = bnd.getDeclaringClass();
+				if (parentClass != null) {
+					owner = this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null);
+				}
+				else {
+					IPackageBinding parentPckg = bnd.getPackage();
+					if (parentPckg != null) {
+						owner = this.ensureFamixNamespace(parentPckg, null);
+					}
+					else {
+						owner = this.createFamixNamespaceDefault();
+					}
+				}
+			}
+		}
+
+		// --------------- superclasses (including interfaces)
+		Collection<fr.inria.verveine.core.gen.famix.Class> sups = new LinkedList<fr.inria.verveine.core.gen.famix.Class>();
+		if (! bnd.isInterface()) {
+			ITypeBinding supbnd = bnd.getSuperclass();
+			if (supbnd != null) {
+				sups.add((Class)ensureFamixType(supbnd, /*name*/null, /*owner*/null, /*ctxt*/null)); //supbnd.isGenericType()));
+			}
+			else {
+				sups.add( ensureFamixClassObject(null));
+			}
+		}
+		for (ITypeBinding intbnd : bnd.getInterfaces()) {
+			sups.add( (Class)ensureFamixType(intbnd, /*name*/null, /*owner*/null, /*ctxt*/null)); // intbnd.isGenericType()));
+		}
+
+		// --------------- recover from name ?
+		for (Type candidate : this.getEntityByName(Type.class, name)) {
+			if ( checkAndMapClass(bnd, candidate) ) {
+				fmx = (Class) candidate;
+				break;
+			}
+		}
+		if (fmx == null) {
+			if (isGeneric) {
+				fmx = super.createFamixParameterizableClass(bnd, name, owner);
+			}
+			else {
+				fmx = super.createFamixClass(bnd, name, owner);
+			}
 		}
 		
-		return super.ensureFamixType(bnd, name, owner);
-	}
+		if (fmx!=null) {
+			// we just created it or it was not bound, so we make sure it has the right information in it
+			fmx.setIsInterface(bnd.isInterface());
+			Inheritance lastInheritance = null;
+			for (fr.inria.verveine.core.gen.famix.Class sup : sups) {
+				lastInheritance = createFamixInheritance(sup, fmx, lastInheritance);
+			}
+			setNamedEntityModifiers(fmx, bnd.getDeclaredModifiers());
+			if (fmx.getIsAbstract()) {
+				// don't know why there must be two different ways to mark abstract classes !!! But this is a pain!
+				fmx.addModifiers("abstract");
+			}
+		}
 	
-	public Collection<Type> ensureFamixTypesParameters(List<TypeParameter> types) {
-		Collection<Type> fmxTypes = new ArrayList<Type>();
-		Type fmxType = null;
-		
-		for (TypeParameter type : types) {
-			ITypeBinding bnd = type.resolveBinding();
-			if (bnd != null) {
-				fmxType = ensureFamixType(bnd, null, null);
-			} else {
-				fmxType = ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, type.toString());
+		return fmx;
+	}
+
+	public ParameterizedType ensureFamixParameterizedType(ITypeBinding bnd, String name, ParameterizableClass generic, ContainerEntity owner) {
+		ParameterizedType fmx = null;
+
+		// if Binding is null, we can only rely on provided parameters, so lets do it now and return
+		if (bnd == null) {
+			if (name == null) {
+				return null;
+			}
+			return super.createFamixParameterizedType(null, name, generic, owner);
+		}
+
+		// --------------- name
+		if (name == null) {
+			name = bnd.getName();
+		}
+
+		// --------------- owner
+		if (owner == null) {
+			IMethodBinding parentMtd = bnd.getDeclaringMethod();
+			if (parentMtd != null) {
+				owner = this.ensureFamixMethod(parentMtd, null, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, null);  // cast needed to desambiguate the call
+			}
+			else {
+				ITypeBinding parentClass = bnd.getDeclaringClass();
+				if (parentClass != null) {
+					owner = this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null); //parentClass.isGenericType());
+				}
+				else {
+					IPackageBinding parentPckg = bnd.getPackage();
+					if (parentPckg != null) {
+						owner = this.ensureFamixNamespace(parentPckg, null);
+					}
+					else {
+						owner = this.createFamixNamespaceDefault();
+					}
+				}
+			}
+		}
+
+		// --------------- recover from name ?
+		for (ParameterizedType candidate : getEntityByName(ParameterizedType.class, name) ) {
+			if ( checkAndMapType(bnd, candidate) ) {
+				fmx = candidate;
+				break;
 			}
-			fmxTypes.add(fmxType);
+		}
+
+		if (fmx == null) {
+			fmx = super.createFamixParameterizedType(bnd, name, generic, owner);
 		}
-		return fmxTypes;
+
+		return fmx;
 	}
-	
-	public PrimitiveType ensureFamixPrimitiveType(ITypeBinding bnd, String name) {
+
+	public PrimitiveType createFamixPrimitiveType(ITypeBinding bnd, String name) {
 		if (name == null) {
 			if (bnd == null) {
 				return null;
@@ -169,10 +365,10 @@
 				name = bnd.getName();
 			}
 		}
-		return super.ensureFamixPrimitiveType(bnd, name);
+		return super.createFamixPrimitiveType(bnd, name);
 	}
 
-	public fr.inria.verveine.core.gen.famix.Enum ensureFamixEnum(ITypeBinding bnd, String name, ContainerEntity owner) {
+	public fr.inria.verveine.core.gen.famix.Enum createFamixEnum(ITypeBinding bnd, String name, ContainerEntity owner) {
 		fr.inria.verveine.core.gen.famix.Enum fmx = null;
 
 		// if Binding is null, we can only rely on provided parameters, so lets do it now and return
@@ -180,7 +376,7 @@
 			if (name == null) {
 				return null;
 			}
-			return super.ensureFamixEnum(null, name, owner);
+			return super.createFamixEnum(null, name, owner);
 		}
 
 		// --------------- name
@@ -197,7 +393,7 @@
 			else {
 				ITypeBinding parentClass = bnd.getDeclaringClass();
 				if (parentClass != null) {
-					owner = this.ensureFamixClass(parentClass, null, null);
+					owner = this.createFamixClass(parentClass, null, null);
 				}
 				else {
 					IPackageBinding parentPckg = bnd.getPackage();
@@ -205,7 +401,7 @@
 						owner = this.ensureFamixNamespace(parentPckg, null);
 					}
 					else {
-						owner = this.ensureFamixNamespaceDefault();
+						owner = this.createFamixNamespaceDefault();
 					}
 				}
 			}
@@ -220,7 +416,7 @@
 		}
 
 		if (fmx == null) {
-			fmx = super.ensureFamixEnum(bnd, name, owner);
+			fmx = super.createFamixEnum(bnd, name, owner);
 		}
 		
 		if (fmx!=null) {
@@ -242,7 +438,7 @@
 			if (owner == null) {
 				return null;  // what would be the interest of creating an EnumValue without a declaring Enum type? 
 			}
-			return super.ensureFamixEnumValue(null, name, owner);
+			return super.createFamixEnumValue(null, name, owner);
 		}
 
 		// --------------- name
@@ -252,7 +448,7 @@
 
 		// --------------- owner
 		if (owner == null) {
-			owner = ensureFamixEnum(bnd.getDeclaringClass(), null, null);
+			owner = createFamixEnum(bnd.getDeclaringClass(), null, null);
 		}
 		
 		// --------------- recover from name ?
@@ -263,7 +459,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = super.ensureFamixEnumValue(bnd, name, owner);
+			fmx = super.createFamixEnumValue(bnd, name, owner);
 		}
 		
 		if (fmx!=null) {
@@ -282,7 +478,7 @@
 			if (name == null) {
 				return null;
 			}
-			return super.ensureFamixAnnotationType(null, name, owner);
+			return super.createFamixAnnotationType(null, name, owner);
 		}
 
 		// --------------- name
@@ -297,7 +493,7 @@
 				owner = this.ensureFamixNamespace(parentPckg, null);
 			}
 			else {
-				owner = this.ensureFamixNamespaceDefault();
+				owner = this.createFamixNamespaceDefault();
 			}
 		}
 
@@ -310,7 +506,7 @@
 		}
 
 		if (fmx == null) {
-			fmx = super.ensureFamixAnnotationType(bnd, name, owner);
+			fmx = super.createFamixAnnotationType(bnd, name, owner);
 		}
 		
 		if (fmx!=null) {
@@ -329,7 +525,7 @@
 			if (name == null) {
 				return null;
 			}
-			return super.ensureFamixAnnotationTypeAttribute(null, name, owner);
+			return super.createFamixAnnotationTypeAttribute(null, name, owner);
 		}
 
 		// --------------- name
@@ -354,7 +550,7 @@
 		}
 
 		if (fmx == null) {
-			fmx = super.ensureFamixAnnotationTypeAttribute(bnd, name, owner);
+			fmx = super.createFamixAnnotationTypeAttribute(bnd, name, owner);
 		}
 		
 		if (fmx!=null) {
@@ -378,14 +574,8 @@
 		}
 	}
 
-	/**
-	 * Returns a Famix Class associated with the ITypeBinding.
-	 * The Entity is created if it does not exist.<br>
-	 * Params: see {@link Dictionary#ensureFamixClass(Object, String, ContainerEntity)}.
-	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
-	 */
-	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(ITypeBinding bnd, String name, ContainerEntity owner) {
-		fr.inria.verveine.core.gen.famix.Class fmx = null;
+	public ParameterType createFamixParameterType(ITypeBinding bnd,	String name, ParameterizableClass owner) {
+		ParameterType fmx = null;
 
 		// if Binding is null, we can only rely on provided parameters, so lets do it now and return
 		if (bnd == null) {
@@ -393,115 +583,41 @@
 				return null;
 			}
 			if (owner == null) {
-				owner = ensureFamixNamespaceDefault();
+				return super.createFamixParameterType(null, name, null);
 			}
-			return super.ensureFamixClass(null, name, owner);
-		}
-
-		// --------------- some special cases
-		while (bnd.isArray()) {
-			bnd = bnd.getComponentType();
-		}
-
-		if (bnd.isPrimitive()) {
-			// should have called ensureFamixPrimitiveType(bnd). Why are we here ?
-			return null;
+			
+			return super.createFamixParameterType(null, name, owner);
 		}
 
-		fmx = (fr.inria.verveine.core.gen.famix.Class)getEntityByKey(bnd);	// to avoid useless computations if we can
+		fmx = (ParameterType)getEntityByKey(bnd);	// to avoid useless computations if we can
 		if (fmx != null) {
 			return fmx;
 		}
 
 		// --------------- name
 		if (name == null) {
-			if (! bnd.isAnonymous()) {
-				name = bnd.getName();
-			}
-			else { // anonymous class
-				if (bnd.getSuperclass() != null) {
-					name = bnd.getSuperclass().getName();
-				}
-				if ( (name == null) || name.equals(OBJECT_NAME)) {
-					ITypeBinding[] intfcs = bnd.getInterfaces();
-					if ( (intfcs != null) && (intfcs.length > 0) ) {
-						name = bnd.getInterfaces()[0].getName();
-					}
-					else {
-						name = "???";
-					}
-				}
-				name = "anonymous(" + name + ")";
-			}
-		}
-		
-		if (name.equals(OBJECT_NAME)) {
-			return ensureFamixClassObject(bnd);
+			name = bnd.getName();
 		}
 
 		// --------------- owner
 		if (owner == null) {
-			IMethodBinding parentMtd = bnd.getDeclaringMethod();
-			if (parentMtd != null) {
-				owner = this.ensureFamixMethod(parentMtd, null, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, null);  // cast needed to desambiguate the call
-			}
-			else {
-				ITypeBinding parentClass = bnd.getDeclaringClass();
-				if (parentClass != null) {
-					owner = this.ensureFamixClass(parentClass, null, null);
-				}
-				else {
-					IPackageBinding parentPckg = bnd.getPackage();
-					if (parentPckg != null) {
-						owner = this.ensureFamixNamespace(parentPckg, null);
-					}
-					else {
-						owner = this.ensureFamixNamespaceDefault();
-					}
-				}
-			}
-		}
-
-		// --------------- superclasses (including interfaces)
-		Collection<fr.inria.verveine.core.gen.famix.Class> sups = new LinkedList<fr.inria.verveine.core.gen.famix.Class>();
-		if (! bnd.isInterface()) {
-			ITypeBinding supbnd = bnd.getSuperclass();
-			if (supbnd != null) {
-				sups.add(this.ensureFamixClass(supbnd, null, null));
-			}
-			else {
-				sups.add( ensureFamixClassObject(null));
+			ITypeBinding parentClass = bnd.getDeclaringClass();
+			if (parentClass != null) {
+				owner = (ParameterizableClass) this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null);  // isGeneric=true
 			}
 		}
-		for (ITypeBinding intbnd : bnd.getInterfaces()) {
-			sups.add( ensureFamixClass(intbnd, null, null));
-		}
 
 		// --------------- recover from name ?
 		for (Type candidate : this.getEntityByName(Type.class, name)) {
-			if ( checkAndMapClass(bnd, candidate) ) {
-				fmx = (Class) candidate;
+			if ( checkAndMapType(bnd, candidate) ) {
+				fmx = (ParameterType) candidate;
 				break;
 			}
 		}
 		if (fmx == null) {
-			fmx = super.ensureFamixClass(bnd, name, owner);
+			fmx = super.createFamixParameterType(bnd, name, owner);
 		}
-		
-		if (fmx!=null) {
-			// we just created it or it was not bound, so we make sure it has the right information in it
-			fmx.setIsInterface(bnd.isInterface());
-			Inheritance lastInheritance = null;
-			for (fr.inria.verveine.core.gen.famix.Class sup : sups) {
-				lastInheritance = ensureFamixInheritance(sup, fmx, lastInheritance);
-			}
-			setNamedEntityModifiers(fmx, bnd.getDeclaredModifiers());
-			if (fmx.getIsAbstract()) {
-				// don't know why there must be two different ways to mark abstract classes !!! But this is a pain!
-				fmx.addModifiers("abstract");
-			}
-		}
-	
+
 		return fmx;
 	}
 
@@ -696,8 +812,18 @@
 			}
 
 			// ... and the signature should include the return type
-			if (! checkAndMapType(bnd.getReturnType(), ((Method) candidate).getDeclaredType()) ) {
-				return false;
+			if (bnd.isConstructor()) {
+				if ( ((Method) candidate).getDeclaredType() != null) {
+					return false;
+				}
+			}
+			else {
+				if ( ((Method) candidate).getDeclaredType() == null) {
+					return false;
+				}
+				if (! checkAndMapType(bnd.getReturnType(), ((Method) candidate).getDeclaredType()) ) {
+					return false;
+				}
 			}
 		}
 
@@ -766,7 +892,7 @@
 	/**
 	 * Returns a Famix Method associated with the IMethodBinding. The Entity is created if it does not exist.
 	 * The Entity is created if it does not exist.
-	 * Params: see {@link Dictionary#ensureFamixMethod(Object, String, String, Type, Type)}.
+	 * Params: see {@link Dictionary#createFamixMethod(Object, String, String, Type, Type)}.
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public Method ensureFamixMethod(IMethodBinding bnd, String name, Collection<org.eclipse.jdt.core.dom.Type> paramTypes, Type ret, fr.inria.verveine.core.gen.famix.Class owner) {
@@ -805,9 +931,9 @@
 				sig = name + sig;
 			}
 			if (owner == null) {
-				owner= ensureFamixClassStubOwner();
+				owner= createFamixClassStubOwner();
 			}
-			return super.ensureFamixMethod(null, name, sig, ret, owner);
+			return super.createFamixMethod(null, name, sig, ret, owner);
 		}
 
 		// --------------- name
@@ -835,13 +961,16 @@
 
 		// --------------- return type
 		if ( (ret == null) && (! bnd.isConstructor()) ) {
-			ret = this.ensureFamixType(bnd.getReturnType(), null, null);
+			ret = this.ensureFamixType(bnd.getReturnType(), null, null, owner);
 		}
 		// else leave it to null ...
 
 		// --------------- owner
 		if (owner == null) {
-			owner = ensureFamixClass(bnd.getDeclaringClass(), null, null);
+			ITypeBinding classBnd = bnd.getDeclaringClass();
+			if (classBnd != null) {
+				owner = (Class) ensureFamixType(classBnd, /*name*/null, /*owner*/null, /*ctxt*/null);  // classBnd.isGenericType());
+			}
 		}
 		
 		// --------------- recover from name ?
@@ -852,7 +981,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = ensureFamixMethod(bnd, name, sig, ret, owner);
+			fmx = createFamixMethod(bnd, name, sig, ret, owner);
 		}
 		
 		if (fmx!=null) {
@@ -866,6 +995,10 @@
 	}
 	
 	public String findTypeName(org.eclipse.jdt.core.dom.Type t) {
+		if (t == null) {
+			return null;
+		}
+		
 		if (t.isPrimitiveType()) {
 			return t.toString();
 		}
@@ -879,17 +1012,22 @@
 			return findTypeName( ((ArrayType)t).getElementType() );
 		}
 		else if (t.isParameterizedType()) {
-			return "?";  // TODO
+			return findTypeName(((org.eclipse.jdt.core.dom.ParameterizedType)t).getType());
 		}
 		else { // it is a WildCardType
-			return "?"; // TODO
+			if ( ((org.eclipse.jdt.core.dom.WildcardType)t).isUpperBound() ) {
+				return findTypeName( ((org.eclipse.jdt.core.dom.WildcardType)t).getBound() );
+			}
+			else {
+				return OBJECT_NAME;
+			}
 		}
 	}
 
 	/**
 	 * Returns a Famix Attribute associated with the IVariableBinding.
 	 * The Entity is created if it does not exist.<br>
-	 * Params: see {@link Dictionary#ensureFamixAttribute(Object, String, Type, Type)}.
+	 * Params: see {@link Dictionary#createFamixAttribute(Object, String, Type, Type)}.
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public Attribute ensureFamixAttribute(IVariableBinding bnd, String name, Type type, Type owner) {
@@ -903,7 +1041,7 @@
 			if (owner == null) {
 				return null;  // what would be the interest of creating an attribute for which we ignore the declaring class? 
 			}
-			return super.ensureFamixAttribute(null, name, type, owner);
+			return super.createFamixAttribute(null, name, type, owner);
 		}
 
 		// --------------- name
@@ -913,12 +1051,15 @@
 
 		// --------------- return type
 		if (type == null) {
-			type = this.ensureFamixType(bnd.getType(), null, null);
+			type = this.ensureFamixType(bnd.getType(), null, null, owner);
 		}
 
 		// --------------- owner
 		if (owner == null) {
-			owner = ensureFamixClass(bnd.getDeclaringClass(), null, null);
+			ITypeBinding classBnd = bnd.getDeclaringClass();
+			if (classBnd != null) {
+				owner = ensureFamixType(classBnd, /*name*/null, /*owner*/null, /*ctxt*/null);   // classBnd.isGenericType());
+			}
 		}
 		
 		// --------------- recover from name ?
@@ -929,7 +1070,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = super.ensureFamixAttribute(bnd, name, type, owner);
+			fmx = super.createFamixAttribute(bnd, name, type, owner);
 		}
 		
 		if (fmx!=null) {
@@ -962,7 +1103,7 @@
 	/**
 	 * Returns a Famix Parameter associated with the IVariableBinding.
 	 * The Entity is created if it does not exist.<br>
-	 * Params: see {@link Dictionary#ensureFamixParameter(Object, String, Type, fr.inria.verveine.core.gen.famix.BehaviouralEntity)}.
+	 * Params: see {@link Dictionary#createFamixParameter(Object, String, Type, fr.inria.verveine.core.gen.famix.BehaviouralEntity)}.
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public Parameter ensureFamixParameter(IVariableBinding bnd, String name, Type typ, Method owner) {
@@ -975,7 +1116,7 @@
 			if (owner == null) {
 				owner = ensureFamixStubMethod("<"+name+"_owner>");
 			}
-			return super.ensureFamixParameter(null, name, typ, owner);
+			return super.createFamixParameter(null, name, typ, owner);
 		}
 
 		// --------------- name
@@ -985,7 +1126,7 @@
 
 		// --------------- return type
 		if (typ == null) {
-			typ = this.ensureFamixType(bnd.getType(), null, null);
+			typ = this.ensureFamixType(bnd.getType(), null, null, owner.getParentType());  // context of the parameter def = the class definition
 		}
 
 		// --------------- owner
@@ -1001,7 +1142,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = super.ensureFamixParameter(bnd, name, typ, owner);
+			fmx = super.createFamixParameter(bnd, name, typ, owner);
 		}
 		
 		if (fmx != null) {
@@ -1016,7 +1157,7 @@
 	/**
 	 * Returns a Famix LocalVariable associated with the IVariableBinding.
 	 * The Entity is created if it does not exist.<br>
-	 * Params: see {@link Dictionary#ensureFamixLocalVariable(Object, String, Type, fr.inria.verveine.core.gen.famix.BehaviouralEntity)}
+	 * Params: see {@link Dictionary#createFamixLocalVariable(Object, String, Type, fr.inria.verveine.core.gen.famix.BehaviouralEntity)}
 	 * @return the Famix Entity found or created. May return null if <b>bnd</b> and <b>name</b> are null, or <b>bnd</b> and <b>owner</b> are null, or in case of a Famix error
 	 */
 	public LocalVariable ensureFamixLocalVariable(IVariableBinding bnd, String name, Type typ, Method owner) {
@@ -1029,7 +1170,7 @@
 			if (owner == null) {
 				return null;  // what would be the interest of a local variable for which we ignore the declaring method?
 			}
-			return super.ensureFamixLocalVariable(null, name, typ, owner);
+			return super.createFamixLocalVariable(null, name, typ, owner);
 		}
 
 		// --------------- name
@@ -1039,7 +1180,7 @@
 
 		// --------------- return type
 		if (typ == null) {
-			typ = this.ensureFamixType(bnd.getType(), null, null);
+			typ = this.ensureFamixType(bnd.getType(), null, null, owner);
 		}
 
 		// --------------- owner
@@ -1055,7 +1196,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = super.ensureFamixLocalVariable(bnd, name, typ, owner);
+			fmx = super.createFamixLocalVariable(bnd, name, typ, owner);
 		}
 		
 		if (fmx != null) {
@@ -1132,7 +1273,7 @@
 	 * @return the Famix Method
 	 */
 	public Method ensureFamixStubMethod(String name) {
-		return ensureFamixMethod(null, name, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, ensureFamixClassStubOwner());  // cast needed to desambiguate the call
+		return ensureFamixMethod(null, name, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, createFamixClassStubOwner());  // cast needed to desambiguate the call
 	}
 
 	/**
@@ -1153,7 +1294,7 @@
 	 * @return a Famix class for "Object"
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClassObject(ITypeBinding bnd) {
-		fr.inria.verveine.core.gen.famix.Class fmx =  ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, bnd, OBJECT_NAME);
+		fr.inria.verveine.core.gen.famix.Class fmx =  createFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, bnd, OBJECT_NAME);
 		
 		if (fmx != null) {
 			fmx.setContainer( ensureFamixNamespaceJavaLang(null));
@@ -1174,9 +1315,9 @@
 	 * Creates or recovers the Famix Class that will own all stub methods (for which the real owner is unknown)
 	 * @return a Famix class
 	 */
-	public fr.inria.verveine.core.gen.famix.Class ensureFamixClassStubOwner() {
-		fr.inria.verveine.core.gen.famix.Class fmx = super.ensureFamixClassStubOwner();
-		ensureFamixInheritance(ensureFamixClassObject(null), fmx, /*prev*/null);
+	public fr.inria.verveine.core.gen.famix.Class createFamixClassStubOwner() {
+		fr.inria.verveine.core.gen.famix.Class fmx = super.createFamixClassStubOwner();
+		createFamixInheritance(ensureFamixClassObject(null), fmx, /*prev*/null);
 
 		return fmx;
 	}
@@ -1188,10 +1329,10 @@
 	 * @return a Famix class
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClassArray() {
-		fr.inria.verveine.core.gen.famix.Class fmx = ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, ARRAYS_NAME);
+		fr.inria.verveine.core.gen.famix.Class fmx = createFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, ARRAYS_NAME);
 		if (fmx != null) {
-			ensureFamixInheritance(ensureFamixClassObject(null), fmx, /*prev*/null);
-			fmx.setContainer( ensureFamixNamespaceDefault());
+			createFamixInheritance(ensureFamixClassObject(null), fmx, /*prev*/null);
+			fmx.setContainer( createFamixNamespaceDefault());
 			
 			fmx.setIsAbstract(Boolean.FALSE);
 			fmx.setIsFinal(Boolean.FALSE);
@@ -1218,6 +1359,4 @@
 		return ret;
 	}
 
-
-
 }
\ No newline at end of file
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineJParser.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineJParser.java	(revision 90)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineJParser.java	(revision 91)
@@ -39,9 +39,9 @@
 	@Override
 	public boolean compile(String[] argv) {
 		boolean ret;
-		/*if (this.linkToExisting()) {
+		if (this.linkToExisting()) {
 			this.expandNamespacesNames();
-		}*/
+		}
 
 		setInitialArgs(argv);
 		ret = super.compile(argv);
Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 51)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 52)
@@ -23,6 +23,7 @@
 import fr.inria.verveine.core.gen.famix.Method;
 import fr.inria.verveine.core.gen.famix.NamedEntity;
 import fr.inria.verveine.core.gen.famix.Namespace;
+import fr.inria.verveine.core.gen.famix.Parameter;
 import fr.inria.verveine.core.gen.famix.PrimitiveType;
 import fr.inria.verveine.core.gen.famix.Reference;
 import fr.inria.verveine.core.gen.famix.SourcedEntity;
@@ -356,6 +357,23 @@
 		return fmx;
 	}
 	
+	/**
+	 * Creates and returns a FAMIX Parameter and associates it with an BehaviouralEntity
+	 * @param identifier -- the name of the parameter
+	 * @param owner -- the entity concerned by this parameter
+	 * @param type -- the type of the parameter
+	 * @return the FAMIX parameter
+	 */
+	public Parameter createFamixParameter(String identifier, BehaviouralEntity owner, String type) {
+		Parameter fmx = new Parameter();
+		fmx.setName(identifier);
+		fmx.setParentBehaviouralEntity(owner);
+		fmx.setDeclaredType(ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, type));
+		this.famixRepo.add(fmx);
+		
+		return fmx;
+	}
+	
 	///// ensure Famix Relationships /////
 
 	/**
Index: verveine.core/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/src/test/fr/inria/verveine/core/TestVerveineUtils.java
===================================================================
--- verveine.core/src/test/fr/inria/verveine/core/TestVerveineUtils.java	(revision 23)
+++ verveine.core/src/test/fr/inria/verveine/core/TestVerveineUtils.java	(revision 24)
@@ -17,25 +17,16 @@
 	 * Returns a Collection of all FAMIXEntities in repository of the given fmxClass.
 	 * Same method as listAll(Class<T extends Entity>) defined in VerveineParser
 	 */
-	@SuppressWarnings("unchecked")
 	public static <T extends Entity> Collection<T> selectElementsOfType(Repository repository, Class<T> fmxClass) {
-		Collection<T> selection = new Vector<T>();
-		for (Object obj : repository.getElements()) {
-			if (fmxClass.isInstance(obj)) {
-				selection.add((T) obj);
-			}
-		}
-		return selection;
+		return( repository.all(fmxClass));
 	}
 
 	/** Returns the first FAMIXEntities in repository of the given fmxClass and with the given name
 	 */
-	@SuppressWarnings("unchecked")
 	public static <T extends NamedEntity> T detectElement(Repository repository, Class<T> fmxClass, String name) {
-		for (Object obj : repository.getElements()) {
-			if (fmxClass.isInstance(obj)
-				&& ((T) obj).getName().equals(name) ) {
-				return (T) obj;
+		for (T ent : selectElementsOfType(repository, fmxClass)) {
+			if (ent.getName().equals(name) ) {
+				return ent;
 			}
 		}
 		return null;
@@ -43,13 +34,11 @@
 
 	/** Returns a Collection of FAMIXEntities in repository of the given fmxClass and with the given name
 	 */
-	@SuppressWarnings("unchecked")
 	public static <T extends NamedEntity> Collection<T> listElements(Repository repository, Class<T> fmxClass, String name) {
 		Collection<T> selection = new Vector<T>();
-		for (Object obj : repository.getElements()) {
-			if (fmxClass.isInstance(obj)
-				&& ((T) obj).getName().equals(name) ) {
-				selection.add((T) obj);
+		for (T ent : selectElementsOfType(repository, fmxClass)) {
+			if ( ent.getName().equals(name) ) {
+				selection.add(ent);
 			}
 		}
 		return selection;
Index: verveine.core/src/fr/inria/verveine/core/VerveineParser.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/VerveineParser.java	(revision 23)
+++ verveine.core/src/fr/inria/verveine/core/VerveineParser.java	(revision 24)
@@ -1,5 +1,6 @@
 package fr.inria.verveine.core;
 
+import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -21,19 +22,35 @@
 	private Repository famixRepo;
 
 	public VerveineParser() {
-		super(new PrintWriter(System.out), new PrintWriter(System.err), false/*systemExitWhenFinished*/, null/*customDefaultOptions*/, null/*compilationProgress*/);
+		this(new PrintWriter(System.out),
+				new PrintWriter(System.err),
+				false/*systemExitWhenFinished*/,
+				null/*customDefaultOptions*/,
+				null/*compilationProgress*/);
+		
 	}
 
-	@Override
-	public boolean compile(String[] argv) {
-
+	public VerveineParser(PrintWriter outWriter, PrintWriter errWriter,	boolean systemExitWhenFinished, @SuppressWarnings("rawtypes")Map customDefaultOptions, CompilationProgress compilationProgress) {
+		super(outWriter,
+				errWriter,
+				systemExitWhenFinished,
+				customDefaultOptions,
+				compilationProgress);
+		
 		setFamixRepo(new Repository(FAMIXModel.metamodel()));
-
-		boolean ret = super.compile(argv);
-
-		return ret;
 	}
 
+	public boolean linkToExisting() {
+		File existingMSE = new File(OUTPUT_FILE);
+		if (! existingMSE.exists()) {
+			return false;
+		}
+		else {
+			this.getFamixRepo().importMSEFile(OUTPUT_FILE);
+			return true;
+		}
+	}
+	
 	/**
 	 * Outputting repository to a file
 	 */
@@ -46,10 +63,6 @@
 		}
 	}
 
-	public VerveineParser(PrintWriter outWriter, PrintWriter errWriter,	boolean systemExitWhenFinished, @SuppressWarnings("rawtypes")Map customDefaultOptions, CompilationProgress compilationProgress) {
-		super(outWriter, errWriter, systemExitWhenFinished,	customDefaultOptions, compilationProgress);
-	}
-
 	/**
 	 * Returns a Collection of all FAMIXEntities in the repository of the given fmxClass
 	 */
Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 23)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 24)
@@ -80,8 +80,84 @@
 		this.mapBind = new Hashtable<B,NamedEntity>();
 		this.mapName = new Hashtable<String,Collection<NamedEntity>>();
 		this.mapImpVar = new Hashtable<fr.inria.verveine.core.gen.famix.Class,ImplicitVars>();
+		
+		if (! this.famixRepo.isEmpty()) {
+			recoverExistingRepository();
+		}
 	}
 
+	protected void recoverExistingRepository() {
+		for (Object obj : famixRepo.getElements()) {
+			if (obj instanceof NamedEntity) {
+				mapEntityToName( ((NamedEntity)obj).getName(), (NamedEntity) obj);
+			}
+		}
+		
+		for (Access acc : famixRepo.all(Access.class)) {
+			try {
+				if (acc.getIsWrite()) { }
+			}
+			catch (NullPointerException e) {
+				acc.setIsWrite(Boolean.FALSE);
+			}
+		}
+
+		for (fr.inria.verveine.core.gen.famix.Class clazz : famixRepo.all(fr.inria.verveine.core.gen.famix.Class.class)) {
+			try { if (clazz.getIsAbstract()) { } }
+			catch (NullPointerException e) { clazz.setIsAbstract(Boolean.FALSE); }
+			try { if (clazz.getIsStub()) { } }
+			catch (NullPointerException e) { clazz.setIsStub(Boolean.FALSE); }
+			try { if (clazz.getIsPublic()) { } }
+			catch (NullPointerException e) { clazz.setIsPublic(Boolean.FALSE); }
+			try { if (clazz.getIsPrivate()) { } }
+			catch (NullPointerException e) { clazz.setIsPrivate(Boolean.FALSE); }
+			try { if (clazz.getIsProtected()) { } }
+			catch (NullPointerException e) { clazz.setIsProtected(Boolean.FALSE); }
+			try { if (clazz.getIsFinal()) { } }
+			catch (NullPointerException e) { clazz.setIsFinal(Boolean.FALSE); }
+		}
+
+		for (Method meth : famixRepo.all(Method.class)) {
+			try { if (meth.getIsAbstract()) { } }
+			catch (NullPointerException e) { meth.setIsAbstract(Boolean.FALSE); }
+			try { if (meth.getIsStub()) { } }
+			catch (NullPointerException e) { meth.setIsStub(Boolean.FALSE); }
+			try { if (meth.getIsPublic()) { } }
+			catch (NullPointerException e) { meth.setIsPublic(Boolean.FALSE); }
+			try { if (meth.getIsPrivate()) { } }
+			catch (NullPointerException e) { meth.setIsPrivate(Boolean.FALSE); }
+			try { if (meth.getIsProtected()) { } }
+			catch (NullPointerException e) { meth.setIsProtected(Boolean.FALSE); }
+			try { if (meth.getIsFinal()) { } }
+			catch (NullPointerException e) { meth.setIsFinal(Boolean.FALSE); }
+		}
+
+		for (Attribute att : famixRepo.all(Attribute.class)) {
+			try { if (att.getIsAbstract()) { } }
+			catch (NullPointerException e) { att.setIsAbstract(Boolean.FALSE); }
+			try { if (att.getIsStub()) { } }
+			catch (NullPointerException e) { att.setIsStub(Boolean.FALSE); }
+			try { if (att.getIsPublic()) { } }
+			catch (NullPointerException e) { att.setIsPublic(Boolean.FALSE); }
+			try { if (att.getIsPrivate()) { } }
+			catch (NullPointerException e) { att.setIsPrivate(Boolean.FALSE); }
+			try { if (att.getIsProtected()) { } }
+			catch (NullPointerException e) { att.setIsProtected(Boolean.FALSE); }
+			try { if (att.getIsFinal()) { } }
+			catch (NullPointerException e) { att.setIsFinal(Boolean.FALSE); }
+		}
+
+	}
+	
+	protected void mapEntityToName(String name, NamedEntity ent) {
+		Collection<NamedEntity> l_ent = mapName.get(name);
+		if (l_ent == null) {
+			l_ent = new LinkedList<NamedEntity>();
+		}
+		l_ent.add(ent);
+		mapName.put(name, l_ent);
+	}
+	
 	/**
 	 * Returns all the Famix Entity with the given name and class 
 	 * @param fmxClass -- the subtype of Famix Entity we are looking for
@@ -142,14 +218,8 @@
 			fmx.setName(name);
 			fmx.setIsStub(Boolean.TRUE);
 
-			// put new entity in mappers
-			Collection<NamedEntity> l_ent = mapName.get(name);
-			if (l_ent == null) {
-				l_ent = new LinkedList<NamedEntity>();
-			}
-			l_ent.add(fmx);
-			mapName.put(name, l_ent);
-
+			mapEntityToName(name, fmx);
+			
 			// put new entity in Famix repository
 			this.famixRepo.add(fmx);
 		}
@@ -357,16 +427,20 @@
 		return invok;
 	}
 	
-	public Access ensureFamixAccess(BehaviouralEntity accessor, StructuralEntity var) {
+	public Access ensureFamixAccess(BehaviouralEntity accessor, StructuralEntity var, boolean isWrite) {
 		/* We keep multiple accesses from one method to a field */
 		Access acc = new Access();
 		acc.setAccessor(accessor);
 		acc.setVariable(var);
-		acc.setIsWrite(false);  // must be some default and this one seems safer than the opposite
+		acc.setIsWrite(new Boolean(isWrite));
 		famixRepoAdd(acc);
 		
 		return acc;
 	}
+	
+	public Access ensureFamixAccess(BehaviouralEntity accessor, StructuralEntity var) {
+		return ensureFamixAccess(accessor, var, false);  // must be some default and this one seems safer than the opposite
+	}
 
 	/**
 	 * Returns a Famix DeclaredException between a method and an Exception that it declares to throw
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/Access.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/Access.java	(revision 23)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/Access.java	(revision 24)
@@ -60,7 +60,6 @@
     @FameProperty(name = "isRead", derived = true)
     public Boolean getIsRead() {
         // TODO: this is a derived property, implement this method manually.
-        //throw new UnsupportedOperationException("Access.getIsRead() Not yet implemented!");
     	return ! getIsWrite(); 
     }
 
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/Class.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/Class.java	(revision 23)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/Class.java	(revision 24)
@@ -11,11 +11,11 @@
 public class Class extends Type {
 
 
-
+	// Apparently, we should not use getIsAbstract() (from NamedEntity) here ?!?!?
     @FameProperty(name = "isAbstract", derived = true)
     public Boolean getIsAbstract() {
         // TODO: this is a derived property, implement this method manually.
-        return super.getIsAbstract() || this.getModifiers().contains("abstract");
+        return this.getModifiers().contains("abstract");
     }
     
     private Boolean isInterface;
