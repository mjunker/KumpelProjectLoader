Index: verveine.extractor.java/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/test_src/ad_hoc/Dictionary.java
===================================================================
--- verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 119)
+++ verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 120)
@@ -90,17 +90,6 @@
 		if (ImplicitVariable.class.isAssignableFrom(fmxClass)) {
 			return null;
 		}
-		
-		if (bnd != null) {
-			fmx = (T) getEntityByBinding(bnd);
-		}
-		else {
-			// Unfortunately different entities with the same name and same type may exist
-			// e.g. 2 parameters of 2 different methods but having the same name
-			// so we must recreate a new entity each time
-
-			//fmxEnt = getEntityByName(fmxClass, name);
-		}
 
 		if (fmx != null) {
 			return fmx;
Index: verveine.extractor.java/test_src/ad_hoc/Card.java
===================================================================
--- verveine.extractor.java/test_src/ad_hoc/Card.java	(revision 119)
+++ verveine.extractor.java/test_src/ad_hoc/Card.java	(revision 120)
@@ -3,8 +3,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES };
-
 public class Card {
 
 	public enum Rank { DEUCE, THREE, FOUR, FIVE, SIX,
@@ -19,7 +17,14 @@
 
     public Rank rank() { return rank; }
     public Suit suit() { return suit; }
-    public String toString() { return rank + " of " + suit; }
+    public String toString() {
+    	if (suit == Suit.CLUBS) {
+    		return rank + " of " + suit;
+    	}
+    	else {
+    		return rank + " of clubs";
+    	}
+    }
 
     private static final List<Card> protoDeck = new ArrayList<Card>();
 /*
@@ -39,3 +44,5 @@
     }
 
 }
+
+public enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES };
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 119)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 120)
@@ -7,7 +7,6 @@
 import static org.junit.Assert.*;
 
 import java.io.File;
-import java.io.FileWriter;
 import java.util.Collection;
 
 import org.junit.Before;
@@ -220,106 +219,60 @@
 	
 	@Test
 	public void testMethodParameterArgumentTypes() {
-		Method fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "getEntityByName");
-		assertNotNull(fmxMethod);
-		assertEquals(2, fmxMethod.getParameters().size());
-		for (Parameter fmxParameter : fmxMethod.getParameters()) {
-			assertTrue(fmxParameter.getName().equals("fmxClass") || fmxParameter.getName().equals("name"));
-			if (fmxParameter.getName().equals("fmxClass")) {
-				//assertEquals(1, fmxParameter.getDeclaredArgumentTypes().size());
-				//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "T"), fmxParameter.getDeclaredArgumentTypes().iterator().next());
-			}
-			if (fmxParameter.getName().equals("name")) {
-				//assertNull(fmxParameter.getDeclaredArgumentTypes());
-			}
-		}
-		
-		fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "createFamixEntity");
-		assertNotNull(fmxMethod);
-		assertEquals(2, fmxMethod.getParameters().size());
-		for (Parameter fmxParameter : fmxMethod.getParameters()) {
-			assertTrue(fmxParameter.getName().equals("fmxClass") || fmxParameter.getName().equals("name"));
-			if (fmxParameter.getName().equals("fmxClass")) {
-				//assertEquals(1, fmxParameter.getDeclaredArgumentTypes().size());
-				//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "T"), fmxParameter.getDeclaredArgumentTypes().iterator().next());
-			}
-			if (fmxParameter.getName().equals("name")) {
-				///assertNull(fmxParameter.getDeclaredArgumentTypes());
-			}
-		}
-		
-		fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "ensureFamixEntity");
-		assertNotNull(fmxMethod);
-		assertEquals(3, fmxMethod.getParameters().size());
-		for (Parameter fmxParameter : fmxMethod.getParameters()) {
-			assertTrue(fmxParameter.getName().equals("fmxClass") || fmxParameter.getName().equals("bnd") || fmxParameter.getName().equals("name"));
-			if (fmxParameter.getName().equals("fmxClass")) {
-				//assertEquals(1, fmxParameter.getDeclaredArgumentTypes().size());
-				//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "T"), fmxParameter.getDeclaredArgumentTypes().iterator().next());
-			}
-			if (fmxParameter.getName().equals("bnd")) {
-				//assertNull(fmxParameter.getDeclaredArgumentTypes());
-			}
-			if (fmxParameter.getName().equals("name")) {
-				//assertNull(fmxParameter.getDeclaredArgumentTypes());
+		Method meth = TestVerveineUtils.detectElement(repo, Method.class, "ensureFamixEntity");
+		if (meth.getParameters().size() == 3) {
+			for (Parameter param : meth.getParameters()) {
+				if (param.getName().equals("fmxClass")) {
+					Type classT = param.getDeclaredType();
+					assertNotNull(classT);
+					assertEquals("Class", classT.getName());
+					assertEquals(ParameterizedType.class, classT.getClass());
+					assertEquals(1, ((ParameterizedType)classT).getArguments().size());
+					Type t = ((ParameterizedType)classT).getArguments().iterator().next();
+					assertEquals("T", t.getName());
+					assertSame(meth, t.getBelongsTo());
+				}
+				else if (param.getName().equals("bnd")) {
+					Type b = param.getDeclaredType();
+					assertNotNull(b);
+					assertEquals("B", b.getName());
+					assertSame(meth.getBelongsTo(), b.getBelongsTo());  // b defined in Dictionary class just as the method
+				}
+				else {
+					assertEquals("name", param.getName());
+				}
 			}
 		}
-		
-		fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "ensureFamixUniqEntity");
-		assertNotNull(fmxMethod);
-		assertEquals(3, fmxMethod.getParameters().size());
-		for (Parameter fmxParameter : fmxMethod.getParameters()) {
-			assertTrue(fmxParameter.getName().equals("fmxClass") || fmxParameter.getName().equals("bnd") || fmxParameter.getName().equals("name"));
-			if (fmxParameter.getName().equals("fmxClass")) {
-				//assertEquals(1, fmxParameter.getDeclaredArgumentTypes().size());
-				//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "T"), fmxParameter.getDeclaredArgumentTypes().iterator().next());
-			}
-			if (fmxParameter.getName().equals("bnd")) {
-				//assertNull(fmxParameter.getDeclaredArgumentTypes());
-			}
-			if (fmxParameter.getName().equals("name")) {
-				//assertNull(fmxParameter.getDeclaredArgumentTypes());
-			}
+		else {
+			assertEquals(2, meth.getParameters().size());
 		}
 	}
 	
 	@Test
 	public void testMethodLocalVariableArgumentTypes() {
-		Method fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "mapEntityToName");
-		assertNotNull(fmxMethod);
-		assertEquals(1, fmxMethod.getLocalVariables().size());
-		for (LocalVariable fmxLocalVariable : fmxMethod.getLocalVariables()) {
-			assertTrue(fmxLocalVariable.getName().equals("l_ent"));
-			//assertEquals(1, fmxLocalVariable.getDeclaredArgumentTypes().size());
-			//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "NamedEntity"), fmxLocalVariable.getDeclaredArgumentTypes().iterator().next());
-		}
-		
-		fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "getEntityByName");
-		assertNotNull(fmxMethod);
-		assertEquals(2, fmxMethod.getLocalVariables().size());
-		for (LocalVariable fmxLocalVariable : fmxMethod.getLocalVariables()) {
-			assertTrue(fmxLocalVariable.getName().equals("ret") || fmxLocalVariable.getName().equals("l_name"));
-			if (fmxLocalVariable.getName().equals("ret")) {
-				//assertEquals(1, fmxLocalVariable.getDeclaredArgumentTypes().size());
-				//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "T"), fmxLocalVariable.getDeclaredArgumentTypes().iterator().next());
-			}
-			if (fmxLocalVariable.getName().equals("l_name")) {
-				//assertEquals(1, fmxLocalVariable.getDeclaredArgumentTypes().size());
-				//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "NamedEntity"), fmxLocalVariable.getDeclaredArgumentTypes().iterator().next());
-			}
-		}
-		
-		fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "ensureFamixUniqEntity");
-		assertNotNull(fmxMethod);
-		assertEquals(2, fmxMethod.getLocalVariables().size());
-		for (LocalVariable fmxLocalVariable : fmxMethod.getLocalVariables()) {
-			assertTrue(fmxLocalVariable.getName().equals("fmx") || fmxLocalVariable.getName().equals("l"));
-			if (fmxLocalVariable.getName().equals("fmx")) {
-				//assertNull(fmxLocalVariable.getDeclaredArgumentTypes());
+		Method meth = TestVerveineUtils.detectElement(repo, Method.class, "getEntityByName");
+		assertNotNull(meth);
+		assertEquals(2, meth.getLocalVariables().size());
+		for (LocalVariable var : meth.getLocalVariables()) {
+			Type collec;
+			if (var.getName().equals("ret")) {
+				collec = var.getDeclaredType();
+				assertNotNull(collec);
+				assertEquals("Collection", collec.getName());
+				assertEquals(ParameterizedType.class, collec.getClass());
+				assertEquals(1, ((ParameterizedType)collec).getArguments().size());
+				Type t = ((ParameterizedType)collec).getArguments().iterator().next();
+				assertEquals("T", t.getName());
+				assertSame(meth, t.getBelongsTo());
 			}
-			if (fmxLocalVariable.getName().equals("l")) {
-				//assertEquals(1, fmxLocalVariable.getDeclaredArgumentTypes().size());
-				//assertSame(TestVerveineUtils.detectElement(repo, Type.class, "T"), fmxLocalVariable.getDeclaredArgumentTypes().iterator().next());
+			if (var.getName().equals("l_name")) {
+				collec = var.getDeclaredType();
+				assertNotNull(collec);
+				assertEquals("Collection", collec.getName());
+				assertEquals(ParameterizedType.class, collec.getClass());
+				assertEquals(1, ((ParameterizedType)collec).getArguments().size());
+				Type ne = ((ParameterizedType)collec).getArguments().iterator().next();
+				assertEquals("NamedEntity", ne.getName());
 			}
 		}
 	}
@@ -374,6 +327,11 @@
 	}
 
 	@Test
+	public void testEnumAccess() {
+		fail("must test access to EnumValues in Card.java");		
+	}
+
+	@Test
 	public void testStaticInitializationBlock() {
 		fail("must test static initialization block in Card.java");
 	}
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineVisitor.java	(revision 119)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineVisitor.java	(revision 120)
@@ -566,9 +566,15 @@
 	public boolean visit(QualifiedName node) {
 		IBinding bnd = node.resolveBinding();
 		if (bnd instanceof IVariableBinding) {
-			// apparently this is a field
-			BehaviouralEntity accessor = this.context.topMethod();
-			createAccessedAttribute((IVariableBinding)bnd, node.getName().getIdentifier(), null, null, accessor);
+			if (((IVariableBinding) bnd).isEnumConstant()) {
+				// it is an enumerated constant
+				//TODO record the access to the enumValue
+			}
+			else {
+				// looks like it is a field
+				BehaviouralEntity accessor = this.context.topMethod();
+				createAccessedAttribute((IVariableBinding)bnd, node.getName().getIdentifier(), null, null, accessor);
+			}	
 		}
 		return super.visit(node);
 	}
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: verveine.extractor.java/lib/verveine.core.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 62)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 63)
@@ -314,7 +314,7 @@
 						ret = dico.ensureFamixParameter( (IVariableBinding)bnd);
 					}
 					else { // suppose it's a local variable
-						ret = dico.ensureFamixLocalVariable( (IVariableBinding)bnd);
+						ret = dico.ensureFamixLocalVariable( (IVariableBinding)bnd, context.topMethod());
 					}
 				}
 			}
Index: verveine.extractor.java/lib/verveine.extractor.java.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/verveine.extractor.java.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineExtractorJavaTest.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineExtractorJavaTest.java	(revision 4)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineExtractorJavaTest.java	(revision 5)
@@ -89,7 +89,7 @@
 		assertEquals(0, interfce.getAttributes().size());
 		assertSame(TestVerveineUtils.detectElement(repo, Namespace.class, "server"), interfce.getContainer());
 		assertTrue(interfce.getIsInterface());
-		
+
 		fr.inria.verveine.core.gen.famix.Class innerClass = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "XPrinter");
 		assertNotNull(innerClass);
 		assertEquals("XPrinter", innerClass.getName());
@@ -383,4 +383,37 @@
 		
 	}
 
+	@Test
+	public void testModifiers() {
+		fr.inria.verveine.core.gen.famix.Class clazz = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "OutputServer");
+		assertNotNull(clazz);
+		assertFalse(clazz.getIsInterface());
+		assertTrue(clazz.getIsAbstract());
+		assertTrue(clazz.getModifiers().contains("abstract"));
+		assertTrue(clazz.getIsPublic());
+		assertFalse(clazz.getIsPrivate());
+		assertFalse(clazz.getIsProtected());
+		assertFalse(clazz.getIsFinal());
+		
+		assertEquals(3, clazz.getMethods().size());
+		for (Method m : clazz.getMethods()) {
+			assertTrue(m.getIsPublic());
+			assertFalse(m.getIsPrivate());
+			assertFalse(m.getIsProtected());
+			assertFalse(m.getIsFinal());
+			if (m.getName().equals("output")) {
+				assertTrue(m.getIsAbstract());
+			}
+			else {
+				assertFalse(m.getIsAbstract());
+			}
+		}
+		
+		assertEquals(1, clazz.getAttributes().size());
+		Attribute a = clazz.getAttributes().iterator().next();
+		assertFalse(a.getIsPublic());
+		assertFalse(a.getIsPrivate());
+		assertTrue(a.getIsProtected());
+		assertFalse(a.getIsFinal());
+	}
 }
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 4)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 5)
@@ -10,6 +10,7 @@
 import org.eclipse.jdt.core.dom.IPackageBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import org.eclipse.jdt.core.dom.IVariableBinding;
+import org.eclipse.jdt.core.dom.Modifier;
 
 import ch.akuhn.fame.Repository;
 import fr.inria.verveine.core.Dictionary;
@@ -18,6 +19,7 @@
 import fr.inria.verveine.core.gen.famix.FileAnchor;
 import fr.inria.verveine.core.gen.famix.LocalVariable;
 import fr.inria.verveine.core.gen.famix.Method;
+import fr.inria.verveine.core.gen.famix.NamedEntity;
 import fr.inria.verveine.core.gen.famix.Namespace;
 import fr.inria.verveine.core.gen.famix.Parameter;
 import fr.inria.verveine.core.gen.famix.SourceAnchor;
@@ -246,7 +248,7 @@
 		}
 		
 		if ((fmx!=null) && fmx.getIsStub()) {
-			// apparently we just created it or it already existed as a stub), so add information to it
+			// apparently we just created it or it already existed as a stub, so add information to it
 			fmx.setIsInterface(bnd.isInterface());
 			fmx.setContainer(owner);
 			if (sups.size() > 0) {
@@ -255,6 +257,11 @@
 					ensureFamixInheritance(sup, fmx);
 				}
 			}
+			setNamedEntityModifiers(fmx, bnd.getDeclaredModifiers());
+			if (fmx.getIsAbstract()) {
+				// don't know why there must be two different ways to mark abstract classes !!! But this is a pain!
+				fmx.addModifiers("abstract");
+			}
 			fmx.setName(identifier); // might be different from bnd.getName() in the case of anonymous class
 			fmx.setIsStub(Boolean.FALSE);
 		}
@@ -329,11 +336,12 @@
 		}
 		
 		if ((fmx!=null) && fmx.getIsStub()) {
-			// apparently we just created it, so add information to it
+			// apparently we just created it or it already existed as a stub, so add information to it
 			fmx.setParentType(parentClass);
 			fmx.setDeclaredType(rettyp);	
 			fmx.setName(bnd.getName());
 			fmx.setSignature(sig);
+			setNamedEntityModifiers(fmx, bnd.getModifiers());
 			fmx.setIsStub(Boolean.FALSE);
 		}
 
@@ -384,6 +392,7 @@
 		
 		if ((fmx!=null) && fmx.getIsStub()) {
 			// apparently we just created it, so add information to it
+			setNamedEntityModifiers(fmx, bnd.getModifiers());
 			fmx.setParentType(parentClass);
 			fmx.setDeclaredType(typ);	
 			fmx.setName(bnd.getName());
@@ -393,6 +402,19 @@
 		return fmx;
 	}
 
+	/** Sets the modifiers (abstract, public, ...) of a FamixNamedEntity
+	 * @param fmx -- the FamixNamedEntity
+	 * @param mod -- a description of the modifiers as understood by org.eclipse.jdt.core.dom.Modifier
+	 */
+	private void setNamedEntityModifiers(NamedEntity fmx, int mod) {
+		fmx.setIsAbstract(Modifier.isAbstract(mod));
+		fmx.setIsFinal(Modifier.isFinal(mod));
+		fmx.setIsPrivate(Modifier.isPrivate(mod));
+		fmx.setIsProtected(Modifier.isProtected(mod));
+		fmx.setIsPublic(Modifier.isPublic(mod));
+	}
+
+
 	/**
 	 * Returns a Famix Paramenter associated with the IVariableBinding. The Entity is created if it does not exist.
 	 * The JDT Binding is a unique representation of a java entity within the AST.
