Index: verveine.extractor.java/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: verveine.extractor.java/lib/famix.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: verveine.extractor.java/lib/verveine.core.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: verveine.extractor.java/lib/verveine.extractor.java.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: verveine.extractor.java/lib/verveine.extractor.java.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: verveine.extractor.java/test_src/ad_hoc/Dictionary.java
===================================================================
--- verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 113)
+++ verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 114)
@@ -134,5 +134,3 @@
 	public void add(NamedEntity f) {
 	}
 }
-
-}
\ No newline at end of file
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 113)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 114)
@@ -191,10 +191,8 @@
 	public void testParameterizableClass() {
 		ParameterizableClass dico = TestVerveineUtils.detectElement(repo, ParameterizableClass.class, "Dictionary");
 		assertNotNull(dico);
-
 		assertEquals("Dictionary", dico.getName());
 		assertEquals(6, dico.getTypes().size());  // <B> , ImplicitVars , Map<B,NamedEntity> , Map<String,Collection<NamedEntity>> , Collection<NamedEntity> , Map<Class,ImplicitVars>
-// FIXME: Collection<NamedEntity> belongsTo getEntityByName !!
 
 		assertEquals(1, dico.getParameters().size());
 
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 113)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 114)
@@ -46,6 +46,7 @@
 import fr.inria.verveine.core.gen.famix.Attribute;
 import fr.inria.verveine.core.gen.famix.BehaviouralEntity;
 import fr.inria.verveine.core.gen.famix.Class;
+import fr.inria.verveine.core.gen.famix.ContainerEntity;
 import fr.inria.verveine.core.gen.famix.Method;
 import fr.inria.verveine.core.gen.famix.NamedEntity;
 import fr.inria.verveine.core.gen.famix.Namespace;
@@ -192,7 +193,7 @@
 
 			// Exceptions
 			for (Name excepName : (List<Name>)node.thrownExceptions()) {
-				fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.ensureFamixClass(excepName.resolveTypeBinding(), excepName.getFullyQualifiedName(), null);
+				fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.ensureFamixClass(excepName.resolveTypeBinding(), excepName.getFullyQualifiedName(), /*owner*/null, /*isGeneric*/false);
 				if (excepFmx != null) {
 					dico.ensureFamixDeclaredException(meth, excepFmx);
 				}
@@ -233,7 +234,8 @@
 			IBinding bnd = ((Name) callingExpr).resolveBinding();
 			if ( (bnd != null) && (bnd instanceof IVariableBinding) && ((IVariableBinding)bnd).isField() ){
 				BehaviouralEntity accessor = this.context.topMethod();
-				Attribute accessed = this.dico.ensureFamixAttribute(bnd, ((SimpleName)callingExpr).getIdentifier(), null, /*owner*/context.topClass());
+				Attribute accessed = this.dico.ensureFamixAttribute((IVariableBinding)bnd, ((SimpleName)callingExpr).getIdentifier(), null, /*owner*/context.topClass());
+				// cast needed to ensure calling the proper ensureFamixAttribute() (in JavaDictionnary)
 				// 'owner' note: using a field without anything before, it must belongs to the currently parsed class
 				
 				context.setLastAccess( dico.addFamixAccess(accessor, accessed, /*isWrite*/false, context.getLastAccess()) );
@@ -321,10 +323,10 @@
 		if (meth != null) {
 			fr.inria.verveine.core.gen.famix.Class excepFmx = null;
 			if (excepClass instanceof SimpleType) {
-				excepFmx = this.dico.ensureFamixClass(excepClass.resolveBinding(), ((SimpleType) excepClass).getName().getFullyQualifiedName(), null);
+				excepFmx = this.dico.ensureFamixClass(excepClass.resolveBinding(), ((SimpleType) excepClass).getName().getFullyQualifiedName(), /*owner*/null, /*isGeneric*/false);
 			}
 			else if (excepClass instanceof QualifiedType) {
-				excepFmx = this.dico.ensureFamixClass(excepClass.resolveBinding(), ((QualifiedType) excepClass).getName().getIdentifier(), null);
+				excepFmx = this.dico.ensureFamixClass(excepClass.resolveBinding(), ((QualifiedType) excepClass).getName().getIdentifier(), /*owner*/null, /*isGeneric*/false);
 			}
 			if (excepFmx != null) {
 				dico.ensureFamixCaughtException(meth, excepFmx);
@@ -337,7 +339,7 @@
 	@Override
 	public boolean visit(ThrowStatement node) {
 		Method meth = this.context.topMethod();
-		fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.ensureFamixClass(node.getExpression().resolveTypeBinding(), null, null);
+		fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.ensureFamixClass(node.getExpression().resolveTypeBinding(), /*name*/(String)null, /*owner*/(ContainerEntity)null, /*isGeneric*/false);
 		if (excepFmx != null) {
 			dico.ensureFamixThrownException(meth, excepFmx);
 		}
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 113)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 114)
@@ -106,14 +106,15 @@
 		super.endVisit(node);
 	}
 
+	/*
+	 * Can only be a class or interface declaration
+	 */
 	public boolean visit(TypeDeclaration node) {
-		// Can only be a class or interface declaration
-
 //		System.err.println("TRACE, DefVisiting TypeDeclaration: "+node.getName().getIdentifier());
 		ITypeBinding bnd = node.resolveBinding();
 		@SuppressWarnings("unchecked")
-		List<TypeParameter> tparams = node.typeParameters();
-		fr.inria.verveine.core.gen.famix.Class fmx = (Class) dico.ensureFamixType(bnd, /*name*/node.getName().getIdentifier(), /*owner*/context.top(), /*ctxt*/context.top());
+		List<TypeParameter> tparams = (List<TypeParameter>)node.typeParameters();
+		fr.inria.verveine.core.gen.famix.Class fmx = dico.ensureFamixClass(bnd, /*name*/node.getName().getIdentifier(), /*owner*/context.top(), tparams.size()>0); //   /*ctxt*/context.top());
 		if (fmx != null) {
 			fmx.setIsStub(false);
 
@@ -242,15 +243,17 @@
 				paramTypes.add(param.getType());
 		}
 
-		// creating/recovering it (creates it with a null return type because might need this FamixMethod to create the return type.
-		Method fmx = dico.ensureFamixMethod(bnd, node.getName().getIdentifier(), paramTypes, /*retType*/null, context.topClass());
-		fr.inria.verveine.core.gen.famix.Type fmxTyp = referedType(node.getReturnType2(), fmx);
+		// creating/recovering it
+		// creates it with a fake return type because we might need this FamixMethod to create the return type (if it is a ParameterizedType)
+		// we reset the return type to its proper value later
+		Method fmx = dico.ensureFamixMethod(bnd, node.getName().getIdentifier(), paramTypes, /*retType*/dico.ensureFamixClassObject(null), context.topClass());
 
 		if (fmx != null) {
 			fmx.setIsStub(false);
 			
 			this.context.pushMethod(fmx);
-			fmx.setDeclaredType(fmxTyp);
+			fr.inria.verveine.core.gen.famix.Type fmxRetTyp = referedType(node.getReturnType2(), fmx);
+			fmx.setDeclaredType(fmxRetTyp);
 			if (node.getBody() != null) {
 				context.setTopMethodCyclo(1);
 			}
@@ -380,12 +383,12 @@
 			ITypeBinding parameterizedBnd = typ.resolveBinding();
 			ITypeBinding parameterizableBnd = (parameterizedBnd == null) ? null : parameterizedBnd.getErasure();
 			String tname = dico.findTypeName(typ);
-			ParameterizableClass tmpGeneric = null;
-			tmpGeneric = (ParameterizableClass) dico.ensureFamixClass(parameterizableBnd, tname, /*owner*/null, /*isGeneric*/true);
+			ParameterizableClass generic = null;
+			generic = (ParameterizableClass) dico.ensureFamixClass(parameterizableBnd, tname, /*owner*/null, /*isGeneric*/true);
 
-			fmxTyp = dico.ensureFamixParameterizedType(parameterizedBnd, tname, tmpGeneric, /*owner*/ctxt);
+			fmxTyp = dico.ensureFamixParameterizedType(parameterizedBnd, tname, generic, /*owner*/ctxt);
 			for (Type targ : (List<Type>) ((ParameterizedType)typ).typeArguments()) {
-				fr.inria.verveine.core.gen.famix.Type fmxTArg = dico.ensureFamixType(targ.resolveBinding(), dico.findTypeName(targ), null, ctxt);
+				fr.inria.verveine.core.gen.famix.Type fmxTArg = dico.ensureFamixType(targ.resolveBinding(), dico.findTypeName(targ), /*owner*/null, ctxt);
 				((fr.inria.verveine.core.gen.famix.ParameterizedType)fmxTyp).addArguments(fmxTArg);
 			}
 		}
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 113)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 114)
@@ -155,7 +155,7 @@
 		}
 
 		if (bnd.isParameterizedType()) {
-			return ensureFamixParameterizedType(bnd, name, /*generic*/null, owner);
+			return ensureFamixParameterizedType(bnd, name, /*generic*/null, ctxt);
 		}
 
 		// it seems wise to test isClass after isGenericType, isParameterizedType, ... ? 
@@ -205,6 +205,7 @@
 
 		fmx = (fr.inria.verveine.core.gen.famix.Class)getEntityByKey(bnd);	// to avoid useless computations if we can
 		if (fmx != null) {
+//			System.out.println("ensureClass, recovered from bnd:"+fmx.toString());
 			return fmx;
 		}
 
@@ -230,7 +231,7 @@
 			}
 		}
 
-		if (name.equals(OBJECT_NAME)) {
+		if (name.equals(OBJECT_NAME)) { // TODO && owner == java.lang
 			return ensureFamixClassObject(bnd);
 		}
 
@@ -238,6 +239,7 @@
 		for (Type candidate : this.getEntityByName(fr.inria.verveine.core.gen.famix.Class.class, name)) {
 			if ( checkAndMapClass(bnd, candidate) ) {
 				fmx = (Class) candidate;
+//				System.out.println("ensureClass, recovered from name:"+fmx.toString());
 				break;
 			}
 		}
@@ -376,7 +378,8 @@
 
 		// --------------- generic
 		if (generic == null) {
-			generic = (ParameterizableClass) ensureFamixClass(bnd.getErasure(), name, owner, /*isGeneric*/true);
+//			System.out.println("ensureParameterized, trying to recover generic: "+name);
+			generic = (ParameterizableClass) ensureFamixClass(bnd.getErasure(), name, /*owner*/null, /*isGeneric*/true);
 		}
 
 		// --------------- recover from name ?
Index: verveine.extractor.java/lib/verveine.extractor.java.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/.classpath
===================================================================
--- verveine.core/.classpath	(revision 26)
+++ verveine.core/.classpath	(revision 27)
@@ -5,5 +5,6 @@
 	<classpathentry kind="lib" path="lib/fame.jar"/>
 	<classpathentry kind="var" path="ECLIPSE_HOME/plugins/org.junit_4.8.1.v4_8_1_v20100427-1100/junit.jar"/>
 	<classpathentry kind="lib" path="lib/org.eclipse.jdt.core_3.6.0.v_A58.jar"/>
+	<classpathentry kind="lib" path="lib/akuhn-util-r28011.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: verveine.core/lib/fame.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/lib/akuhn-util-r28011.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: verveine.core/lib/akuhn-util-r28011.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

