Index: verveine.core/.classpath
===================================================================
--- verveine.core/.classpath	(revision 110)
+++ verveine.core/.classpath	(revision 111)
@@ -3,7 +3,7 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry kind="lib" path="lib/akuhn-util-r28011.jar"/>
-	<classpathentry kind="lib" path="lib/fame.jar"/>
+	<classpathentry kind="lib" path="lib/fame.jar" sourcepath="/Fame/src"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.eclipse.jdt.core"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: verveine.core/src/fr/inria/verveine/core/EntityStack.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/EntityStack.java	(revision 110)
+++ verveine.core/src/fr/inria/verveine/core/EntityStack.java	(revision 111)
@@ -362,11 +362,11 @@
 	 * @return the Famix class
 	 */
 	public fr.inria.verveine.core.gen.famix.Class topClass() {
-		return getTopType().getFmxClass();
+		return ( getTopType() == null) ? null : getTopType().getFmxClass();
 	}
 
 	public AnnotationType topAnnotationType() {
-		return getTopType().getFmxAnnotationType();
+		return ( getTopType() == null) ? null : getTopType().getFmxAnnotationType();
 	}
 	
 	/**
@@ -375,11 +375,11 @@
 	 * @return the Famix method
 	 */
 	public Method topMethod() {
-		return getTopType().getFmxMethod();
+		return ( getTopType() == null) ? null : getTopType().getFmxMethod();
 	}
 
 	public AnnotationTypeAttribute topAnnotationMember() {
-		return getTopType().getFmxAnnotationAttribute();
+		return ( getTopType() == null) ? null : getTopType().getFmxAnnotationAttribute();
 	}
 
 	// PROPERTIES OF THE TOP METHOD
Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 110)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 111)
@@ -456,7 +456,7 @@
 	 * @param prev -- previous reference relationship in the same context
 	 * @return the Reference
 	 */
-	public Reference ensureFamixReference(ContainerEntity src, ContainerEntity tgt, Association prev) {
+	public Reference addFamixReference(ContainerEntity src, ContainerEntity tgt, Association prev) {
 		Reference ref = new Reference();
 		ref.setTarget(tgt);
 		ref.setSource(src);
@@ -474,7 +474,7 @@
 	 * @param prev -- previous invocation relationship in the same context
 	 * @return the Invocation
 	 */
-	public Invocation ensureFamixInvocation(BehaviouralEntity sender, BehaviouralEntity invoked, NamedEntity receiver, Association prev) {
+	public Invocation addFamixInvocation(BehaviouralEntity sender, BehaviouralEntity invoked, NamedEntity receiver, Association prev) {
 		Invocation invok = new Invocation();
 		invok.setReceiver(receiver);
 		invok.setSender(sender);
@@ -494,7 +494,7 @@
 	 * @param prev -- previous access relationship in the same context
 	 * @return the Invocation
 	 */
-	public Access ensureFamixAccess(BehaviouralEntity accessor, StructuralEntity var, boolean isWrite, Association prev) {
+	public Access addFamixAccess(BehaviouralEntity accessor, StructuralEntity var, boolean isWrite, Association prev) {
 		/* We keep multiple accesses from one method to a field */
 		Access acc = new Access();
 		acc.setAccessor(accessor);
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 110)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 111)
@@ -376,7 +376,6 @@
 
 	}
 
-
 	@Test
 	public void testInvocation() {
 		fr.inria.verveine.core.gen.famix.Class nodeClass = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "Node");
@@ -452,7 +451,6 @@
 
 	}
 
-	
 	@Test
 	public void testAccess() {
 		Attribute att;
@@ -491,7 +489,6 @@
 		}
 	}
 
-
 	@Test
 	public void testSourceAnchors() {
 		SourceAnchor anc = null;
@@ -542,7 +539,6 @@
 		
 	}
 
-
 	@Test
 	public void testModifiers() {
 		fr.inria.verveine.core.gen.famix.Class clazz = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "OutputServer");
@@ -577,7 +573,6 @@
 		assertFalse(a.getIsFinal());
 	}
 
-
 	@Test
 	public void testComment() {	
 		fr.inria.verveine.core.gen.famix.Class clazz = TestVerveineUtils.detectElement(repo, fr.inria.verveine.core.gen.famix.Class.class, "SingleDestinationAddress");
@@ -597,7 +592,6 @@
 		assertEquals(34, ((FileAnchor)anc).getEndLine());
 
 	}
-
 	
 	@Test
 	public void testMetric() {
@@ -619,7 +613,6 @@
 			}
 		}		
 	}
-
 	
 	@Test
 	public void testAnnotation() {
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 110)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_AdHoc.java	(revision 111)
@@ -4,10 +4,7 @@
 package tests.fr.inria.verveine.extractor.java;
 
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertSame;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 import java.io.File;
 import java.io.FileWriter;
@@ -18,6 +15,7 @@
 
 import test.fr.inria.verveine.core.TestVerveineUtils;
 import ch.akuhn.fame.Repository;
+import fr.inria.verveine.core.gen.famix.Access;
 import fr.inria.verveine.core.gen.famix.AnnotationInstance;
 import fr.inria.verveine.core.gen.famix.AnnotationInstanceAttribute;
 import fr.inria.verveine.core.gen.famix.AnnotationType;
@@ -33,6 +31,7 @@
 import fr.inria.verveine.core.gen.famix.Parameter;
 import fr.inria.verveine.core.gen.famix.ParameterType;
 import fr.inria.verveine.core.gen.famix.ParameterizableClass;
+import fr.inria.verveine.core.gen.famix.ParameterizedType;
 import fr.inria.verveine.core.gen.famix.ThrownException;
 import fr.inria.verveine.core.gen.famix.Type;
 import fr.inria.verveine.extractor.java.VerveineJParser;
@@ -159,18 +158,44 @@
 		}
 
 	}
+	
+	@Test
+	public void testClassVar() {
+		Method meth = TestVerveineUtils.detectElement(repo, Method.class, "ensureFamixEntity");
+		assertNotNull(meth);
+		
+		assertEquals(3, meth.getParameters().size());
+		for (Parameter p : meth.getParameters()) {
+			if (p.getName().equals("fmxClass")) {
+				assertEquals(ParameterizedType.class, p.getDeclaredType().getClass());
+				assertEquals("Class", p.getDeclaredType().getName());
+			}
+			else {
+				assertTrue("Unknown parameter for ensureFamixEntity: "+p.getName(),
+							p.getName().equals("name") || p.getName().equals("bnd") );
+				break;
+			}
+		}
+		
+		assertEquals(2, meth.getAccesses().size());
+		boolean classFieldFound = false;
+		for (Access acc : meth.getAccesses()) {
+			if (acc.getTo().getName().equals("class")) {
+				classFieldFound = true;
+			}
+		}
+		assertTrue("ensureFamixEntity does not access <someClass>.class", classFieldFound);
+	}
 
 	@Test
 	public void testParameterizableClass() {
 		ParameterizableClass dico = TestVerveineUtils.detectElement(repo, ParameterizableClass.class, "Dictionary");
 		assertNotNull(dico);
-		for (Type t : dico.getTypes()) {
-			System.out.println("dico type: "+t.getName());
-		}
+
 		assertEquals("Dictionary", dico.getName());
 		assertEquals(6, dico.getTypes().size());  // <B> , ImplicitVars , Map<B,NamedEntity> , Map<String,Collection<NamedEntity>> , Collection<NamedEntity> , Map<Class,ImplicitVars>
 		assertEquals(1, dico.getParameters().size());
-		
+
 		ParameterType dicoParam = TestVerveineUtils.detectElement(repo, ParameterType.class, "B");
 		assertNotNull(dicoParam);
 		assertEquals("B", dicoParam.getName());
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 110)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 111)
@@ -45,9 +45,11 @@
 import fr.inria.verveine.core.EntityStack;
 import fr.inria.verveine.core.gen.famix.Attribute;
 import fr.inria.verveine.core.gen.famix.BehaviouralEntity;
+import fr.inria.verveine.core.gen.famix.Class;
 import fr.inria.verveine.core.gen.famix.Method;
 import fr.inria.verveine.core.gen.famix.NamedEntity;
 import fr.inria.verveine.core.gen.famix.Namespace;
+import fr.inria.verveine.core.gen.famix.StructuralEntity;
 
 /**
  * AST Visitor that defines all the (Famix) entities of interest and links betgween them
@@ -123,7 +125,7 @@
 			importName = dico.removeLastName(importName);
 		}
 		Namespace fmxDest = dico.ensureFamixNamespace( (IPackageBinding)importBnd, importName);
-		context.setLastReference( dico.ensureFamixReference(fmxSrc, fmxDest, context.getLastReference()) );
+		context.setLastReference( dico.addFamixReference(fmxSrc, fmxDest, context.getLastReference()) );
 		
 		return super.visit(node);
 	}
@@ -244,13 +246,18 @@
 		BehaviouralEntity sender = this.context.topMethod();
 		if (sender != null) {
 			Method invoked = this.dico.ensureFamixMethod(calledBnd, calledName, (Collection<org.eclipse.jdt.core.dom.Type>)null, /*retType*/null, /*owner*/null);  // cast needed to desambiguate the call
-			context.setLastInvocation( dico.ensureFamixInvocation(sender, invoked, receiver, context.getLastInvocation()) );
+			context.setLastInvocation( dico.addFamixInvocation(sender, invoked, receiver, context.getLastInvocation()) );
 		}
 	}
 
 	public boolean visit(FieldAccess node) {
-		fieldAccess(node.resolveFieldBinding());
-		
+		BehaviouralEntity accessor = this.context.topMethod();
+		Attribute accessed = this.dico.ensureFamixAttribute(node.resolveFieldBinding(), node.getName().getIdentifier(), null, null);
+		if ( (accessed != null) && (accessed.getParentType() == null) && (accessed.getName().equals("length")) ) {
+			accessed.setParentType(dico.ensureFamixClassArray());
+		}
+		context.setLastAccess( dico.addFamixAccess(accessor, accessed, /*isWrite*/false, context.getLastAccess()) );
+
 		return super.visit(node);
 	}
 
@@ -260,7 +267,12 @@
 		IBinding bnd = node.resolveBinding();
 		if (bnd instanceof IVariableBinding) {
 			// apparently this is a field
-			fieldAccess((IVariableBinding) bnd);
+			BehaviouralEntity accessor = this.context.topMethod();
+			Attribute accessed = this.dico.ensureFamixAttribute(bnd, node.getName().getIdentifier(), null, null);
+			if ( (accessed != null) && (accessed.getParentType() == null) && (accessed.getName().equals("length")) ) {
+				accessed.setParentType(dico.ensureFamixClassArray());
+			}
+			context.setLastAccess( dico.addFamixAccess(accessor, accessed, /*isWrite*/false, context.getLastAccess()) );
 		}
 		return super.visit(node);
 	}
@@ -348,9 +360,12 @@
 
 		// field.msg()
 		else if (expr instanceof FieldAccess) {
-			Attribute ret = null;
-			IVariableBinding bnd = ((FieldAccess) expr).resolveFieldBinding();
-			ret = dico.ensureFamixAttribute(bnd, ((FieldAccess) expr).getName().getIdentifier(), null, null);
+			BehaviouralEntity accessor = this.context.topMethod();
+			Attribute ret = dico.ensureFamixAttribute(((FieldAccess) expr).resolveFieldBinding(), ((FieldAccess) expr).getName().getIdentifier(), null, null);
+			if ( (ret != null) && (ret.getParentType() == null) && (ret.getName().equals("length")) ) {
+				ret.setParentType(dico.ensureFamixClassArray());
+			}
+			context.setLastAccess( dico.addFamixAccess(accessor, ret, /*isWrite*/false, context.getLastAccess()) );
 
 			return ret;
 		}
@@ -384,7 +399,14 @@
 			else if (bnd instanceof IVariableBinding) {
 				String varName = ( ((Name)expr).isSimpleName() ? ((SimpleName)expr).getFullyQualifiedName() : ((QualifiedName)expr).getName().getIdentifier());
 				if ( ((IVariableBinding)bnd).isField() ) {
-					ret = dico.ensureFamixAttribute((IVariableBinding)bnd, varName, null, null);//TODO should be ensureAttribute
+					ret = dico.ensureFamixAttribute((IVariableBinding)bnd, varName, null, null);
+					BehaviouralEntity accessor = this.context.topMethod();
+					if ( (ret != null) && (((Attribute) ret).getParentType() == null) && (ret.getName().equals("length")) ) {
+						((Attribute) ret).setParentType(dico.ensureFamixClassArray());
+					}
+					context.setLastAccess( dico.addFamixAccess(accessor, (Attribute) ret, /*isWrite*/false, context.getLastAccess()) );
+
+					return ret;
 				}
 				else if ( ((IVariableBinding)bnd).isParameter() ) {
 					ret = dico.ensureFamixParameter( (IVariableBinding)bnd, varName, null, context.topMethod());
@@ -410,9 +432,12 @@
 
 		// super.field.msg()
 		else if (expr instanceof SuperFieldAccess) {
-			Attribute ret = null;
-			IVariableBinding bnd = ((SuperFieldAccess) expr).resolveFieldBinding();
-			ret = dico.ensureFamixAttribute(bnd, ((SuperFieldAccess) expr).getName().getIdentifier(), null, null);
+			BehaviouralEntity accessor = this.context.topMethod();
+			Attribute ret = dico.ensureFamixAttribute(((SuperFieldAccess) expr).resolveFieldBinding(), ((SuperFieldAccess) expr).getName().getIdentifier(), null, null);
+			if ( (ret != null) && (ret.getParentType() == null) && (ret.getName().equals("length")) ) {
+				ret.setParentType(dico.ensureFamixClassArray());
+			}
+			context.setLastAccess( dico.addFamixAccess(accessor, ret, /*isWrite*/false, context.getLastAccess()) );
 
 			return ret;
 		}
@@ -431,8 +456,17 @@
 
 		// type.class.msg()
 		else if (expr instanceof TypeLiteral) {
-			// may be could specify: ensureFamixClass ??
-			return dico.ensureFamixType( expr.resolveTypeBinding(), null, null,  context.top());
+			// similar to a field access
+			Attribute ret;
+			fr.inria.verveine.core.gen.famix.Type javaMetaClass = dico.ensureFamixMetaClass(null); 
+			BehaviouralEntity accessor = this.context.topMethod();
+			ret =  dico.ensureFamixAttribute(null, "class", javaMetaClass, javaMetaClass);
+			if ( (ret != null) && (ret.getParentType() == null) && (ret.getName().equals("length")) ) {
+				ret.setParentType(dico.ensureFamixClassArray());
+			}
+			context.setLastAccess( dico.addFamixAccess(accessor, ret, /*isWrite*/false, context.getLastAccess()) );
+
+			return ret;
 		}
 
 		// ... OTHER POSSIBLE EXPRESSIONS ?
@@ -443,22 +477,4 @@
 		return null;
 	}
 
-	/**
-	 * Handles an access to a field by creating the corresponding Famix Entity
-	 * @param bnd -- a binding for the field (i.e attribute)
-	 */
-	private void fieldAccess(IVariableBinding bnd) {
-		// TODO could be accessing annotation type attribute
-		BehaviouralEntity accessor = this.context.topMethod();
-		if (accessor != null) {
-			Attribute accessed = this.dico.ensureFamixAttribute(bnd, null, null, null);
-			if (accessed != null) {
-				context.setLastAccess( dico.ensureFamixAccess(accessor, accessed, /*isWrite*/false, context.getLastAccess()) );
-				if ( (accessed.getParentType() == null) && (accessed.getName().equals("length")) ) {
-					accessed.setParentType(dico.ensureFamixClassArray());
-				}
-			}
-		}
-	}
-
 }
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 110)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 111)
@@ -23,7 +23,6 @@
 import org.eclipse.jdt.core.dom.ForStatement;
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
-import org.eclipse.jdt.core.dom.IVariableBinding;
 import org.eclipse.jdt.core.dom.IfStatement;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.MethodInvocation;
@@ -43,21 +42,17 @@
 import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.eclipse.jdt.core.dom.VariableDeclarationExpression;
-import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
 import org.eclipse.jdt.core.dom.WhileStatement;
 
 import fr.inria.verveine.core.EntityStack;
 import fr.inria.verveine.core.gen.famix.AnnotationType;
 import fr.inria.verveine.core.gen.famix.AnnotationTypeAttribute;
-import fr.inria.verveine.core.gen.famix.Attribute;
 import fr.inria.verveine.core.gen.famix.Class;
 import fr.inria.verveine.core.gen.famix.ContainerEntity;
 import fr.inria.verveine.core.gen.famix.EnumValue;
-import fr.inria.verveine.core.gen.famix.LocalVariable;
 import fr.inria.verveine.core.gen.famix.Method;
 import fr.inria.verveine.core.gen.famix.Namespace;
-import fr.inria.verveine.core.gen.famix.Parameter;
 import fr.inria.verveine.core.gen.famix.ParameterType;
 import fr.inria.verveine.core.gen.famix.ParameterizableClass;
 import fr.inria.verveine.core.gen.famix.StructuralEntity;
@@ -241,31 +236,33 @@
 		
 		// some info needed to create the Famix Method
 		IMethodBinding bnd = node.resolveBinding();
-		Type retTyp = node.getReturnType2();
-		Collection<Type> paramTypes = new ArrayList<Type>();
-		for (SingleVariableDeclaration param : (List<SingleVariableDeclaration>)node.parameters()) {
-				paramTypes.add(param.getType());
-		}
-
-		fr.inria.verveine.core.gen.famix.Type fmxTyp;
+		//Type retTyp = node.getReturnType2();
+		/*fr.inria.verveine.core.gen.famix.Type fmxTyp;
 		if (retTyp == null) {
 			fmxTyp = null;
 		}
 		else {
-			fmxTyp = dico.ensureFamixType(retTyp.resolveBinding(), dico.findTypeName(retTyp), /*owner*/null, context.top());
+			fmxTyp = dico.ensureFamixType(retTyp.resolveBinding(), dico.findTypeName(retTyp), /*owner* /null, context.top());
+		}*/
+
+		Collection<Type> paramTypes = new ArrayList<Type>();
+		for (SingleVariableDeclaration param : (List<SingleVariableDeclaration>)node.parameters()) {
+				paramTypes.add(param.getType());
 		}
 
-		// creating/recovering it
-		Method fmx = dico.ensureFamixMethod(bnd, node.getName().getIdentifier(), paramTypes, fmxTyp, context.topClass());
-		
-		if (retTyp != null && retTyp.isParameterizedType()) {
+		// creating/recovering it (creates it with a null return type because might need this FamixMethod to create the return type.
+		Method fmx = dico.ensureFamixMethod(bnd, node.getName().getIdentifier(), paramTypes, null, context.topClass());
+		fr.inria.verveine.core.gen.famix.Type fmxTyp = referedType(node.getReturnType2(), fmx);
+
+		//if (retTyp != null && retTyp.isParameterizedType()) {
 			//TODO fmx.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)retTyp).typeArguments()));
-		}
+		//}
 		
 		if (fmx != null) {
 			fmx.setIsStub(false);
 			
 			this.context.pushMethod(fmx);
+			fmx.setDeclaredType(fmxTyp);
 			if (node.getBody() != null) {
 				context.setTopMethodCyclo(1);
 			}
@@ -279,7 +276,8 @@
 				// Note: method and ParamTyp bindings are null for ParameterType :-(
 				paramAsVarList = new ArrayList<VariableDeclaration>(1);
 				paramAsVarList.add(param);
-				visitVariablesDeclarations(node, param.getType(), paramAsVarList, context.topMethod());
+				fr.inria.verveine.core.gen.famix.Type varTyp = referedType(param.getType(), context.topMethod());
+				visitVariablesDeclarations(node, varTyp, paramAsVarList, context.topMethod());
 			}
 			return super.visit(node);
 		}
@@ -308,7 +306,8 @@
 	public boolean visit(FieldDeclaration node) {
 //		System.err.println("TRACE, DefVisiting FieldDeclaration");
 
-		for (StructuralEntity att : visitVariablesDeclarations(node, node.getType(), (List<VariableDeclaration>)node.fragments(), context.topClass()) ) {
+		fr.inria.verveine.core.gen.famix.Type varTyp = referedType(node.getType(), context.topClass());
+		for (StructuralEntity att : visitVariablesDeclarations(node, varTyp, (List<VariableDeclaration>)node.fragments(), context.topClass()) ) {
 			dico.addSourceAnchor(att, node);
 			dico.ensureFamixComment(node.getJavadoc(), att);
 		}
@@ -322,7 +321,8 @@
 		// we don't declare (local) variables that have a primitive type
 		// because we are assuming that the user is not interested in them 
 		if (! node.getType().isPrimitiveType()) {
-			for (StructuralEntity att : visitVariablesDeclarations(node, node.getType(), (List<VariableDeclaration>)node.fragments(), context.topMethod())) {
+			fr.inria.verveine.core.gen.famix.Type varTyp = referedType(node.getType(), context.topMethod());
+			for (StructuralEntity att : visitVariablesDeclarations(node, varTyp, (List<VariableDeclaration>)node.fragments(), context.topMethod())) {
 				dico.addSourceAnchor(att, node);
 			}
 		}
@@ -337,7 +337,8 @@
 		// we don't declare (local) variables that have a primitive type
 		// because we are assuming that the user is not interested in them 
 		if (! node.getType().isPrimitiveType()) {
-			for (StructuralEntity att : visitVariablesDeclarations(node, node.getType(), (List<VariableDeclaration>)node.fragments(), context.topMethod())) {
+			fr.inria.verveine.core.gen.famix.Type varTyp = referedType(node.getType(), context.topMethod());
+			for (StructuralEntity att : visitVariablesDeclarations(node, varTyp, (List<VariableDeclaration>)node.fragments(), context.topMethod())) {
 				dico.addSourceAnchor(att, node);
 			}
 		}
@@ -346,43 +347,26 @@
 	}
 
 	@SuppressWarnings("unchecked")
-	private Collection<StructuralEntity> visitVariablesDeclarations(ASTNode node, Type varTyp, List<VariableDeclaration> fragments, ContainerEntity ctxt) {
+	private Collection<StructuralEntity> visitVariablesDeclarations(ASTNode node, fr.inria.verveine.core.gen.famix.Type varTyp, List<VariableDeclaration> fragments, ContainerEntity ctxt) {
 		Collection<StructuralEntity> ret = new ArrayList<StructuralEntity>();
 
-		fr.inria.verveine.core.gen.famix.Type fmxTyp;
-		if (varTyp.isParameterizedType()) {
-			ITypeBinding parameterizedBnd = varTyp.resolveBinding();
-			ITypeBinding parameterizableBnd = (parameterizedBnd == null) ? null : parameterizedBnd.getErasure();
-			String tname = dico.findTypeName(varTyp);
-			ParameterizableClass tmpGeneric = null;
-			tmpGeneric = (ParameterizableClass) dico.ensureFamixClass(parameterizableBnd, tname, /*owner*/null, /*isGeneric*/true);
-
-			fmxTyp = dico.ensureFamixParameterizedType(parameterizedBnd, tname, tmpGeneric, /*owner*/ctxt);
-			for (Type targ : (List<Type>) ((ParameterizedType)varTyp).typeArguments()) {
-				fr.inria.verveine.core.gen.famix.Type fmxTArg = dico.ensureFamixType(targ.resolveBinding(), dico.findTypeName(targ), null, ctxt);
-				((fr.inria.verveine.core.gen.famix.ParameterizedType)fmxTyp).addArguments(fmxTArg);
-			}
-		}
-		else {
-			fmxTyp = dico.ensureFamixType(varTyp.resolveBinding(), dico.findTypeName(varTyp), /*owner*/null, ctxt);
-		}
 		for (VariableDeclaration vd : fragments) {
 			StructuralEntity fmx;
 			if (node instanceof MethodDeclaration) {
 				// creating the parameters of a method. In this case, 'fragment' is aList<SingleVariableDeclarationFragment> and 'varType' is null
-				fmx = dico.ensureFamixParameter(vd.resolveBinding(), vd.getName().getIdentifier(), fmxTyp, (Method)ctxt);
+				fmx = dico.ensureFamixParameter(vd.resolveBinding(), vd.getName().getIdentifier(), varTyp, (Method)ctxt);
 			}
 			else if (node instanceof FieldDeclaration) {
 				// creating a class' field
-				fmx = dico.ensureFamixAttribute(vd.resolveBinding(), vd.getName().getIdentifier(), fmxTyp, (fr.inria.verveine.core.gen.famix.Class) ctxt);
+				fmx = dico.ensureFamixAttribute(vd.resolveBinding(), vd.getName().getIdentifier(), varTyp, (fr.inria.verveine.core.gen.famix.Class) ctxt);
 			}
 			else if (node instanceof VariableDeclarationExpression) {
 				// creating a method's local variable
-				fmx = dico.ensureFamixLocalVariable(vd.resolveBinding(), vd.getName().getIdentifier(), fmxTyp, (Method) ctxt);
+				fmx = dico.ensureFamixLocalVariable(vd.resolveBinding(), vd.getName().getIdentifier(), varTyp, (Method) ctxt);
 			}
 			else if (node instanceof VariableDeclarationExpression) {
 				// creating a method's local variable
-				fmx = dico.ensureFamixLocalVariable(vd.resolveBinding(), vd.getName().getIdentifier(), fmxTyp, (Method) ctxt);
+				fmx = dico.ensureFamixLocalVariable(vd.resolveBinding(), vd.getName().getIdentifier(), varTyp, (Method) ctxt);
 			}
 			else {
 				fmx = null;
@@ -397,6 +381,37 @@
 		return ret;
 	}
 
+	/**
+	 * @param typ
+	 * @param ctxt
+	 * @return
+	 */
+	private fr.inria.verveine.core.gen.famix.Type referedType(Type typ, ContainerEntity ctxt) {
+		fr.inria.verveine.core.gen.famix.Type fmxTyp = null;
+		
+		if (typ == null) {
+			return null;
+		}
+
+		if (typ.isParameterizedType()) {
+			ITypeBinding parameterizedBnd = typ.resolveBinding();
+			ITypeBinding parameterizableBnd = (parameterizedBnd == null) ? null : parameterizedBnd.getErasure();
+			String tname = dico.findTypeName(typ);
+			ParameterizableClass tmpGeneric = null;
+			tmpGeneric = (ParameterizableClass) dico.ensureFamixClass(parameterizableBnd, tname, /*owner*/null, /*isGeneric*/true);
+
+			fmxTyp = dico.ensureFamixParameterizedType(parameterizedBnd, tname, tmpGeneric, /*owner*/ctxt);
+			for (Type targ : (List<Type>) ((ParameterizedType)typ).typeArguments()) {
+				fr.inria.verveine.core.gen.famix.Type fmxTArg = dico.ensureFamixType(targ.resolveBinding(), dico.findTypeName(targ), null, ctxt);
+				((fr.inria.verveine.core.gen.famix.ParameterizedType)fmxTyp).addArguments(fmxTArg);
+			}
+		}
+		else {
+			fmxTyp = dico.ensureFamixType(typ.resolveBinding(), dico.findTypeName(typ), /*owner*/null, ctxt);
+		}
+		return fmxTyp;
+	}
+
 	// METRICS: CYCLO, NOS
 	
 	public boolean visit(AssertStatement node) {
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 110)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 111)
@@ -20,10 +20,12 @@
 
 import ch.akuhn.fame.Repository;
 import fr.inria.verveine.core.Dictionary;
+import fr.inria.verveine.core.gen.famix.Access;
 import fr.inria.verveine.core.gen.famix.AnnotationInstanceAttribute;
 import fr.inria.verveine.core.gen.famix.AnnotationType;
 import fr.inria.verveine.core.gen.famix.AnnotationTypeAttribute;
 import fr.inria.verveine.core.gen.famix.Attribute;
+import fr.inria.verveine.core.gen.famix.BehaviouralEntity;
 import fr.inria.verveine.core.gen.famix.Class;
 import fr.inria.verveine.core.gen.famix.Comment;
 import fr.inria.verveine.core.gen.famix.ContainerEntity;
@@ -55,6 +57,7 @@
 	public static final String SOURCE_FILENAME_PROPERTY = "verveine-source-filename";
 
 	public static final String OBJECT_NAME = "Object";
+	public static final String METACLASS_NAME = "Class";
 	public static final String OBJECT_PACKAGE_NAME = "java.lang";
 	public static final String ARRAYS_NAME = "default[]";
 	public static final String INSTANCE_INIT_BLOCK_NAME = "<InstanceInitializer>";
@@ -208,7 +211,7 @@
 		// --------------- name
 		if (name == null) {
 			if (! bnd.isAnonymous()) {
-				name = bnd.getErasure().getName();  // for generics, will give the "core" type name, for naormal type, won't change anything
+				name = bnd.getErasure().getName();  // for generics, will give the "core" type name, for normal type, won't change anything
 			}
 			else { // anonymous class
 				if (bnd.getSuperclass() != null) {
@@ -231,6 +234,14 @@
 			return ensureFamixClassObject(bnd);
 		}
 
+		// --------------- recover from name ?
+		for (Type candidate : this.getEntityByName(Type.class, name)) {
+			if ( checkAndMapClass(bnd, candidate) ) {
+				fmx = (Class) candidate;
+				break;
+			}
+		}
+
 		// --------------- owner
 		if (owner == null) {
 			IMethodBinding parentMtd = bnd.getDeclaringMethod();
@@ -275,13 +286,7 @@
 			sups.add( ensureFamixType(intbnd, /*name*/null, /*owner*/null, /*ctxt*/owner));
 		}
 
-		// --------------- recover from name ?
-		for (Type candidate : this.getEntityByName(Type.class, name)) {
-			if ( checkAndMapClass(bnd, candidate) ) {
-				fmx = (Class) candidate;
-				break;
-			}
-		}
+		// ---------------- create 
 		if (fmx == null) {
 			if (isGeneric) {
 				fmx = super.ensureFamixParameterizableClass(bnd, name, owner);
@@ -308,8 +313,14 @@
 		return fmx;
 	}
 
+/*	public ParameterizableClass ensureFamixParameterizableType(ITypeBinding bnd, String name, ContainerEntity owner) {
+		ParameterizableClass fmx = null;
+		
+		return fmx;
+	}*/
+	
 	public ParameterizedType ensureFamixParameterizedType(ITypeBinding bnd, String name, ParameterizableClass generic, ContainerEntity owner) {
-		ParameterizedType fmx = null;
+			ParameterizedType fmx = null;
 
 		// if Binding is null, we can only rely on provided parameters, so lets do it now and return
 		if (bnd == null) {
@@ -355,7 +366,12 @@
 
 		// --------------- generic
 		if (generic == null) {
-			generic = (ParameterizableClass) ensureFamixClass(bnd.getErasure(), name, owner, /*isGeneric*/true);
+			String genName = name;
+			int i = name.indexOf('<');
+			if (i > 0) {
+				genName = name.substring(0, i);
+			}
+			generic = (ParameterizableClass) ensureFamixClass(bnd.getErasure(), genName, owner, /*isGeneric*/true);
 		}
 
 		// --------------- recover from name ?
@@ -1302,6 +1318,15 @@
 		return fa;
 	}
 
+	public Access fieldAccess(BehaviouralEntity accessor, Attribute accessed, boolean isWrite, Access lastAccess) {
+		Access ret = null;
+		// TODO could be accessing annotation type attribute
+		if ( (accessor != null) && (accessed != null) ) {
+			ret = super.addFamixAccess(accessor, accessed, isWrite, lastAccess);
+		}
+		return ret;
+	}
+
 	/**
 	 * Creates or recovers a stub Famix Method
 	 * @param name of the method
@@ -1333,19 +1358,23 @@
 		
 		if (fmx != null) {
 			fmx.setContainer( ensureFamixNamespaceJavaLang(null));
-			
-			fmx.setIsAbstract(Boolean.FALSE);
-			fmx.setIsFinal(Boolean.FALSE);
-			fmx.setIsInterface(Boolean.FALSE);
-			fmx.setIsPrivate(Boolean.FALSE);
-			fmx.setIsProtected(Boolean.FALSE);
-			fmx.setIsPublic(Boolean.TRUE);
 		}
 		// Note: "Object" has no superclass
 
 		return fmx;
 	}
 
+	public fr.inria.verveine.core.gen.famix.Class ensureFamixMetaClass(ITypeBinding bnd) {
+		Namespace javaLang = ensureFamixNamespaceJavaLang( (bnd == null) ? null : bnd.getPackage());
+		fr.inria.verveine.core.gen.famix.Class fmx =  ensureFamixClass(bnd, METACLASS_NAME, javaLang, /*isGeneric*/true);
+
+		if ( (fmx != null) && (fmx.getSuperInheritances() == null) ) {
+			ensureFamixInheritance(ensureFamixClassObject(null), fmx, null);
+		}
+
+		return fmx;
+	}
+	
 	/**
 	 * Creates or recovers the Famix Class that will own all stub methods (for which the real owner is unknown)
 	 * @return a Famix class
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 33)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 34)
@@ -385,7 +385,6 @@
 					accessed.setParentType(dico.ensureFamixClassArray());
 				}
 			}
-			//context.setLastAccess( dico.ensureFamixInvocation(sender, invoked, receiver, context.getLastAccess) );
 		}
 	}
 
