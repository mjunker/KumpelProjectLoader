Index: branches/postMoose4_3Refactoring/verveine.extractor.java/memusage.txt
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/memusage.txt	(revision 99)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/memusage.txt	(revision 100)
@@ -1,54 +0,0 @@
-
-memory usage for Eclipse 3.1
-$ time ./verveinej3_1.sh 2> toto.log >&2
-$ time ./verveinej-mono-3_1.sh 2> toto.log >&2
-
-120.51user 3.31system 2:25.05elapsed 85%CPU 
-(0avgtext+0avgdata 9.646.080maxresident)k
-292144inputs+221248outputs (2356major+700607minor)pagefaults 0swaps
-8522 toto.log
-
-120.79user 2.95system 1:53.51elapsed 109%CPU 
-(0avgtext+0avgdata 9.175.040maxresident)k
-142416inputs+220976outputs (87major+622960minor)pagefaults 0swaps
-8522 toto.log
-3.340.182 output.mse
-
-112.33user 4.35system 1:40.17elapsed 116%CPU 
-(0avgtext+0avgdata 9.777.152maxresident)k
-68760inputs+221504outputs (190major+682907minor)pagefaults 0swaps
-
-$ for i in `grep FAMIX output.mse | sed -e 's/ (id:.*//' | sed -e 's/^        (//' | sort -u`; do echo -n "$i   "; grep -c $i output.mse ; done
-FAMIX.Access   60984
-FAMIX.Attribute   27473
-FAMIX.CaughtException   3690
-FAMIX.Class   7906
-FAMIX.Comment   37000
-FAMIX.DeclaredException   3848
-FAMIX.FileAnchor   124493
-FAMIX.ImplicitVariable   4996
-FAMIX.Inheritance   7136
-FAMIX.Invocation   169940
-FAMIX.LocalVariable   37753
-FAMIX.Method   53602
-FAMIX.Namespace   377
-FAMIX.Parameter   52480
-FAMIX.PrimitiveType   9
-FAMIX.Reference   30799
-FAMIX.ThrownException   2414
-FAMIX.UnknownVariable   23090
-FAMIX   647990
-
-$ grep -c 'null binding' toto.log 
-8413
-
-
-=======================================
-SEPARATE
-
-2041.59user 115.58system 27:47.42elapsed 129%CPU 
-(0avgtext+0avgdata 7.086.080maxresident)k
-135200inputs+6149832outputs (110major+16978083minor)pagefaults 0swaps
-
-
-FAMIX.Attribute   27520
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/.classpath
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/.classpath	(revision 99)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/.classpath	(revision 100)
@@ -2,7 +2,7 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
-	<classpathentry kind="lib" path="lib/org.eclipse.jdt.core_3.6.0.v_A58.jar" sourcepath="/org.eclipse.jdt.core/">
+	<classpathentry kind="lib" path="lib/org.eclipse.jdt.core_3.6.0.v_A58.jar" sourcepath="/org.eclipse.jdt.core/dom">
 		<attributes>
 			<attribute name="javadoc_location" value="jar:file:/usr/local/share/eclipse-3_6/plugins/isv-3.2.1-r321_v20060907.jar!/reference/api"/>
 		</attributes>
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 99)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 100)
@@ -165,7 +165,7 @@
 	public void testNamedEntities() {
 		JavaDictionary dico = new JavaDictionary(repo);
 		
-		assertNotSame(dico.createFamixClass(null, A_CLASS_NAME, null),dico.createFamixClass(null, A_CLASS_NAME, null));
+		assertNotSame(dico.ensureFamixClass(null, A_CLASS_NAME, null),dico.ensureFamixClass(null, A_CLASS_NAME, null));
 		
 		Namespace javaLang = dico.ensureFamixNamespaceJavaLang(null);
 		assertEquals( JavaDictionary.OBJECT_PACKAGE_NAME, javaLang.getName());
@@ -177,9 +177,9 @@
 		assertEquals(0, obj.getSuperInheritances().size());
 		assertSame(javaLang, obj.getContainer());
 		
-		fr.inria.verveine.core.gen.famix.Class fmx = dico.createFamixClassStubOwner();
+		fr.inria.verveine.core.gen.famix.Class fmx = dico.ensureFamixClassStubOwner();
 		assertEquals(JavaDictionary.STUB_METHOD_CONTAINER_NAME, fmx.getName());
-		assertSame(fmx, dico.createFamixClassStubOwner());
+		assertSame(fmx, dico.ensureFamixClassStubOwner());
 	}
 
 	@Test
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 99)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 100)
@@ -78,7 +78,7 @@
 		PackageDeclaration pckg = node.getPackage();
 		Namespace fmx = null;
 		if (pckg==null) {
-			 fmx = dico.createFamixNamespaceDefault();
+			 fmx = dico.ensureFamixNamespaceDefault();
 		}
 		else {
 			fmx = (Namespace)dico.getEntityByKey(pckg.resolveBinding());
@@ -123,7 +123,7 @@
 			importName = dico.removeLastName(importName);
 		}
 		Namespace fmxDest = dico.ensureFamixNamespace( (IPackageBinding)importBnd, importName);
-		context.setLastReference( dico.createFamixReference(fmxSrc, fmxDest, context.getLastReference()) );
+		context.setLastReference( dico.ensureFamixReference(fmxSrc, fmxDest, context.getLastReference()) );
 		
 		return super.visit(node);
 	}
@@ -166,7 +166,7 @@
 				return false;
 			}
 		}
-		else {
+		else {// TODO appears to be a new: class reference
 			return super.visit(node);
 		}
 	}
@@ -190,9 +190,9 @@
 
 			// Exceptions
 			for (Name excepName : (List<Name>)node.thrownExceptions()) {
-				fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.createFamixClass(excepName.resolveTypeBinding(), excepName.getFullyQualifiedName(), null);
+				fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.ensureFamixClass(excepName.resolveTypeBinding(), excepName.getFullyQualifiedName(), null);
 				if (excepFmx != null) {
-					dico.createFamixDeclaredException(meth, excepFmx);
+					dico.ensureFamixDeclaredException(meth, excepFmx);
 				}
 			}
 			return super.visit(node);
@@ -230,7 +230,7 @@
 
 	@SuppressWarnings({ "static-access" })
 	public boolean visit(SuperMethodInvocation node) {
-		methodInvocation(node.resolveMethodBinding(), node.getName().getFullyQualifiedName(), this.dico.createFamixImplicitVariable(this.context.topClass(), dico.SUPER_NAME));
+		methodInvocation(node.resolveMethodBinding(), node.getName().getFullyQualifiedName(), this.dico.ensureFamixImplicitVariable(this.context.topClass(), dico.SUPER_NAME));
 		return super.visit(node);
 	}
 
@@ -244,18 +244,7 @@
 		BehaviouralEntity sender = this.context.topMethod();
 		if (sender != null) {
 			Method invoked = this.dico.ensureFamixMethod(calledBnd, calledName, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, null);  // cast needed to desambiguate the call
-			/* TODO old code, may not be valid anymore ...
-			   if (invoked == null) {
-				if (receiver != null && receiver.getName().equals("self")) {
-					receiver = this.context.topClass();
-				}
-				invoked = this.dico.ensureFamixMethod(calledName, receiver, list);
-				//invoked = this.dico.ensureFamixStubMethod(name);
-			}
-			if (invoked == null) {
-				invoked = this.dico.ensureFamixStubMethod(calledName);
-			}*/
-			context.setLastInvocation( dico.createFamixInvocation(sender, invoked, receiver, context.getLastInvocation()) );
+			context.setLastInvocation( dico.ensureFamixInvocation(sender, invoked, receiver, context.getLastInvocation()) );
 		}
 	}
 
@@ -283,13 +272,13 @@
 		if (meth != null) {
 			fr.inria.verveine.core.gen.famix.Class excepFmx = null;
 			if (excepClass instanceof SimpleType) {
-				excepFmx = this.dico.createFamixClass(excepClass.resolveBinding(), ((SimpleType) excepClass).getName().getFullyQualifiedName(), null);
+				excepFmx = this.dico.ensureFamixClass(excepClass.resolveBinding(), ((SimpleType) excepClass).getName().getFullyQualifiedName(), null);
 			}
 			else if (excepClass instanceof QualifiedType) {
-				excepFmx = this.dico.createFamixClass(excepClass.resolveBinding(), ((QualifiedType) excepClass).getName().getIdentifier(), null);
+				excepFmx = this.dico.ensureFamixClass(excepClass.resolveBinding(), ((QualifiedType) excepClass).getName().getIdentifier(), null);
 			}
 			if (excepFmx != null) {
-				dico.createFamixCaughtException(meth, excepFmx);
+				dico.ensureFamixCaughtException(meth, excepFmx);
 			}
 		}
 
@@ -299,9 +288,9 @@
 	@Override
 	public boolean visit(ThrowStatement node) {
 		Method meth = this.context.topMethod();
-		fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.createFamixClass(node.getExpression().resolveTypeBinding(), null, null);
+		fr.inria.verveine.core.gen.famix.Class excepFmx = this.dico.ensureFamixClass(node.getExpression().resolveTypeBinding(), null, null);
 		if (excepFmx != null) {
-			dico.createFamixThrownException(meth, excepFmx);
+			dico.ensureFamixThrownException(meth, excepFmx);
 		}
 		return super.visit(node);
 	}
@@ -316,7 +305,7 @@
 	private NamedEntity getReceiver(Expression expr) {
 		// msg(), same as ThisExpression
 		if (expr == null) {
-			return this.dico.createFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
+			return this.dico.ensureFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
 		}
 
 		// array[i].msg()
@@ -390,12 +379,12 @@
 			if (bnd instanceof ITypeBinding) {
 				// msg() is a static method of Name
 				//TODO why returning a variable here? Should not it be the class itself?
-				ret = dico.createFamixUnknownVariable( dico.ensureFamixType((ITypeBinding)bnd, null, null, context.top()), bnd.getName());
+				ret = dico.ensureFamixUnknownVariable( dico.ensureFamixType((ITypeBinding)bnd, null, null, context.top()), bnd.getName());
 			}
 			else if (bnd instanceof IVariableBinding) {
 				String varName = ( ((Name)expr).isSimpleName() ? ((SimpleName)expr).getFullyQualifiedName() : ((QualifiedName)expr).getName().getIdentifier());
 				if ( ((IVariableBinding)bnd).isField() ) {
-					ret = dico.createFamixAttribute(bnd, varName, null, null);
+					ret = dico.ensureFamixAttribute(bnd, varName, null, null);//TODO should be ensureAttribute
 				}
 				else if ( ((IVariableBinding)bnd).isParameter() ) {
 					ret = dico.ensureFamixParameter( (IVariableBinding)bnd, varName, null, context.topMethod());
@@ -437,7 +426,7 @@
 		
 		// this.msg()
 		else if (expr instanceof ThisExpression) {
-			return this.dico.createFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
+			return this.dico.ensureFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
 		}
 
 		// type.class.msg()
@@ -463,7 +452,7 @@
 		if (accessor != null) {
 			Attribute accessed = this.dico.ensureFamixAttribute(bnd, null, null, null);
 			if (accessed != null) {
-				context.setLastAccess( dico.createFamixAccess(accessor, accessed, /*isWrite*/false, context.getLastAccess()) );
+				context.setLastAccess( dico.ensureFamixAccess(accessor, accessed, /*isWrite*/false, context.getLastAccess()) );
 				if ( (accessed.getParentType() == null) && (accessed.getName().equals("length")) ) {
 					accessed.setParentType(dico.ensureFamixClassArray());
 				}
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 99)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 100)
@@ -88,7 +88,7 @@
 		Namespace fmx = null;
 		PackageDeclaration pckg = node.getPackage();
 		if (pckg==null) {
-			fmx = dico.createFamixNamespaceDefault();
+			fmx = dico.ensureFamixNamespaceDefault();
 		}
 		else {
 			fmx = dico.ensureFamixNamespace(pckg.resolveBinding(), pckg.getName().getFullyQualifiedName());
@@ -112,7 +112,7 @@
 	public boolean visit(TypeDeclaration node) {
 		// Can only be a class or interface declaration
 
-		//System.err.println("TRACE, DefVisiting TypeDeclaration: "+node.getName().getIdentifier());
+		System.err.println("TRACE, DefVisiting TypeDeclaration: "+node.getName().getIdentifier());
 		ITypeBinding bnd = node.resolveBinding();
 		@SuppressWarnings("unchecked")
 		List<TypeParameter> tparams = node.typeParameters();
@@ -123,11 +123,11 @@
 			this.context.pushClass(fmx);
 
 			dico.addSourceAnchor(fmx, node);
-			dico.createFamixComment(node.getJavadoc(), fmx);
+			dico.ensureFamixComment(node.getJavadoc(), fmx);
 			
 			for (TypeParameter tp : tparams) {
 				// if there is a type parameter, then fmx will be a Famix ParameterizableClass
-				ParameterType fmxParam = dico.createFamixParameterType( tp.resolveBinding(), tp.getName().getIdentifier(), (ParameterizableClass)fmx); // note owner of the ParameterType is the ParameterizableClass
+				ParameterType fmxParam = dico.ensureFamixParameterType( tp.resolveBinding(), tp.getName().getIdentifier(), (ParameterizableClass)fmx); // note owner of the ParameterType is the ParameterizableClass
 				if (fmxParam != null) {
 					fmxParam.setIsStub(false);
 				}
@@ -146,7 +146,7 @@
 	}
 
 	public boolean visit(ClassInstanceCreation node) {
-		//System.err.println("TRACE, DefVisiting ClassInstanceCreation");
+		System.err.println("TRACE, DefVisiting ClassInstanceCreation");
 		fr.inria.verveine.core.gen.famix.Class fmx = null;
 		AnonymousClassDeclaration decl = node.getAnonymousClassDeclaration(); 
 		if (decl != null) {
@@ -174,7 +174,7 @@
 	}
 
 	public boolean visit(AnnotationTypeDeclaration node) {
-		//System.err.println("TRACE, DefVisiting AnnotationTypeDeclaration: "+node.getName().getIdentifier());
+		System.err.println("TRACE, DefVisiting AnnotationTypeDeclaration: "+node.getName().getIdentifier());
 		ITypeBinding bnd = node.resolveBinding();
 		AnnotationType fmx = dico.ensureFamixAnnotationType(bnd, node.getName().getIdentifier(), context.top());
 		if (fmx != null) {
@@ -195,7 +195,7 @@
 	}
 
 	public boolean visit(AnnotationTypeMemberDeclaration node) {
-		//System.err.println("TRACE, DefVisiting AnnotationTypeMemberDeclaration: "+node.getName().getIdentifier());
+		System.err.println("TRACE, DefVisiting AnnotationTypeMemberDeclaration: "+node.getName().getIdentifier());
 		IMethodBinding bnd = node.resolveBinding();
 		AnnotationTypeAttribute fmx = dico.ensureFamixAnnotationTypeAttribute(bnd, node.getName().getIdentifier(), context.topAnnotationType());
 		if (fmx != null) {
@@ -217,8 +217,8 @@
 
 	@SuppressWarnings("unchecked")
 	public boolean visit(EnumDeclaration node) {
-//		System.err.println("TRACE, DefVisiting EnumDeclaration: "+node.getName().getIdentifier());
-		fr.inria.verveine.core.gen.famix.Enum fmx = dico.createFamixEnum(node.resolveBinding(), node.getName().getIdentifier(), context.top());
+		System.err.println("TRACE, DefVisiting EnumDeclaration: "+node.getName().getIdentifier());
+		fr.inria.verveine.core.gen.famix.Enum fmx = dico.ensureFamixEnum(node.resolveBinding(), node.getName().getIdentifier(), context.top());
 		if (fmx != null) {
 			fmx.setIsStub(Boolean.FALSE);
 			
@@ -235,7 +235,7 @@
 
 	@SuppressWarnings("unchecked")
 	public boolean visit(MethodDeclaration node) {
-//		System.err.println("TRACE, DefVisiting MethodDeclaration: "+node.getName().getIdentifier());
+		System.err.println("TRACE, DefVisiting MethodDeclaration: "+node.getName().getIdentifier());
 		
 		// some info needed to create the Famix Method
 		IMethodBinding bnd = node.resolveBinding();
@@ -273,7 +273,7 @@
 			}
 
 			dico.addSourceAnchor(fmx, node);
-			dico.createFamixComment(node.getJavadoc(), fmx);
+			dico.ensureFamixComment(node.getJavadoc(), fmx);
 
 			// creating the method's parameters
 			List<VariableDeclaration> paramAsVarList;
@@ -308,18 +308,18 @@
 	
 	@SuppressWarnings({ "unchecked" })
 	public boolean visit(FieldDeclaration node) {
-//		System.err.println("TRACE, DefVisiting FieldDeclaration");
+		System.err.println("TRACE, DefVisiting FieldDeclaration");
 
 		for (StructuralEntity att : visitVariablesDeclarations(node, node.getType(), (List<VariableDeclaration>)node.fragments(), context.topClass()) ) {
 			dico.addSourceAnchor(att, node);
-			dico.createFamixComment(node.getJavadoc(), att);
+			dico.ensureFamixComment(node.getJavadoc(), att);
 		}
 		return super.visit(node);
 	}
 
 	@SuppressWarnings("unchecked")
 	public boolean visit(VariableDeclarationExpression node) {
-		//System.err.println("TRACE, DefVisiting VariableDeclarationExpression");
+		System.err.println("TRACE, DefVisiting VariableDeclarationExpression");
 
 		// we don't declare (local) variables that have a primitive type
 		// because we are assuming that the user is not interested in them 
@@ -334,7 +334,7 @@
 
 	@SuppressWarnings("unchecked")
 	public boolean visit(VariableDeclarationStatement node) {
-		//System.err.println("TRACE, DefVisiting VariableDeclarationStatement");
+		System.err.println("TRACE, DefVisiting VariableDeclarationStatement");
 
 		// we don't declare (local) variables that have a primitive type
 		// because we are assuming that the user is not interested in them 
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 99)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 100)
@@ -70,7 +70,7 @@
 
 	/**
 	 * Returns a Famix Namespace associated with its IPackageBinding and/or name.
-	 * The Entity is created if it does not exist (see also {@link Dictionary#createFamixNamespace(Object, String)}).
+	 * The Entity is created if it does not exist (see also {@link Dictionary#ensureFamixNamespace(Object, String)}).
 	 * Also creates or recovers recusively it's parent namespaces.<br>
 	 * At least one of <b>bnd</b> and <b>name</b> must be non null.
 	 * @param bnd -- the JDT Binding that may be used as a uniq key to recover this namespace
@@ -90,7 +90,7 @@
 			 * (for example when creating parent packages of a package we have a binding for).
 			 * Because the preferred solution in Moose is to give their simple names to packages, they must be post-processed when
 			 * all is said and done. */
-			fmx = createFamixNamespace( bnd, name);
+			fmx = super.ensureFamixNamespace( bnd, name);
 			parent = ensureFamixNamespace(null, removeLastName(name));
 			// set the parentscope relationship
 			if ( (parent != null) && (fmx != null) && (fmx.getParentScope() == null)) {
@@ -102,7 +102,7 @@
 	}
 
 	/**
-	 * Recovers or creates a Famix Type (see also {@link Dictionary#createFamixType(Object, String, ContainerEntity)}
+	 * Recovers or creates a Famix Type (see also {@link Dictionary#ensureFamixType(Object, String, ContainerEntity)}
 	 */
 	public Type ensureFamixType(ITypeBinding bnd, String name, ContainerEntity owner, ContainerEntity ctxt) {
 		Type fmx = null;
@@ -117,10 +117,10 @@
 			}
 
 			if ( (owner != null) && (owner instanceof ParameterizableClass) ) {
-				return createFamixParameterType(null, name, (ParameterizableClass) owner);
+				return ensureFamixParameterType(null, name, (ParameterizableClass) owner);
 			}
 			else {
-				return super.createFamixType(null, name, owner);
+				return super.ensureFamixType(null, name, owner);
 			}
 		}
 
@@ -136,15 +136,15 @@
 		}
 
 		if (bnd.isPrimitive()) {
-			return createFamixPrimitiveType(bnd, name);
+			return ensureFamixPrimitiveType(bnd, name);
 		}
 
 		if (bnd.isEnum()) {
-			return createFamixEnum(bnd, name, owner);
+			return ensureFamixEnum(bnd, name, owner);
 		}
 		
 		if (bnd.isTypeVariable() ) {
-			return createFamixParameterType(bnd, name, (ParameterizableClass) owner);
+			return ensureFamixParameterType(bnd, name, (ParameterizableClass) owner);
 		}
 
 		if (bnd.isRawType() || bnd.isGenericType()) {
@@ -161,13 +161,14 @@
 		}
 
 
-		return super.createFamixType(bnd, name, owner);
+		return super.ensureFamixType(bnd, name, owner);
 	}
 
+
 	/**
 	 * Returns a Famix Class associated with the ITypeBinding.
 	 * The Entity is created if it does not exist.<br>
-	 * Params: see {@link Dictionary#createFamixClass(Object, String, ContainerEntity)}.
+	 * Params: see {@link Dictionary#ensureFamixClass(Object, String, ContainerEntity)}.
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(ITypeBinding bnd, String name, ContainerEntity owner, boolean isGeneric) {
@@ -179,14 +180,14 @@
 				return null;
 			}
 			if (owner == null) {
-				owner = createFamixNamespaceDefault();
+				owner = ensureFamixNamespaceDefault();
 			}
 			
 			if (isGeneric) {
-				return super.createFamixParameterizableClass(null, name, owner);
+				return super.ensureFamixParameterizableClass(null, name, owner);
 			}
 			else {
-				return super.createFamixClass(null, name, owner);
+				return super.ensureFamixClass(null, name, owner);
 			}
 		}
 
@@ -240,7 +241,13 @@
 			else {
 				ITypeBinding parentClass = bnd.getDeclaringClass();
 				if (parentClass != null) {
-					owner = this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null);
+					Type tmpOwn = this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null);
+					if (tmpOwn instanceof ParameterizedType) {
+						owner = ((ParameterizedType) tmpOwn).getParameterizableClass(); 
+					}
+					else {
+						owner = tmpOwn;
+					}
 				}
 				else {
 					IPackageBinding parentPckg = bnd.getPackage();
@@ -248,7 +255,7 @@
 						owner = this.ensureFamixNamespace(parentPckg, null);
 					}
 					else {
-						owner = this.createFamixNamespaceDefault();
+						owner = this.ensureFamixNamespaceDefault();
 					}
 				}
 			}
@@ -278,10 +285,10 @@
 		}
 		if (fmx == null) {
 			if (isGeneric) {
-				fmx = super.createFamixParameterizableClass(bnd, name, owner);
+				fmx = super.ensureFamixParameterizableClass(bnd, name, owner);
 			}
 			else {
-				fmx = super.createFamixClass(bnd, name, owner);
+				fmx = super.ensureFamixClass(bnd, name, owner);
 			}
 		}
 		
@@ -290,7 +297,7 @@
 			fmx.setIsInterface(bnd.isInterface());
 			Inheritance lastInheritance = null;
 			for (fr.inria.verveine.core.gen.famix.Class sup : sups) {
-				lastInheritance = createFamixInheritance(sup, fmx, lastInheritance);
+				lastInheritance = ensureFamixInheritance(sup, fmx, lastInheritance);
 			}
 			setNamedEntityModifiers(fmx, bnd.getDeclaredModifiers());
 			if (fmx.getIsAbstract()) {
@@ -310,7 +317,7 @@
 			if (name == null) {
 				return null;
 			}
-			return super.createFamixParameterizedType(null, name, generic, owner);
+			return super.ensureFamixParameterizedType(null, name, generic, owner);
 		}
 
 		// --------------- name
@@ -327,7 +334,13 @@
 			else {
 				ITypeBinding parentClass = bnd.getDeclaringClass();
 				if (parentClass != null) {
-					owner = this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null); //parentClass.isGenericType());
+					Type tmpOwn = this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null);
+					if (tmpOwn instanceof ParameterizedType) {
+						owner = ((ParameterizedType) tmpOwn).getParameterizableClass(); 
+					}
+					else {
+						owner = tmpOwn;
+					}
 				}
 				else {
 					IPackageBinding parentPckg = bnd.getPackage();
@@ -335,7 +348,7 @@
 						owner = this.ensureFamixNamespace(parentPckg, null);
 					}
 					else {
-						owner = this.createFamixNamespaceDefault();
+						owner = this.ensureFamixNamespaceDefault();
 					}
 				}
 			}
@@ -350,13 +363,13 @@
 		}
 
 		if (fmx == null) {
-			fmx = super.createFamixParameterizedType(bnd, name, generic, owner);
+			fmx = super.ensureFamixParameterizedType(bnd, name, generic, owner);
 		}
 
 		return fmx;
 	}
 
-	public PrimitiveType createFamixPrimitiveType(ITypeBinding bnd, String name) {
+	public PrimitiveType ensureFamixPrimitiveType(ITypeBinding bnd, String name) {
 		if (name == null) {
 			if (bnd == null) {
 				return null;
@@ -365,10 +378,10 @@
 				name = bnd.getName();
 			}
 		}
-		return super.createFamixPrimitiveType(bnd, name);
+		return super.ensureFamixPrimitiveType(bnd, name);
 	}
 
-	public fr.inria.verveine.core.gen.famix.Enum createFamixEnum(ITypeBinding bnd, String name, ContainerEntity owner) {
+	public fr.inria.verveine.core.gen.famix.Enum ensureFamixEnum(ITypeBinding bnd, String name, ContainerEntity owner) {
 		fr.inria.verveine.core.gen.famix.Enum fmx = null;
 
 		// if Binding is null, we can only rely on provided parameters, so lets do it now and return
@@ -376,7 +389,7 @@
 			if (name == null) {
 				return null;
 			}
-			return super.createFamixEnum(null, name, owner);
+			return super.ensureFamixEnum(null, name, owner);
 		}
 
 		// --------------- name
@@ -393,7 +406,7 @@
 			else {
 				ITypeBinding parentClass = bnd.getDeclaringClass();
 				if (parentClass != null) {
-					owner = this.createFamixClass(parentClass, null, null);
+					owner = this.ensureFamixClass(parentClass, null, null);
 				}
 				else {
 					IPackageBinding parentPckg = bnd.getPackage();
@@ -401,7 +414,7 @@
 						owner = this.ensureFamixNamespace(parentPckg, null);
 					}
 					else {
-						owner = this.createFamixNamespaceDefault();
+						owner = this.ensureFamixNamespaceDefault();
 					}
 				}
 			}
@@ -416,7 +429,7 @@
 		}
 
 		if (fmx == null) {
-			fmx = super.createFamixEnum(bnd, name, owner);
+			fmx = super.ensureFamixEnum(bnd, name, owner);
 		}
 		
 		if (fmx!=null) {
@@ -438,7 +451,7 @@
 			if (owner == null) {
 				return null;  // what would be the interest of creating an EnumValue without a declaring Enum type? 
 			}
-			return super.createFamixEnumValue(null, name, owner);
+			return super.ensureFamixEnumValue(null, name, owner);
 		}
 
 		// --------------- name
@@ -448,7 +461,7 @@
 
 		// --------------- owner
 		if (owner == null) {
-			owner = createFamixEnum(bnd.getDeclaringClass(), null, null);
+			owner = ensureFamixEnum(bnd.getDeclaringClass(), null, null);
 		}
 		
 		// --------------- recover from name ?
@@ -459,7 +472,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = super.createFamixEnumValue(bnd, name, owner);
+			fmx = super.ensureFamixEnumValue(bnd, name, owner);
 		}
 		
 		if (fmx!=null) {
@@ -478,7 +491,7 @@
 			if (name == null) {
 				return null;
 			}
-			return super.createFamixAnnotationType(null, name, owner);
+			return super.ensureFamixAnnotationType(null, name, owner);
 		}
 
 		// --------------- name
@@ -493,7 +506,7 @@
 				owner = this.ensureFamixNamespace(parentPckg, null);
 			}
 			else {
-				owner = this.createFamixNamespaceDefault();
+				owner = this.ensureFamixNamespaceDefault();
 			}
 		}
 
@@ -506,7 +519,7 @@
 		}
 
 		if (fmx == null) {
-			fmx = super.createFamixAnnotationType(bnd, name, owner);
+			fmx = super.ensureFamixAnnotationType(bnd, name, owner);
 		}
 		
 		if (fmx!=null) {
@@ -525,7 +538,7 @@
 			if (name == null) {
 				return null;
 			}
-			return super.createFamixAnnotationTypeAttribute(null, name, owner);
+			return super.ensureFamixAnnotationTypeAttribute(null, name, owner);
 		}
 
 		// --------------- name
@@ -550,7 +563,7 @@
 		}
 
 		if (fmx == null) {
-			fmx = super.createFamixAnnotationTypeAttribute(bnd, name, owner);
+			fmx = super.ensureFamixAnnotationTypeAttribute(bnd, name, owner);
 		}
 		
 		if (fmx!=null) {
@@ -561,6 +574,11 @@
 		return fmx;
 	}
 
+	/**
+	 * Adds possible annotation instances to a Famix NamedEntity with the given binding
+	 * @param bnd
+	 * @param fmx
+	 */
 	public void addFamixAnnotationInstances(IBinding bnd, NamedEntity fmx) {
 		for (IAnnotationBinding annBnd : bnd.getAnnotations()) {
 			AnnotationType annType = ensureFamixAnnotationType(annBnd.getAnnotationType(), null, null);
@@ -574,7 +592,7 @@
 		}
 	}
 
-	public ParameterType createFamixParameterType(ITypeBinding bnd,	String name, ParameterizableClass owner) {
+	public ParameterType ensureFamixParameterType(ITypeBinding bnd,	String name, ParameterizableClass owner) {
 		ParameterType fmx = null;
 
 		// if Binding is null, we can only rely on provided parameters, so lets do it now and return
@@ -583,10 +601,10 @@
 				return null;
 			}
 			if (owner == null) {
-				return super.createFamixParameterType(null, name, null);
+				return super.ensureFamixParameterType(null, name, null);
 			}
 			
-			return super.createFamixParameterType(null, name, owner);
+			return super.ensureFamixParameterType(null, name, owner);
 		}
 
 		fmx = (ParameterType)getEntityByKey(bnd);	// to avoid useless computations if we can
@@ -615,7 +633,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = super.createFamixParameterType(bnd, name, owner);
+			fmx = super.ensureFamixParameterType(bnd, name, owner);
 		}
 
 		return fmx;
@@ -677,10 +695,6 @@
 			return false;
 		}
 		
-		if ( bnd.isClass() || bnd.isInterface() || bnd.isEnum() ) {
-			return checkAndMapClass(bnd, (Type) candidate);
-		}
-
 		if ( bnd.isPrimitive() && (candidate instanceof PrimitiveType) ) {
 			// names are equal so it's OK
 			mapToKey.put(bnd, candidate);
@@ -696,7 +710,12 @@
 				return false;
 			}
 		}
-		
+
+		// Annotation are interfaces too, so we should check this one after isAnnotation
+		if ( bnd.isClass() || bnd.isInterface() || bnd.isEnum() ) {
+			return checkAndMapClass(bnd, (Type) candidate);
+		}
+
 		return false;
 	}
 
@@ -892,7 +911,7 @@
 	/**
 	 * Returns a Famix Method associated with the IMethodBinding. The Entity is created if it does not exist.
 	 * The Entity is created if it does not exist.
-	 * Params: see {@link Dictionary#createFamixMethod(Object, String, String, Type, Type)}.
+	 * Params: see {@link Dictionary#ensureFamixMethod(Object, String, String, Type, Type)}.
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public Method ensureFamixMethod(IMethodBinding bnd, String name, Collection<org.eclipse.jdt.core.dom.Type> paramTypes, Type ret, fr.inria.verveine.core.gen.famix.Class owner) {
@@ -931,9 +950,9 @@
 				sig = name + sig;
 			}
 			if (owner == null) {
-				owner= createFamixClassStubOwner();
+				owner= ensureFamixClassStubOwner();
 			}
-			return super.createFamixMethod(null, name, sig, ret, owner);
+			return super.ensureFamixMethod(null, name, sig, ret, owner);
 		}
 
 		// --------------- name
@@ -969,7 +988,13 @@
 		if (owner == null) {
 			ITypeBinding classBnd = bnd.getDeclaringClass();
 			if (classBnd != null) {
-				owner = (Class) ensureFamixType(classBnd, /*name*/null, /*owner*/null, /*ctxt*/null);  // classBnd.isGenericType());
+				Type tmpOwn = ensureFamixType(classBnd, /*name*/null, /*owner*/null, /*ctxt*/null);
+				if (tmpOwn instanceof ParameterizedType) {
+					owner = ((ParameterizedType) tmpOwn).getParameterizableClass();
+				}
+				else {
+					owner = (Class)tmpOwn; 
+				}
 			}
 		}
 		
@@ -981,7 +1006,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = createFamixMethod(bnd, name, sig, ret, owner);
+			fmx = ensureFamixMethod(bnd, name, sig, ret, owner);
 		}
 		
 		if (fmx!=null) {
@@ -1027,7 +1052,7 @@
 	/**
 	 * Returns a Famix Attribute associated with the IVariableBinding.
 	 * The Entity is created if it does not exist.<br>
-	 * Params: see {@link Dictionary#createFamixAttribute(Object, String, Type, Type)}.
+	 * Params: see {@link Dictionary#ensureFamixAttribute(Object, String, Type, Type)}.
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public Attribute ensureFamixAttribute(IVariableBinding bnd, String name, Type type, Type owner) {
@@ -1041,7 +1066,7 @@
 			if (owner == null) {
 				return null;  // what would be the interest of creating an attribute for which we ignore the declaring class? 
 			}
-			return super.createFamixAttribute(null, name, type, owner);
+			return super.ensureFamixAttribute(null, name, type, owner);
 		}
 
 		// --------------- name
@@ -1058,7 +1083,13 @@
 		if (owner == null) {
 			ITypeBinding classBnd = bnd.getDeclaringClass();
 			if (classBnd != null) {
-				owner = ensureFamixType(classBnd, /*name*/null, /*owner*/null, /*ctxt*/null);   // classBnd.isGenericType());
+				Type tmpOwn = ensureFamixType(classBnd, /*name*/null, /*owner*/null, /*ctxt*/null);
+				if (tmpOwn instanceof ParameterizedType) {
+					owner = ((ParameterizedType) tmpOwn).getParameterizableClass(); 
+				}
+				else {
+					owner = tmpOwn;
+				}
 			}
 		}
 		
@@ -1070,7 +1101,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = super.createFamixAttribute(bnd, name, type, owner);
+			fmx = super.ensureFamixAttribute(bnd, name, type, owner);
 		}
 		
 		if (fmx!=null) {
@@ -1103,7 +1134,7 @@
 	/**
 	 * Returns a Famix Parameter associated with the IVariableBinding.
 	 * The Entity is created if it does not exist.<br>
-	 * Params: see {@link Dictionary#createFamixParameter(Object, String, Type, fr.inria.verveine.core.gen.famix.BehaviouralEntity)}.
+	 * Params: see {@link Dictionary#ensureFamixParameter(Object, String, Type, fr.inria.verveine.core.gen.famix.BehaviouralEntity)}.
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public Parameter ensureFamixParameter(IVariableBinding bnd, String name, Type typ, Method owner) {
@@ -1157,7 +1188,7 @@
 	/**
 	 * Returns a Famix LocalVariable associated with the IVariableBinding.
 	 * The Entity is created if it does not exist.<br>
-	 * Params: see {@link Dictionary#createFamixLocalVariable(Object, String, Type, fr.inria.verveine.core.gen.famix.BehaviouralEntity)}
+	 * Params: see {@link Dictionary#ensureFamixLocalVariable(Object, String, Type, fr.inria.verveine.core.gen.famix.BehaviouralEntity)}
 	 * @return the Famix Entity found or created. May return null if <b>bnd</b> and <b>name</b> are null, or <b>bnd</b> and <b>owner</b> are null, or in case of a Famix error
 	 */
 	public LocalVariable ensureFamixLocalVariable(IVariableBinding bnd, String name, Type typ, Method owner) {
@@ -1170,7 +1201,7 @@
 			if (owner == null) {
 				return null;  // what would be the interest of a local variable for which we ignore the declaring method?
 			}
-			return super.createFamixLocalVariable(null, name, typ, owner);
+			return super.ensureFamixLocalVariable(null, name, typ, owner);
 		}
 
 		// --------------- name
@@ -1196,7 +1227,7 @@
 			}
 		}
 		if (fmx == null) {
-			fmx = super.createFamixLocalVariable(bnd, name, typ, owner);
+			fmx = super.ensureFamixLocalVariable(bnd, name, typ, owner);
 		}
 		
 		if (fmx != null) {
@@ -1209,18 +1240,18 @@
 	}
 	
 	/**
-	 * Returns a Famix UnknownVariable associated with the IVariableBinding. The Entity is created if it does not exist.
+	 * Returns a Famix UnknownVariable. The Entity is created if it does not exist.
 	 */
-	public UnknownVariable createFamixUnknownVariable(Type type, String name) {
-//		System.err.println("TRACE -- createFamixUnknownVariable: "+name);
-		UnknownVariable fmx = (UnknownVariable) createFamixNamedEntity(UnknownVariable.class, name);
+	public UnknownVariable ensureFamixUnknownVariable(Type type, String name) {
+//		System.err.println("TRACE -- ensureFamixUnknownVariable: "+name);
+		UnknownVariable fmx = (UnknownVariable) createFamixEntity(UnknownVariable.class, name);
 		if (fmx!=null) {
 			fmx.setDeclaredType(type);
 		}
 		return fmx;
 	}
 
-	public Comment createFamixComment(org.eclipse.jdt.core.dom.Comment jdoc, NamedEntity fmx) {
+	public Comment ensureFamixComment(org.eclipse.jdt.core.dom.Comment jdoc, NamedEntity fmx) {
 		Comment cmt = null;
 		if (jdoc != null) {
 			cmt = createFamixComment(jdoc.toString(), fmx);
@@ -1273,7 +1304,7 @@
 	 * @return the Famix Method
 	 */
 	public Method ensureFamixStubMethod(String name) {
-		return ensureFamixMethod(null, name, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, createFamixClassStubOwner());  // cast needed to desambiguate the call
+		return ensureFamixMethod(null, name, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, ensureFamixClassStubOwner());  // cast needed to desambiguate the call
 	}
 
 	/**
@@ -1294,7 +1325,7 @@
 	 * @return a Famix class for "Object"
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClassObject(ITypeBinding bnd) {
-		fr.inria.verveine.core.gen.famix.Class fmx =  createFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, bnd, OBJECT_NAME);
+		fr.inria.verveine.core.gen.famix.Class fmx =  ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, bnd, OBJECT_NAME);
 		
 		if (fmx != null) {
 			fmx.setContainer( ensureFamixNamespaceJavaLang(null));
@@ -1315,9 +1346,9 @@
 	 * Creates or recovers the Famix Class that will own all stub methods (for which the real owner is unknown)
 	 * @return a Famix class
 	 */
-	public fr.inria.verveine.core.gen.famix.Class createFamixClassStubOwner() {
-		fr.inria.verveine.core.gen.famix.Class fmx = super.createFamixClassStubOwner();
-		createFamixInheritance(ensureFamixClassObject(null), fmx, /*prev*/null);
+	public fr.inria.verveine.core.gen.famix.Class ensureFamixClassStubOwner() {
+		fr.inria.verveine.core.gen.famix.Class fmx = super.ensureFamixClassStubOwner();
+		ensureFamixInheritance(ensureFamixClassObject(null), fmx, /*prev*/null);
 
 		return fmx;
 	}
@@ -1329,10 +1360,10 @@
 	 * @return a Famix class
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClassArray() {
-		fr.inria.verveine.core.gen.famix.Class fmx = createFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, ARRAYS_NAME);
+		fr.inria.verveine.core.gen.famix.Class fmx = ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, ARRAYS_NAME);
 		if (fmx != null) {
-			createFamixInheritance(ensureFamixClassObject(null), fmx, /*prev*/null);
-			fmx.setContainer( createFamixNamespaceDefault());
+			ensureFamixInheritance(ensureFamixClassObject(null), fmx, /*prev*/null);
+			fmx.setContainer( ensureFamixNamespaceDefault());
 			
 			fmx.setIsAbstract(Boolean.FALSE);
 			fmx.setIsFinal(Boolean.FALSE);
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/StructuralEntity.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/StructuralEntity.java	(revision 60)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/StructuralEntity.java	(revision 61)
@@ -25,6 +25,17 @@
         this.declaredType = declaredType;
     }
     
+    private Collection<Type> declaredArgumentTypes;
+    
+    @FameProperty(name = "declaredArgumentTypes")
+    public Collection<Type> getDeclaredArgumentTypes() {
+        return declaredArgumentTypes;
+    }
+
+    public void setDeclaredArgumentTypes(Collection<Type> declaredArgumentTypes) {
+        this.declaredArgumentTypes = declaredArgumentTypes;
+    }
+    
     private Collection<Access> incomingAccesses; 
 
     @FameProperty(name = "incomingAccesses", opposite = "variable", derived = true)
Index: verveine.core/.classpath
===================================================================
--- verveine.core/.classpath	(revision 29)
+++ verveine.core/.classpath	(revision 30)
@@ -3,7 +3,6 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry kind="lib" path="lib/fame.jar"/>
-	<classpathentry kind="var" path="ECLIPSE_HOME/plugins/org.junit_4.8.1.v4_8_1_v20100427-1100/junit.jar"/>
 	<classpathentry kind="lib" path="lib/org.eclipse.jdt.core_3.6.0.v_A58.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/src/fr/inria/verveine/core/EntityStack.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/EntityStack.java	(revision 29)
+++ verveine.core/src/fr/inria/verveine/core/EntityStack.java	(revision 30)
@@ -2,10 +2,14 @@
 
 import java.util.Stack;
 
+import fr.inria.verveine.core.gen.famix.Access;
 import fr.inria.verveine.core.gen.famix.Association;
 import fr.inria.verveine.core.gen.famix.ContainerEntity;
+import fr.inria.verveine.core.gen.famix.Inheritance;
+import fr.inria.verveine.core.gen.famix.Invocation;
 import fr.inria.verveine.core.gen.famix.Method;
 import fr.inria.verveine.core.gen.famix.Namespace;
+import fr.inria.verveine.core.gen.famix.Reference;
 
 /** A stack of FAMIX Entities so that we know in what container each new Entity is declared
  * @author anquetil
@@ -29,6 +33,7 @@
 		private int metric_cyclo = EMPTY_CYCLO;  // Cyclomatic Complexity
 		private int metric_nos = EMPTY_NOS;    // Number Of Statements
 		
+		
  		public ClassStack(fr.inria.verveine.core.gen.famix.Class e) {
 			fmxClass = e;
 			clearFmxMethod();
@@ -110,21 +115,61 @@
 			fmxMethod = null;
 			metric_cyclo = EMPTY_CYCLO;
 			metric_nos = EMPTY_NOS;
+			setLastInvocation(null);
 		}
 
 	}
 	
 	/**
-	 * last Association registered to set the previous/next
+	 * last Invocation registered to set the previous/next
+	 */
+	Invocation lastInvocation = null;
+	
+	/**
+	 * last Access registered to set the previous/next
+	 */
+	Access lastAccess = null;
+	
+	/**
+	 * last Inheritance registered to set the previous/next
+	 */
+	Inheritance lastInheritance = null;
+	
+	/**
+	 * last Reference registered to set the previous/next
 	 */
-	Association lastAssoc = null;
+	Reference lastReference = null;
 	
-	public Association getLastAssoc() {
-		return lastAssoc;
+	public Access getLastAccess() {
+		return lastAccess;
 	}
 
-	public void setLastAssoc(Association lastAssoc) {
-		this.lastAssoc = lastAssoc;
+	public void setLastAccess(Access lastAccess) {
+		this.lastAccess = lastAccess;
+	}
+
+	public Inheritance getLastInheritance() {
+		return lastInheritance;
+	}
+
+	public void setLastInheritance(Inheritance lastInheritance) {
+		this.lastInheritance = lastInheritance;
+	}
+
+	public Reference getLastReference() {
+		return lastReference;
+	}
+
+	public void setLastReference(Reference lastReference) {
+		this.lastReference = lastReference;
+	}
+
+	public Invocation getLastInvocation() {
+		return lastInvocation;
+	}
+
+	public void setLastInvocation(Invocation lastInvocation) {
+		this.lastInvocation = lastInvocation;
 	}
 
 	public EntityStack() {
@@ -176,7 +221,7 @@
 			System.out.println("TRACE: pushPckg "+e.getName());
 		}
 		clearClasses();
-		setLastAssoc(null);
+		//setLastAssoc(null);
 		fmxPckg = e;
 	}
 
@@ -200,6 +245,7 @@
 			System.out.println("TRACE: pushMethod "+e.getName());
 		}
 		getTopClass().setFmxMethod(e);
+		
 	}
 
 	/**
Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 29)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 30)
@@ -409,7 +409,7 @@
 		return ensureFamixInvocation(sender, invoked, receiver, null);
 	}
 
-	public Invocation ensureFamixInvocation(BehaviouralEntity sender, BehaviouralEntity invoked, NamedEntity receiver, Association prev) {
+	public Invocation ensureFamixInvocation(BehaviouralEntity sender, BehaviouralEntity invoked, NamedEntity receiver, Invocation prev) {
 		Invocation invok = new Invocation();
 		invok.setReceiver(receiver);
 		invok.setSender(sender);
@@ -443,7 +443,7 @@
 
 	private void chainPrevNext(Association prev, Association next) {
 		if (prev != null) {
-			// next.setPrevious(prev);  // not yet implemented in importer
+			next.setPrevious(prev);  // not yet implemented in importer
 		}
 	}
 	
Index: verveine.extractor.java/.classpath
===================================================================
--- verveine.extractor.java/.classpath	(revision 29)
+++ verveine.extractor.java/.classpath	(revision 30)
@@ -10,10 +10,9 @@
 	<classpathentry kind="lib" path="lib/org.eclipse.osgi_3.6.0.v20100517.jar"/>
 	<classpathentry kind="lib" path="lib/org.eclipse.equinox.common_3.6.0.v20100503.jar"/>
 	<classpathentry kind="lib" path="lib/org.eclipse.equinox.preferences_3.3.0.v20100503.jar"/>
-	<classpathentry kind="var" path="ECLIPSE_HOME/plugins/org.junit_4.8.1.v4_8_1_v20100427-1100/junit.jar"/>
-	<classpathentry kind="var" path="ECLIPSE_HOME/plugins/org.hamcrest.core_1.1.0.v20090501071000.jar"/>
 	<classpathentry kind="lib" path="lib/fame.jar"/>
 	<classpathentry kind="lib" path="lib/famix.jar"/>
 	<classpathentry kind="lib" path="lib/verveine.core.jar"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 29)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 30)
@@ -8,6 +8,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
@@ -359,6 +360,29 @@
 				}
 			}
 		}
+		
+		// test that the chain (next/previous) of invocations is correct
+		for (Method mNode : nodeClass.getMethods()) {
+			if (mNode.getName().equals("accept")) {
+				Invocation invok = mNode.getOutgoingInvocations().iterator().next();
+				assertNull(invok.getPrevious());
+				assertNull(invok.getNext());
+			}
+			else if (mNode.getName().equals("send"))  {
+				int nbNull = 0;
+				for (Invocation invok : mNode.getOutgoingInvocations()) {
+					Invocation previous = (Invocation) invok.getPrevious();
+					if (previous == null) {
+						nbNull++;
+					}
+					else {
+						assertSame(mNode, previous.getSender());
+					}					
+				}
+				assertEquals(1, nbNull);
+			}
+		}
+
 	}
 	
 	@Test
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 29)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 30)
@@ -104,7 +104,7 @@
 			importBnd = ((ITypeBinding)importBnd).getPackage();
 		}
 
-		context.setLastAssoc( dico.ensureFamixReference(fmxSrc, dico.ensureFamixNamespace( (IPackageBinding) importBnd), context.getLastAssoc()) );
+		context.setLastReference( dico.ensureFamixReference(fmxSrc, dico.ensureFamixNamespace( (IPackageBinding) importBnd), context.getLastReference()) );
 		
 		return super.visit(node);
 	}
@@ -380,11 +380,12 @@
 		if (accessor != null) {
 			Attribute accessed = this.dico.ensureFamixAttribute(bnd);
 			if (accessed != null) {
-				context.setLastAssoc( dico.ensureFamixAccess(accessor, accessed, /*isWrite*/false, context.getLastAssoc()) );
+				context.setLastAccess( dico.ensureFamixAccess(accessor, accessed, /*isWrite*/false, context.getLastAccess()) );
 				if ( (accessed.getParentType() == null) && (accessed.getName().equals("length")) ) {
 					accessed.setParentType(dico.ensureFamixClassArray());
 				}
 			}
+			//context.setLastAccess( dico.ensureFamixInvocation(sender, invoked, receiver, context.getLastAccess) );
 		}
 	}
 
@@ -401,7 +402,7 @@
 			if (invoked == null) {
 				invoked = this.dico.ensureFamixStubMethod(name);
 			}
-			context.setLastAssoc( dico.ensureFamixInvocation(sender, invoked, receiver, context.getLastAssoc()) );
+			context.setLastInvocation( dico.ensureFamixInvocation(sender, invoked, receiver, context.getLastInvocation()) );
 		}
 	}
 
