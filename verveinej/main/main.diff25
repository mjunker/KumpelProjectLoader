Index: branches/postMoose4_3Refactoring/verveine.core/src/test/fr/inria/verveine/core/TestVerveineUtils.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.core/src/test/fr/inria/verveine/core/TestVerveineUtils.java	(revision 0)
+++ branches/postMoose4_3Refactoring/verveine.core/src/test/fr/inria/verveine/core/TestVerveineUtils.java	(revision 98)
@@ -0,0 +1,47 @@
+package test.fr.inria.verveine.core;
+
+import java.util.Collection;
+import java.util.Vector;
+
+import ch.akuhn.fame.Repository;
+import fr.inria.verveine.core.gen.famix.Entity;
+import fr.inria.verveine.core.gen.famix.NamedEntity;
+
+/**
+ * Some utilities to help test extractors derived from verveine.core
+ * @author anquetil
+ */
+public class TestVerveineUtils {
+
+	/**
+	 * Returns a Collection of all FAMIXEntities in repository of the given fmxClass.
+	 * Same method as listAll(Class<T extends Entity>) defined in VerveineParser
+	 */
+	public static <T extends Entity> Collection<T> selectElementsOfType(Repository repository, Class<T> fmxClass) {
+		return( repository.all(fmxClass));
+	}
+
+	/** Returns the first FAMIXEntities in repository of the given fmxClass and with the given name
+	 */
+	public static <T extends NamedEntity> T detectElement(Repository repository, Class<T> fmxClass, String name) {
+		for (T ent : selectElementsOfType(repository, fmxClass)) {
+			if (ent.getName().equals(name) ) {
+				return ent;
+			}
+		}
+		return null;
+	}
+
+	/** Returns a Collection of FAMIXEntities in repository of the given fmxClass and with the given name
+	 */
+	public static <T extends NamedEntity> Collection<T> listElements(Repository repository, Class<T> fmxClass, String name) {
+		Collection<T> selection = new Vector<T>();
+		for (T ent : selectElementsOfType(repository, fmxClass)) {
+			if ( ent.getName().equals(name) ) {
+				selection.add(ent);
+			}
+		}
+		return selection;
+	}
+
+}
Index: verveine.core/.classpath
===================================================================
--- verveine.core/.classpath	(revision 81)
+++ verveine.core/.classpath	(revision 82)
@@ -2,7 +2,7 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-	<classpathentry kind="lib" path="lib/fame.jar" sourcepath="/Fame"/>
+	<classpathentry kind="lib" path="lib/fame.jar" sourcepath="/Fame/src"/>
 	<classpathentry kind="lib" path="lib/org.eclipse.jdt.core_3.6.0.v_A58.jar"/>
 	<classpathentry kind="lib" path="lib/akuhn-util-r28011.jar"/>
 	<classpathentry kind="output" path="bin"/>
Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 82)
@@ -35,14 +35,19 @@
 import fr.inria.verveine.core.gen.famix.ThrownException;
 import fr.inria.verveine.core.gen.famix.Type;
 
+enum Colors { Black,	Blue, Red };
+
 /**
  * A dictionnary of Famix entities to help create them and find them back
  * @author anquetil
  *
- * @param <B> The super class of all bindings. Different for JDT, PDT, ... bindings
+ *Entities are mapped to keys. Typically the key will be a binding provided by the parser used
+ * @param <B> The class of the keys, typically a JDT binding or a CDT binding, ...
  */
 public class Dictionary<B> {
 
+	Colors toto;
+	
 	public static final String DEFAULT_PCKG_NAME = "<Default Package>";
 	public static final String STUB_METHOD_CONTAINER_NAME = "<StubMethodContainer>";
 	public static final String SELF_NAME = "self";
@@ -54,9 +59,9 @@
 	protected Repository famixRepo;
 
 	/**
-	 * A dictionary to map an IBinding to FAMIX Entity
+	 * A dictionary to map a key (provided by the user) to FAMIX Entity
 	 */
-	protected Map<B,NamedEntity> mapBind;
+	protected Map<B,NamedEntity> mapToKey;
 
 	/**
 	 * Another dictionary to map a name to FAMIX Entities with this name
@@ -64,8 +69,9 @@
 	protected Map<String,Collection<NamedEntity>> mapName;
 
 	/**
-	 * Yet another dictionary for implicit variables
-	 * 'self' and 'super' have the same binding than their associated class so they can't be kept easily in bindFmxDico
+	 * Yet another dictionary for implicit variables ('self' and 'super')
+	 * Because they are implicit, they may not have a binding provided by the parser,
+	 * or may have the same binding than their associated class so they can't be kept easily in {@link Dictionary#mapToKey}
 	 */
 	protected Map<fr.inria.verveine.core.gen.famix.Class,ImplicitVars> mapImpVar;
 
@@ -73,7 +79,7 @@
 	 * Used to keep the two possible ImplicitVariable for a given Class binding
 	 * @author anquetil
 	 */
-	protected class ImplicitVars {
+	private class ImplicitVars {
 		public ImplicitVariable self_iv;
 		public ImplicitVariable super_iv;
 	}
@@ -84,7 +90,7 @@
 	public Dictionary(Repository famixRepo) {
 		this.famixRepo = famixRepo;
 		
-		this.mapBind = new Hashtable<B,NamedEntity>();
+		this.mapToKey = new Hashtable<B,NamedEntity>();
 		this.mapName = new Hashtable<String,Collection<NamedEntity>>();
 		this.mapImpVar = new Hashtable<fr.inria.verveine.core.gen.famix.Class,ImplicitVars>();
 		
@@ -109,49 +115,14 @@
 			}
 		}
 
-		for (fr.inria.verveine.core.gen.famix.Class clazz : famixRepo.all(fr.inria.verveine.core.gen.famix.Class.class)) {
-			try { if (clazz.getIsAbstract()) { } }
-			catch (NullPointerException e) { clazz.setIsAbstract(Boolean.FALSE); }
-			try { if (clazz.getIsStub()) { } }
-			catch (NullPointerException e) { clazz.setIsStub(Boolean.FALSE); }
-			try { if (clazz.getIsPublic()) { } }
-			catch (NullPointerException e) { clazz.setIsPublic(Boolean.FALSE); }
-			try { if (clazz.getIsPrivate()) { } }
-			catch (NullPointerException e) { clazz.setIsPrivate(Boolean.FALSE); }
-			try { if (clazz.getIsProtected()) { } }
-			catch (NullPointerException e) { clazz.setIsProtected(Boolean.FALSE); }
-			try { if (clazz.getIsFinal()) { } }
-			catch (NullPointerException e) { clazz.setIsFinal(Boolean.FALSE); }
-		}
-
 		for (Method meth : famixRepo.all(Method.class)) {
-			try { if (meth.getIsAbstract()) { } }
-			catch (NullPointerException e) { meth.setIsAbstract(Boolean.FALSE); }
 			try { if (meth.getIsStub()) { } }
 			catch (NullPointerException e) { meth.setIsStub(Boolean.FALSE); }
-			try { if (meth.getIsPublic()) { } }
-			catch (NullPointerException e) { meth.setIsPublic(Boolean.FALSE); }
-			try { if (meth.getIsPrivate()) { } }
-			catch (NullPointerException e) { meth.setIsPrivate(Boolean.FALSE); }
-			try { if (meth.getIsProtected()) { } }
-			catch (NullPointerException e) { meth.setIsProtected(Boolean.FALSE); }
-			try { if (meth.getIsFinal()) { } }
-			catch (NullPointerException e) { meth.setIsFinal(Boolean.FALSE); }
 		}
 
 		for (Attribute att : famixRepo.all(Attribute.class)) {
-			try { if (att.getIsAbstract()) { } }
-			catch (NullPointerException e) { att.setIsAbstract(Boolean.FALSE); }
 			try { if (att.getIsStub()) { } }
 			catch (NullPointerException e) { att.setIsStub(Boolean.FALSE); }
-			try { if (att.getIsPublic()) { } }
-			catch (NullPointerException e) { att.setIsPublic(Boolean.FALSE); }
-			try { if (att.getIsPrivate()) { } }
-			catch (NullPointerException e) { att.setIsPrivate(Boolean.FALSE); }
-			try { if (att.getIsProtected()) { } }
-			catch (NullPointerException e) { att.setIsProtected(Boolean.FALSE); }
-			try { if (att.getIsFinal()) { } }
-			catch (NullPointerException e) { att.setIsFinal(Boolean.FALSE); }
 		}
 
 	}
@@ -191,16 +162,16 @@
 	 * Returns the Famix Entity associated to the given binding.
 	 * <b>Note</b>: Be careful than ImplicitVariables share the same binding than their associated Class and cannot be retrieved with this method.
 	 * In such a case, this method will always retrieve the Class associated to the binding.
-	 * To get an ImplicitVariable from the binding, use {@link Dictionary#getImplicitVariableByBinding(Object, String)}
+	 * To get an ImplicitVariable from the binding, uses {@link Dictionary#getImplicitVariableByBinding(Object, String)}
 	 * @param bnd -- the binding
 	 * @return the Famix Entity associated to the binding or null if not found
 	 */
-	public NamedEntity getEntityByBinding(B bnd) {
+	public NamedEntity getEntityByKey(B bnd) {
 		if (bnd == null) {
 			return null;
 		}
 		else {
-			return mapBind.get(bnd);
+			return mapToKey.get(bnd);
 		}
 	}
 
@@ -208,12 +179,11 @@
 	 * Creates and returns a FAMIX Entity of the type <b>fmxClass</b>.
 	 * The Entity is always created (see {@link Dictionary#ensureFamixEntity(Class, Object, String)}).
 	 * @param fmxClass -- the FAMIX class of the instance to create
-	 * @param name -- the name of the new instance
+	 * @param name -- the name of the new instance must not be null (and this is not tested)
 	 * @return the FAMIX Entity or null in case of a FAMIX error
 	 */
 	protected <T extends NamedEntity> T createFamixEntity(Class<T> fmxClass, String name) {
 		T fmx = null;
-//System.out.println("creating FMX Entity:"+ name +"   type: "+ fmxClass.getCanonicalName());
 		try {
 			fmx = fmxClass.newInstance();
 		} catch (Exception e) {
@@ -237,13 +207,11 @@
 	/**
 	 * Returns a FAMIX Entity of the type <b>fmxClass</b> and maps it to its binding <b>bnd</b> (if not null).
 	 * The Entity is created if it did not exist.
-	 * <b>Note</b>: Should not be used to create ImplicitVariables and will silently fail if one tries. Use ensureFamixImplicitVariable instead.
+	 * <b>Note</b>: Should not be used to create ImplicitVariables and will silently fail if one tries. Use {@link Dictionary#ensureFamixImplicitVariable} instead.
 	 * @param fmxClass -- the FAMIX class of the instance to create
 	 * @param bnd -- the binding to map to the new instance
 	 * @param name -- the name of the new instance (used if <tt>bnd == null</tt>)
 	 * @return the FAMIX Entity or null if <b>bnd</b> was null or in case of a FAMIX error
-	 * 
-	 * TODO Make public and remove ensureFamixClass(name), ensureFamixAttribute(name), ... ????
 	 */
 	@SuppressWarnings("unchecked")
 	protected <T extends NamedEntity> T ensureFamixEntity(Class<T> fmxClass, B bnd, String name) {
@@ -254,24 +222,19 @@
 		}
 		
 		if (bnd != null) {
-			fmx = (T) getEntityByBinding(bnd);
-		}
-		else {
-			// Unfortunately different entities with the same name and same type may exist
-			// e.g. 2 parameters of 2 different methods but having the same name
-			// so we must recreate a new entity each time
-
-			//fmxEnt = getEntityByName(fmxClass, name);
-		}
-
-		if (fmx != null) {
-			return fmx;
+			fmx = (T) getEntityByKey(bnd);
+			if (fmx != null) {
+				return fmx;
+			}
 		}
+		// else
+		// Unfortunately different entities with the same name and same type may exist
+		// e.g. 2 parameters of 2 different methods but having the same name
+		// so we cannot recover just from the name
 
 		fmx = createFamixEntity(fmxClass, name);
-		// put new entity in mappers
 		if (bnd != null) {
-			mapBind.put(bnd, fmx);
+			mapToKey.put(bnd, fmx);
 		}
 		
 		return fmx;
@@ -288,38 +251,30 @@
 
 	///// ensure Famix Entities /////
 
-	protected <T extends fr.inria.verveine.core.gen.famix.Type> T ensureFamixType(Class<T> fmxClass, String name) {
-		T fmx = ensureFamixEntity(fmxClass, null, name);
-		if (fmx != null) {
-			fmx.setIsAbstract(Boolean.FALSE);
-			fmx.setIsFinal(Boolean.FALSE);
-			fmx.setIsPrivate(Boolean.FALSE);
-			fmx.setIsProtected(Boolean.FALSE);
-			fmx.setIsPublic(Boolean.FALSE);
-		}
-
-		return fmx;
-	}
-	
 	/**
 	 * Returns a FAMIX Type with the given <b>name</b>, creating it if it does not exist yet.
 	 * In the second case, sets some default properties: not Abstract, not Final, not Private, not Protected, not Public, not Interface
-	 * @param name -- the name of the FAMIX Class
+	 * @param key to which the entity will be mapped (may be null, but then it will be difficult to recover the entity)
+	 * @param name -- the name of the Famix Type (MUST NOT be null, but this is not checked)
+	 * @param owner -- entity defining the Famix Type (should not be null, but it will work if it is) 
 	 * @return the FAMIX Class or null in case of a FAMIX error
 	 */
-	public Type ensureFamixType(String name) {
-		return ensureFamixType(Type.class, name);
+	public Type ensureFamixType(B key, String name, ContainerEntity owner) {
+		Type fmx = ensureFamixEntity(Type.class, key, name);
+		fmx.setContainer(owner);
+		return fmx;
 	}
 
 	/**
 	 * Returns a FAMIX Class with the given <b>name</b>, creating it if it does not exist yet.
-	 * In the second case, sets some default properties: not Abstract, not Final, not Private, not Protected, not Public, not Interface
-	 * @param name -- the name of the FAMIX Class
+	 * @param key to which the entity Famix be mapped (may be null, but then it will be difficult to recover the entity)
+	 * @param name -- the name of the FAMIX Class (MUST NOT be null, but this is not checked)
+	 * @param owner -- entity defining the Famix class (should not be null, but it will work if it is) 
 	 * @return the FAMIX Class or null in case of a FAMIX error
 	 */
-	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(String name) {
-		fr.inria.verveine.core.gen.famix.Class fmx = ensureFamixType(fr.inria.verveine.core.gen.famix.Class.class, name);
-		fmx.setIsInterface(Boolean.FALSE);
+	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(B key, String name, ContainerEntity owner) {
+		fr.inria.verveine.core.gen.famix.Class fmx = ensureFamixEntity(fr.inria.verveine.core.gen.famix.Class.class, key, name);
+		fmx.setContainer(owner);
 		return fmx;
 	}
 
@@ -330,7 +285,7 @@
 	 * @return the FAMIX Class or null in case of a FAMIX error
 	 */
 	public ParameterizableClass ensureFamixParameterizableClass(String name) {
-		ParameterizableClass fmx = ensureFamixType(ParameterizableClass.class, name);
+		ParameterizableClass fmx = ensureFamixEntity(ParameterizableClass.class, null, name);
 		fmx.setIsInterface(Boolean.FALSE);
 		return fmx;
 	}
@@ -342,36 +297,55 @@
 	 * @return the FAMIX ParameterType or null in case of a FAMIX error
 	 */
 	public ParameterType ensureFamixParameterType(String name) {
-		ParameterType fmx = ensureFamixType(ParameterType.class, name);
+		ParameterType fmx = ensureFamixEntity(ParameterType.class, null, name);
 		return fmx;
 	}
 
 	/**
 	 * Returns a FAMIX Method with the given <b>name</b>, creating it if it does not exist yet
-	 * @param name -- the name of the FAMIX Method
+	 * @param key to which the entity will be mapped (may be null, but then it will be difficult to recover the entity)
+	 * @param name -- the name of the FAMIX Method (MUST NOT be null, but this is not checked)
+	 * @param sig -- method's signature, including type of parameters and return type (should not be null, but it will work if it is)
+	 * @param ret -- Famix Type returned by the method (ideally should only be null in case of a constructor, but will accept it in any case)
+	 * @param owner -- type defining the method (should not be null, but it will work if it is)
 	 * @return the FAMIX Method or null in case of a FAMIX error
 	 */
-
-	public Method ensureFamixMethod(String name) {
-		return (Method) ensureFamixEntity(Method.class, null, name);
+	public Method ensureFamixMethod(B key, String name, String sig, Type ret, Type owner) {
+		Method fmx = (Method) ensureFamixEntity(Method.class, key, name);
+		fmx.setSignature(sig);
+		fmx.setDeclaredType(ret);
+		fmx.setParentType(owner);
+		return fmx;
 	}
 
 	/**
 	 * Returns a FAMIX Attribute with the given <b>name</b>, creating it if it does not exist yet
-	 * @param name -- the name of the FAMIX Attribute
+	 * @param key to which the entity will be mapped (may be null, but then it will be difficult to recover the entity)
+	 * @param name -- the name of the Famix Attribute (MUST NOT be null, but this is not checked)
+	 * @param type -- Famix Type of the Famix Attribute (should not be null, but it will work if it is)
+	 * @param owner -- Class defining the Famix Attribute (should not be null, but it will work if it is)
 	 * @return the FAMIX Attribute or null in case of a FAMIX error
 	 */
-	public Attribute ensureFamixAttribute(String name) {
-		return (Attribute) ensureFamixEntity(Attribute.class, null, name);
+	public Attribute ensureFamixAttribute(B key, String name, Type type, Type owner) {
+		Attribute fmx = ensureFamixEntity(Attribute.class, key, name);
+		fmx.setParentType(owner);
+		fmx.setDeclaredType(type);
+		return fmx;
 	}
 
 	/**
 	 * Returns a FAMIX LocalVariable with the given <b>name</b>, creating it if it does not exist yet
-	 * @param name -- the name of the FAMIX LocalVariable
+	 * @param key to which the entity will be mapped (may be null, but then it will be difficult to recover the entity)
+	 * @param name -- the name of the Famix Variable (MUST NOT be null, but this is not checked)
+	 * @param type -- Famix Type of the Famix Variable (should not be null, but it will work if it is)
+	 * @param owner -- Entity defining the Famix Variable (should not be null, but it will work if it is)
 	 * @return the FAMIX LocalVariable or null in case of a FAMIX error
 	 */
-	public LocalVariable ensureFamixLocalVariable(String name) {
-		return (LocalVariable) ensureFamixEntity(LocalVariable.class, null, name);
+	public LocalVariable ensureFamixLocalVariable(B key, String name, Type type, BehaviouralEntity owner) {
+		LocalVariable fmx = ensureFamixEntity(LocalVariable.class, key, name);
+		fmx.setParentBehaviouralEntity(owner);
+		fmx.setDeclaredType(type);
+		return fmx;
 	}
 
 	/**
@@ -562,12 +536,12 @@
 
 	/**
 	 * Returns the Famix ImplicitVariable associated to the given binding and name (self or super).
-	 * See also {@link Dictionary#getEntityByBinding(Object)}
+	 * See also {@link Dictionary#getEntityByKey(Object)}
 	 * @param bnd -- the binding
 	 * @return the Famix Entity associated to the binding or null if not found
 	 */
 	public ImplicitVariable getImplicitVariableByBinding(B bnd, String iv_name) {
-		return getImplicitVariableByClass((fr.inria.verveine.core.gen.famix.Class)getEntityByBinding(bnd), iv_name);
+		return getImplicitVariableByClass((fr.inria.verveine.core.gen.famix.Class)getEntityByKey(bnd), iv_name);
 	}
 	
 	/**
@@ -597,7 +571,7 @@
 	/**
 	 * Returns a FAMIX ImplicitVariable with the given <b>name</b> (self or super) and corresponding to the <b>clazz</b>.
 	 * If this ImplicitVariable does not exist yet, it is created
-	 * @param clazz -- the Famix Class for this ImplicitVariable (should not be null)
+	 * @param clazz -- the Famix Class for this ImplicitVariable (must not be null)
 	 * @param name -- the name of the FAMIX ImplicitVariable (should be Dictionary.SELF_NAME or Dictionary.SUPER_NAME)
 	 * @return the FAMIX ImplicitVariable or null in case of a FAMIX error
 	 */
@@ -608,7 +582,6 @@
 			fmx = (ImplicitVariable) createFamixEntity(ImplicitVariable.class, name);
 			if (fmx!=null) {
 				fmx.setContainer(clazz);
-				fmx.setIsStub(Boolean.FALSE);
 
 				ImplicitVars iv = mapImpVar.get(clazz);				
 				if (iv == null) {
@@ -636,15 +609,15 @@
 	 * For some specific entities we don't allow two of them with the same name.
 	 * This is the case e.g. for the default package, or the Java class "Object" and its package "java.lang".
 	 * @param fmxClass -- the FAMIX class of the instance to create
-	 * @param bnd -- a potential binding for the entity
+	 * @param key -- a potential binding for the entity
 	 * @param name -- the name of the new instance (used if <tt>bnd == null</tt>)
 	 * @return the uniq Famix Entity for this binding and/or name
 	 */
 	@SuppressWarnings("unchecked")
-	public <T extends NamedEntity> T ensureFamixUniqEntity(Class<T> fmxClass, B bnd, String name) {
+	public <T extends NamedEntity> T ensureFamixUniqEntity(Class<T> fmxClass, B key, String name) {
 		T fmx = null;
-		if (bnd != null) {
-			fmx = (T) getEntityByBinding(bnd);
+		if (key != null) {
+			fmx = (T) getEntityByKey(key);
 		}
 		
 		if (fmx == null) {
@@ -656,10 +629,10 @@
 				fmx = createFamixEntity(fmxClass, name);
 			}
 			
-			if (bnd != null) {
+			if (key != null) {
 				// may happen for example if the entity was first created without binding
 				// and we find a binding for it later
-				mapBind.put(bnd, fmx);
+				mapToKey.put(key, fmx);
 			}
 		}
 
@@ -672,8 +645,8 @@
 	 * @param name -- the name of the FAMIX Namespace
 	 * @return the FAMIX Namespace or null in case of a FAMIX error
 	 */
-	public Namespace ensureFamixNamespace(String name) {
-		return  ensureFamixUniqEntity(Namespace.class, null, name);
+	public Namespace ensureFamixNamespace(B key, String name) {
+		return  ensureFamixUniqEntity(Namespace.class, key, name);
 	}
 
 	/**
@@ -693,29 +666,21 @@
 	 * @param name -- the name of the FAMIX PrimitiveType
 	 * @return the FAMIX PrimitiveType or null in case of a FAMIX error
 	 */
-	public PrimitiveType ensureFamixPrimitiveType(String name) {
-		return  ensureFamixUniqEntity(PrimitiveType.class, null, name);
+	public PrimitiveType ensureFamixPrimitiveType(B key, String name) {
+		return ensureFamixEntity(PrimitiveType.class, key, name);
 	}
 	
 	/**
 	 * Creates or recovers a Famix Class to contain the methods stubs (for which we ignore the real owner).
-	 * Because this package does not really exist, it has no binding.
 	 * @return a Famix class
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClassStubOwner() {
 		fr.inria.verveine.core.gen.famix.Class fmx =  ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, STUB_METHOD_CONTAINER_NAME);
 		if (fmx != null) {
 			fmx.setContainer( ensureFamixNamespaceDefault());
-			fmx.setIsAbstract(Boolean.FALSE);
-			fmx.setIsFinal(Boolean.FALSE);
-			fmx.setIsInterface(Boolean.FALSE);
-			fmx.setIsPrivate(Boolean.FALSE);
-			fmx.setIsProtected(Boolean.FALSE);
-			fmx.setIsPublic(Boolean.FALSE);
 		}
 
 		return fmx;
 	}
-
 	
 }
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/Attribute.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/Attribute.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/Attribute.java	(revision 82)
@@ -30,6 +30,11 @@
         return parentType;
     }
 
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return getParentType();
+	}
+
     public void setParentType(Type parentType) {
         if (this.parentType != null) {
             if (this.parentType.equals(parentType)) return;
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/Method.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/Method.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/Method.java	(revision 82)
@@ -194,7 +194,12 @@
         return parentType;
     }
 
-    public void setParentType(Type parentType) {
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return getParentType();
+	}
+
+	public void setParentType(Type parentType) {
         if (this.parentType != null) {
             if (this.parentType.equals(parentType)) return;
             this.parentType.getMethods().remove(this);
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/ImplicitVariable.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/ImplicitVariable.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/ImplicitVariable.java	(revision 82)
@@ -19,6 +19,11 @@
         return container;
     }
 
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return getContainer();
+	}
+
     public void setContainer(Type container) {
         this.container = container;
     }
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/Parameter.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/Parameter.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/Parameter.java	(revision 82)
@@ -19,6 +19,11 @@
         return parentBehaviouralEntity;
     }
 
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return getParentBehaviouralEntity();
+	}
+
     public void setParentBehaviouralEntity(BehaviouralEntity parentBehaviouralEntity) {
         if (this.parentBehaviouralEntity != null) {
             if (this.parentBehaviouralEntity.equals(parentBehaviouralEntity)) return;
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/NamedEntity.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/NamedEntity.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/NamedEntity.java	(revision 82)
@@ -14,7 +14,16 @@
 
 
 
-    private Boolean isAbstract;
+    public NamedEntity() {
+		super();
+		this.setIsFinal(Boolean.FALSE);
+		this.setIsPrivate(Boolean.FALSE);
+		this.setIsProtected(Boolean.FALSE);
+		this.setIsPublic(Boolean.FALSE);
+		this.setIsAbstract(Boolean.FALSE);
+	}
+
+	private Boolean isAbstract;
     
     @FameProperty(name = "isAbstract")
     public Boolean getIsAbstract() {
@@ -202,12 +211,11 @@
     public boolean hasModifiers() {
         return !getModifiers().isEmpty();
     }
-    
-                
+            
     @FameProperty(name = "belongsTo", derived = true)
     public ContainerEntity getBelongsTo() {
         // TODO: this is a derived property, implement this method manually.
-    	return null;
+        throw new UnsupportedOperationException("NamedEntity.getBelongsTo() Not implemented in this class, use the proper subclass!"); 
     }
     
     private Boolean isFinal;
@@ -222,6 +230,11 @@
     }
     
 
+	@Override
+	public String toString() {
+		return "a " + this.getClass().getCanonicalName() + " named: " + this.getName();
+	}
+    
 
 }
 
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/ScopingEntity.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/ScopingEntity.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/ScopingEntity.java	(revision 82)
@@ -21,6 +21,11 @@
         return parentScope;
     }
 
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return getParentScope();
+	}
+
     public void setParentScope(ScopingEntity parentScope) {
         if (this.parentScope != null) {
             if (this.parentScope.equals(parentScope)) return;
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/LocalVariable.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/LocalVariable.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/LocalVariable.java	(revision 82)
@@ -19,6 +19,11 @@
         return parentBehaviouralEntity;
     }
 
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return getParentBehaviouralEntity();
+	}
+
     public void setParentBehaviouralEntity(BehaviouralEntity parentBehaviouralEntity) {
         if (this.parentBehaviouralEntity != null) {
             if (this.parentBehaviouralEntity.equals(parentBehaviouralEntity)) return;
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/Class.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/Class.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/Class.java	(revision 82)
@@ -10,9 +10,12 @@
 @FameDescription("Class")
 public class Class extends Type {
 
+    public Class() {
+		super();
+		this.setIsInterface(Boolean.FALSE);
+	}
 
-
-    @FameProperty(name = "isAbstract", derived = true)
+	@FameProperty(name = "isAbstract", derived = true)
     public Boolean getIsAbstract() {
         // TODO: this is a derived property, implement this method manually.
         return this.getModifiers().contains("abstract");
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/UnknownVariable.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/UnknownVariable.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/UnknownVariable.java	(revision 82)
@@ -11,6 +11,11 @@
 
 
 
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return null;
+	}
+
 
 
 }
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/GlobalVariable.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/GlobalVariable.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/GlobalVariable.java	(revision 82)
@@ -19,6 +19,11 @@
         return parentScope;
     }
 
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return getParentScope();
+	}
+
     public void setParentScope(ScopingEntity parentScope) {
         if (this.parentScope != null) {
             if (this.parentScope.equals(parentScope)) return;
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/AnnotationType.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/AnnotationType.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/AnnotationType.java	(revision 82)
@@ -21,6 +21,11 @@
         return container;
     }
 
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return getContainer();
+	}
+
     public void setContainer(ContainerEntity container) {
         if (this.container != null) {
             if (this.container.equals(container)) return;
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/Type.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/Type.java	(revision 81)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/Type.java	(revision 82)
@@ -13,8 +13,7 @@
 public class Type extends ContainerEntity {
 
 
-
-    private Collection<Method> methods; 
+	private Collection<Method> methods; 
 
     @FameProperty(name = "methods", opposite = "parentType", derived = true)
     public Collection<Method> getMethods() {
@@ -129,6 +128,11 @@
         return container;
     }
 
+    @Override
+	public ContainerEntity getBelongsTo() {
+		return getContainer();
+	}
+
     public void setContainer(ContainerEntity container) {
         if (this.container != null) {
             if (this.container.equals(container)) return;
Index: verveine.extractor.java/test_src/ad_hoc/OMGL2/Client.java
===================================================================
--- verveine.extractor.java/test_src/ad_hoc/OMGL2/Client.java	(revision 48)
+++ verveine.extractor.java/test_src/ad_hoc/OMGL2/Client.java	(revision 49)
@@ -3,18 +3,25 @@
 import java.io.IOException;
 
 
-
-
+@Override
+@Deprecated
 public class Client {
-
+	
+	@Override
+	@Deprecated
 	private String num;
+	@Deprecated
 	private String nom;
 	
+	@Override
+	@Deprecated
 	public Client(String num, String nom) {
 		this.setNum(num);
 		this.setNom(nom);
 	}
-
+	
+	@Override
+	@Deprecated
 	public static Client lire(BufferedReader in) throws ReadException {
 		String nom = "";
 		String num = "";
@@ -39,11 +46,13 @@
 		return new Client(num, nom);
 		
 	}
-
+	
 	public String toString() {
 		return "client: ["+getNum()+"] "+getNom();
 	}
 	
+	@Override
+	@Deprecated
 	public void setNum(String num) {
 		this.num = num;
 	}
Index: verveine.extractor.java/.classpath
===================================================================
--- verveine.extractor.java/.classpath	(revision 20)
+++ verveine.extractor.java/.classpath	(revision 21)
@@ -14,6 +14,6 @@
 	<classpathentry kind="var" path="ECLIPSE_HOME/plugins/org.hamcrest.core_1.1.0.v20090501071000.jar"/>
 	<classpathentry kind="lib" path="lib/fame.jar"/>
 	<classpathentry kind="lib" path="lib/famix.jar"/>
-	<classpathentry kind="lib" path="lib/verveine.core.jar"/>
+	<classpathentry kind="lib" path="lib/verveine.core.jar" sourcepath="/verveine.core"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/verveine.extractor.java.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/verveinej.sh
===================================================================
--- verveine.extractor.java/verveinej.sh	(revision 20)
+++ verveine.extractor.java/verveinej.sh	(revision 21)
@@ -49,4 +49,4 @@
 CLASSPATH="${CLASSPATH}:${BASELIB}/org.eclipse.osgi_3.6.0.v20100517.jar"
 
 
-java $JOPT -cp $CLASSPATH fr.inria.verveine.extractor.java.BatchParser $VOPT
+java $JOPT -cp $CLASSPATH fr.inria.verveine.extractor.java.VerveineJParser $VOPT
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineExtractorJavaTest.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineExtractorJavaTest.java	(revision 20)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineExtractorJavaTest.java	(revision 21)
@@ -11,17 +11,13 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
-import java.io.PrintWriter;
 import java.util.Collection;
 
 import org.junit.Before;
 import org.junit.Test;
 
 import test.fr.inria.verveine.core.TestVerveineUtils;
-
 import ch.akuhn.fame.Repository;
-
-
 import fr.inria.verveine.core.gen.famix.Access;
 import fr.inria.verveine.core.gen.famix.Attribute;
 import fr.inria.verveine.core.gen.famix.BehaviouralEntity;
@@ -35,9 +31,8 @@
 import fr.inria.verveine.core.gen.famix.Parameter;
 import fr.inria.verveine.core.gen.famix.PrimitiveType;
 import fr.inria.verveine.core.gen.famix.SourceAnchor;
-
-import fr.inria.verveine.extractor.java.BatchParser;
 import fr.inria.verveine.extractor.java.JavaDictionary;
+import fr.inria.verveine.extractor.java.VerveineJParser;
 
 /**
  * @author Simon Denier
@@ -55,9 +50,9 @@
 	 */
 	@Before
 	public void setUp() throws Exception {
-		BatchParser parser = new BatchParser(new PrintWriter(System.out), new PrintWriter(System.err), true/*systemExit*/, null/*options*/, null/*progress*/);
-		parser.systemExitWhenFinished = false;
+		VerveineJParser parser = new VerveineJParser();
 		parser.compile(new String[] {"test_src/LANModel"});
+		parser.renameNamespaces();
 		repo = parser.getFamixRepo();
 	}
 
@@ -117,8 +112,7 @@
 		assertNotSame(dico.ensureFamixClass(A_CLASS_NAME),dico.ensureFamixClass(A_CLASS_NAME));
 		
 		Namespace javaLang = dico.ensureFamixNamespaceJavaLang(null);
-		String javaLangName = JavaDictionary.OBJECT_PACKAGE_NAME.substring(JavaDictionary.OBJECT_PACKAGE_NAME.lastIndexOf('.')+1);
-		assertEquals( javaLangName, javaLang.getName());
+		assertEquals( JavaDictionary.OBJECT_PACKAGE_NAME, javaLang.getName());
 		assertSame(javaLang, dico.ensureFamixNamespaceJavaLang(null));
 
 		fr.inria.verveine.core.gen.famix.Class obj = dico.ensureFamixClassObject(null);
@@ -466,7 +460,6 @@
 
 	}
 	
-
 	@Test
 	public void testMetric() {	
 		for (Method m : TestVerveineUtils.listElements(repo, Method.class, "accept")) {
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/BatchParser.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/BatchParser.java	(revision 20)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/BatchParser.java	(revision 21)
@@ -1,100 +0,0 @@
-package fr.inria.verveine.extractor.java;
-
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
-
-import java.util.Map;
-
-import org.eclipse.jdt.core.compiler.CompilationProgress;
-import org.eclipse.jdt.core.dom.AST;
-import org.eclipse.jdt.core.dom.ASTParser;
-import org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath;
-import org.eclipse.jdt.internal.compiler.batch.Main;
-import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
-
-import ch.akuhn.fame.Repository;
-
-import fr.inria.verveine.core.gen.famix.FAMIXModel;
-
-
-//import fr.inria.verveine.NonCloseablePrintStream;
-
-/**
- * A batch parser inspired from org.eclipse.jdt.internal.compiler.batch.Main (JDT-3.6)
- * run with:
- * java -cp lib/org.eclipse.jdt.core_3.6.0.v_A48.jar:../Fame:/usr/local/share/eclipse/plugins/org.eclipse.equinox.common_3.5.1.R35x_v20090807-1100.jar:/usr/local/share/eclipse/plugins/org.eclipse.equinox.preferences_3.2.301.R35x_v20091117.jar:/usr/local/share/eclipse/plugins/org.eclipse.core.jobs_3.4.100.v20090429-1800.jar:/usr/local/share/eclipse/plugins/org.eclipse.core.contenttype_3.4.1.R35x_v20090826-0451.jar:/usr/local/share/eclipse/plugins/org.eclipse.core.resources_3.5.2.R35x_v20091203-1235.jar:/usr/local/share/eclipse/plugins/org.eclipse.core.runtime_3.5.0.v20090525.jar:/usr/local/share/eclipse/plugins/org.eclipse.osgi_3.5.2.R35x_v20100126.jar:../Fame/lib/akuhn-util-r28011.jar:lib/fame.jar:bin fr.inria.verveine.parser.BatchParser [files|directory]_to_parse
- */
-
-public class BatchParser extends Main {
-	
-	private Repository famixRepo;
-
-	public static void main(String[] args) {
-		new BatchParser(new PrintWriter(System.out), new PrintWriter(System.err), true/*systemExit*/, null/*options*/, null/*progress*/).compile(args);
-	}
-
-	public BatchParser(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished, @SuppressWarnings("rawtypes") Map customDefaultOptions, CompilationProgress compilationProgress) {
-		super(outWriter, errWriter, systemExitWhenFinished, customDefaultOptions, compilationProgress);
-	}
-
-	/*
-	 *  Low-level API performing the actual parsing
-	 *  Overwrite the one in org.eclipse.jdt.internal.compiler.batch.Main;
-	 */
-	public void performCompilation() {
-
-		famixRepo = new Repository(FAMIXModel.metamodel());
-
-		this.compilerOptions = new CompilerOptions(this.options);
-		this.compilerOptions.performMethodsFullRecovery = false;
-		this.compilerOptions.performStatementsRecovery = false;
-
-		// NA --- beginning of parsing code --------------------------------------------------
-		String[] tmpclasspath=null;
-		if (this.checkedClasspaths!=null) {
-			tmpclasspath = new String[this.checkedClasspaths.length];
-			int i = 0;
-			for (Classpath cp : this.checkedClasspaths) {
-				tmpclasspath[i++] = cp.getPath();
-			}
-		}
-
-		ASTParser pars = ASTParser.newParser(AST.JLS3);
-		pars.setEnvironment(/*classpathEntries*/tmpclasspath,
-				/*sourcepathEntries*/ new String[0],  // TODO this might be wrong. What if the user specifies some "-sourcepath" when calling Verveine?
-				/*encodings*/null, 
-				/*includeRunningVMBootclasspath*/true);
-		pars.setResolveBindings(true);
-		pars.setKind(ASTParser.K_COMPILATION_UNIT);
-		pars.createASTs(/*sourceFilePaths*/this.filenames, 
-				/*encodings*/this.encodings, 
-				/*bindingKeys*/new String[0], 
-				/*requestor*/new FamixRequestor(famixRepo), 
-				/*monitor*/null);
-		// NA --- end of parsing code --------------------------------------------------
-
-		/* 
-		 * NA --- Outputting --------------------------------------------------
-		 * To stdout
-		 * Repository.exportMSE() closes the stream when it finishes, we don't want this
-		 * The NonCloseOutputStream class prevents that by redefining an empty close() that does nothing
-		 * (particularly not closing the underlying System.out)
-		 */
-		//famixRepo.exportMSE( new NonCloseablePrintStream(System.out));
-		//System.out.println();
-		
-		
-		// outputting to a file
-		try {
-			famixRepo.exportMSE(new FileWriter("output.mse"));
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-	}
-
-	public Repository getFamixRepo() {
-		return famixRepo;
-	}
-	
-}
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 20)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 21)
@@ -80,7 +80,7 @@
 				fmx.setIsStub(false);
 			}
 			else {
-				System.err.println("         Namespace="+pckg.getName().getFullyQualifiedName() + ",  fallback to creating a stub");
+				System.err.println("         Namespace="+pckg.getName().getFullyQualifiedName() + ", fallbacks to creating a stub");
 				// try again without binding
 				fmx = dico.ensureFamixNamespace(pckg.getName().getFullyQualifiedName());
 			}
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 20)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 21)
@@ -76,8 +76,12 @@
 	}
 
 	/**
-	 * Creates or recovers a namespace. Also creates or recovers recusively it's parent namespaces
-	 * At least one of bnd and name must be passed, possibly both
+	 * Creates or recovers a namespace. Also creates or recovers recusively it's parent namespaces.
+	 * At least one of <b>bnd</b> and <b>name</b> must be passed.
+	 * <p>Note: Packages are created with their fully-qualified name to simplify recovering them when we don't have a binding
+	 * (for example when creating parent packages of a package we have a binding for).
+	 * Because the preferred solution in Moose is to give their simple names to packages, they must be post-processed when
+	 * all is said and done.</p>
 	 * @param bnd - the (optional) binding for the namespace
 	 * @param name - the (optional) full name for the namespace
 	 * @return the namespace created or null
@@ -85,30 +89,22 @@
 	private Namespace ensureFamixNamespaceWithParentScope(IPackageBinding bnd, String name) {
 		Namespace fmx = null;
 		Namespace parent = null;
-		String[] nameComps;
 		
 		if (bnd != null) {
-			nameComps = bnd.getNameComponents();
+			name = bnd.getName();
 		}
-		else {
-			if (name != null) {
-				nameComps = name.split("\\.");
-			}
-			else {
-				return null;
+		
+		if ( (name!=null) && (name.length() > 0) ) {
+			fmx = ensureFamixUniqEntity(Namespace.class, bnd, name);
+			// compute parent's name and creates parent
+			int last = name.lastIndexOf('.');
+			if (last > 0) {
+				parent = ensureFamixNamespaceWithParentScope(null, name.substring(0, last));
 			}
-		}
-
-		for (String nameComp : nameComps ) {
-			fmx = ensureFamixUniqEntity(Namespace.class, null, nameComp);
+			// set the parentscope relationship
 			if ( (parent != null) && (fmx != null) && (fmx.getParentScope() == null)) {
 				parent.addChildScopes(fmx);
 			}
-			parent = fmx;
-		}
-		
-		if ( (fmx != null) && (bnd != null) ) {
-			mapBind.put(bnd, fmx);
 		}
 
 		return fmx;
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineJParser.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineJParser.java	(revision 0)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineJParser.java	(revision 21)
@@ -0,0 +1,76 @@
+package fr.inria.verveine.extractor.java;
+
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTParser;
+import org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
+
+import fr.inria.verveine.core.VerveineParser;
+import fr.inria.verveine.core.gen.famix.Namespace;
+
+/**
+ * A batch parser inspired from org.eclipse.jdt.internal.compiler.batch.Main (JDT-3.6)
+ * run with:
+ * java -cp lib/org.eclipse.jdt.core_3.6.0.v_A48.jar:../Fame:/usr/local/share/eclipse/plugins/org.eclipse.equinox.common_3.5.1.R35x_v20090807-1100.jar:/usr/local/share/eclipse/plugins/org.eclipse.equinox.preferences_3.2.301.R35x_v20091117.jar:/usr/local/share/eclipse/plugins/org.eclipse.core.jobs_3.4.100.v20090429-1800.jar:/usr/local/share/eclipse/plugins/org.eclipse.core.contenttype_3.4.1.R35x_v20090826-0451.jar:/usr/local/share/eclipse/plugins/org.eclipse.core.resources_3.5.2.R35x_v20091203-1235.jar:/usr/local/share/eclipse/plugins/org.eclipse.core.runtime_3.5.0.v20090525.jar:/usr/local/share/eclipse/plugins/org.eclipse.osgi_3.5.2.R35x_v20100126.jar:../Fame/lib/akuhn-util-r28011.jar:lib/fame.jar:bin fr.inria.verveine.extractor.java.VerveineJParser [files|directory]_to_parse
+ */
+
+public class VerveineJParser extends VerveineParser {
+
+	public static void main(String[] args) {
+		VerveineJParser parser = new VerveineJParser();
+		parser.compile(args);
+		parser.renameNamespaces();
+		parser.outputMSE();
+	}
+
+	/**
+	 * As explained in JavaDictionary, Namespaces are created with their fully qualified name
+	 * We need now to give them their simple name
+	 */
+	public void renameNamespaces() {
+		for (Namespace ns : listAll(Namespace.class)) {
+			String name = ns.getName();
+			int last = name.lastIndexOf('.');
+			if (last >= 0) {
+				ns.setName(name.substring(last+1));
+			}
+		}
+	}
+
+	/*
+	 *  Low-level API performing the actual parsing
+	 *  Overwrite the one in org.eclipse.jdt.internal.compiler.batch.Main;
+	 *  SHOULD NOT USE an internal JDT class. But I don't know how to do it otherwise
+	 */
+	public void performCompilation() {
+
+		this.compilerOptions = new CompilerOptions(this.options);
+		this.compilerOptions.performMethodsFullRecovery = false;
+		this.compilerOptions.performStatementsRecovery = false;
+
+		// NA --- beginning of parsing code --------------------------------------------------
+		String[] tmpclasspath=null;
+		if (this.checkedClasspaths!=null) {
+			tmpclasspath = new String[this.checkedClasspaths.length];
+			int i = 0;
+			for (Classpath cp : this.checkedClasspaths) {
+				tmpclasspath[i++] = cp.getPath();
+			}
+		}
+
+		ASTParser pars = ASTParser.newParser(AST.JLS3);
+		pars.setEnvironment(/*classpathEntries*/tmpclasspath,
+				/*sourcepathEntries*/ new String[0],  // TODO this might be wrong. What if the user specifies some "-sourcepath" when calling Verveine?
+				/*encodings*/null, 
+				/*includeRunningVMBootclasspath*/true);
+		pars.setResolveBindings(true);
+		pars.setKind(ASTParser.K_COMPILATION_UNIT);
+		pars.createASTs(/*sourceFilePaths*/this.filenames, 
+				/*encodings*/this.encodings, 
+				/*bindingKeys*/new String[0], 
+				/*requestor*/new FamixRequestor(getFamixRepo()), 
+				/*monitor*/null);
+		// NA --- end of parsing code --------------------------------------------------
+	}
+	
+}
