Index: branches/postMoose4_3Refactoring/verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 106)
+++ branches/postMoose4_3Refactoring/verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 107)
@@ -397,19 +397,6 @@
 	}
 
 	/**
-	 * Creates and returns a FAMIX Comment
-	 * @param cmt -- the content (String) of the comment 
-	 * @return the FAMIX Comment
-	 */
-	public Comment createFamixComment(String cmt) {
-		Comment fmx = new Comment();
-		fmx.setContent(cmt);
-		this.famixRepo.add(fmx);
-		
-		return fmx;
-	}
-
-	/**
 	 * Creates and returns a FAMIX Comment and associates it with an Entity (ex: for Javadocs)
 	 * @param cmt -- the content (String) of the comment 
 	 * @param owner -- the entity concerned by this comment
@@ -445,12 +432,9 @@
 	 * Returns a Famix Inheritance relationship between two Famix Classes creating it if needed
 	 * @param sup -- the super class
 	 * @param sub -- the sub class
+	 * @param prev -- previous inheritance relationship in the same context
 	 * @return the Inheritance relationship
 	 */
-	public Inheritance ensureFamixInheritance(Type sup, Type sub) {
-		return ensureFamixInheritance(sup, sub, null);
-	}
-	
 	public Inheritance ensureFamixInheritance(Type sup, Type sub, Association prev) {
 		for (Inheritance i : sup.getSubInheritances()) {
 			if (i.getSubclass() == sub) {
@@ -469,12 +453,9 @@
 	 * Returns a Famix Reference between two Famix Entities creating it if needed
 	 * @param src -- source of the reference
 	 * @param tgt -- target of the reference
+	 * @param prev -- previous reference relationship in the same context
 	 * @return the Reference
 	 */
-	public Reference ensureFamixReference(ContainerEntity src, ContainerEntity tgt) {
-		return ensureFamixReference(src, tgt, null);
-	}
-	
 	public Reference ensureFamixReference(ContainerEntity src, ContainerEntity tgt, Association prev) {
 		Reference ref = new Reference();
 		ref.setTarget(tgt);
@@ -490,12 +471,9 @@
 	 * @param sender of the invocation
 	 * @param invoked -- method invoked
 	 * @param receiver of the invocation
+	 * @param prev -- previous invocation relationship in the same context
 	 * @return the Invocation
 	 */
-	public Invocation ensureFamixInvocation(BehaviouralEntity sender, BehaviouralEntity invoked, NamedEntity receiver) {
-		return ensureFamixInvocation(sender, invoked, receiver, null);
-	}
-
 	public Invocation ensureFamixInvocation(BehaviouralEntity sender, BehaviouralEntity invoked, NamedEntity receiver, Association prev) {
 		Invocation invok = new Invocation();
 		invok.setReceiver(receiver);
@@ -508,6 +486,14 @@
 		return invok;
 	}
 
+	/**
+	 * Returns a Famix Access between two Famix Entities creating it if needed
+	 * @param accessor -- the entity (presumably a method) accessing the attribute
+	 * @param var -- the variable accessed
+	 * @param isWrite -- whether this is an access for reading or writing in the variable
+	 * @param prev -- previous access relationship in the same context
+	 * @return the Invocation
+	 */
 	public Access ensureFamixAccess(BehaviouralEntity accessor, StructuralEntity var, boolean isWrite, Association prev) {
 		/* We keep multiple accesses from one method to a field */
 		Access acc = new Access();
@@ -609,17 +595,18 @@
 	/**
 	 * Returns a FAMIX ImplicitVariable with the given <b>name</b> (self or super) and corresponding to the <b>clazz</b>.
 	 * If this ImplicitVariable does not exist yet, it is created
-	 * @param clazz -- the Famix Class for this ImplicitVariable (should not be null)
 	 * @param name -- the name of the FAMIX ImplicitVariable (should be Dictionary.SELF_NAME or Dictionary.SUPER_NAME)
+	 * @param clazz -- the Famix Class for this ImplicitVariable (should not be null)
+	 * @param owner -- the ContainerEntity where the implicit variable appears (usually a method inside <b>clazz</b>)
 	 * @return the FAMIX ImplicitVariable or null in case of a FAMIX error
 	 */
-	public ImplicitVariable ensureFamixImplicitVariable(fr.inria.verveine.core.gen.famix.Class clazz, String name) {
+	public ImplicitVariable ensureFamixImplicitVariable(String name, fr.inria.verveine.core.gen.famix.Class clazz, ContainerEntity owner) {
 		ImplicitVariable fmx = getImplicitVariableByClass(clazz, name);
 		
 		if (fmx == null) {
 			fmx = (ImplicitVariable) createFamixEntity(ImplicitVariable.class, name);
 			if (fmx!=null) {
-				fmx.setContainer(clazz);
+				fmx.setContainer(owner);
 				fmx.setIsStub(Boolean.FALSE);
 
 				ImplicitVars iv = mapImpVar.get(clazz);				
Index: branches/postMoose4_3Refactoring/verveine.core/src/fr/inria/verveine/core/gen/famix/ImplicitVariable.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.core/src/fr/inria/verveine/core/gen/famix/ImplicitVariable.java	(revision 106)
+++ branches/postMoose4_3Refactoring/verveine.core/src/fr/inria/verveine/core/gen/famix/ImplicitVariable.java	(revision 107)
@@ -12,10 +12,10 @@
 
 
 
-    private Type container;
+    private ContainerEntity container;
     
     @FameProperty(name = "container")
-    public Type getContainer() {
+    public ContainerEntity getContainer() {
         return container;
     }
 
@@ -24,7 +24,7 @@
 		return getContainer();
 	}
 
-    public void setContainer(Type container) {
+    public void setContainer(ContainerEntity container) {
         this.container = container;
     }
     
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/Card.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/Card.java	(revision 0)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/Card.java	(revision 107)
@@ -0,0 +1,41 @@
+package ad_hoc;
+
+import java.util.ArrayList;
+import java.util.List;
+/*
+public enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES };
+
+public class Card {
+
+	public enum Rank { DEUCE, THREE, FOUR, FIVE, SIX,
+        SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE }
+
+    private final Rank rank;
+    private final Suit suit;
+    private Card(Rank rank, Suit suit) {
+        this.rank = rank;
+        this.suit = suit;
+    }
+
+    public Rank rank() { return rank; }
+    public Suit suit() { return suit; }
+    public String toString() { return rank + " of " + suit; }
+
+    private static final List<Card> protoDeck = new ArrayList<Card>();
+
+    // Initialize prototype deck
+    static {
+        for (Suit s : Suit.values())
+            for (Rank r : Rank.values()) {
+            	if (r == Rank.QUEEN) {
+            		System.out.println("God save the Queen!");
+            		}
+            	protoDeck.add(new Card(r, s));
+            }
+    }
+
+    public static ArrayList<Card> newDeck() {
+        return new ArrayList<Card>(protoDeck); // Return copy of prototype deck
+    }
+}
+*/
\ No newline at end of file
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/ad_hoc/Card.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/ad_hoc/Card.java	(revision 106)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/ad_hoc/Card.java	(revision 107)
@@ -1,40 +0,0 @@
-package ad_hoc;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class Card {
-
-	public enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES };
-
-	public enum Rank { DEUCE, THREE, FOUR, FIVE, SIX,
-        SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE }
-
-    private final Rank rank;
-    private final Suit suit;
-    private Card(Rank rank, Suit suit) {
-        this.rank = rank;
-        this.suit = suit;
-    }
-
-    public Rank rank() { return rank; }
-    public Suit suit() { return suit; }
-    public String toString() { return rank + " of " + suit; }
-
-    private static final List<Card> protoDeck = new ArrayList<Card>();
-
-    // Initialize prototype deck
-    static {
-        for (Suit s : Suit.values())
-            for (Rank r : Rank.values()) {
-            	if (r == Rank.QUEEN) {
-            		System.out.println("God save the Queen!");
-            		}
-            	protoDeck.add(new Card(r, s));
-            }
-    }
-
-    public static ArrayList<Card> newDeck() {
-        return new ArrayList<Card>(protoDeck); // Return copy of prototype deck
-    }
-}
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/ad_hoc/FameProperty.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/ad_hoc/FameProperty.java	(revision 106)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/test_src/ad_hoc/FameProperty.java	(revision 107)
@@ -29,7 +29,7 @@
  * 
  * @author akuhn
  * 
- */
+ *
 @Retention(RetentionPolicy.RUNTIME)
 @Target( { ElementType.METHOD, ElementType.FIELD })
 public @interface FameProperty {
@@ -43,5 +43,5 @@
     String opposite() default "";
 
     Class<?> type() default Void.class;
-
+*/
 }
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 106)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 107)
@@ -15,7 +15,6 @@
 import java.io.File;
 import java.util.Collection;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -28,6 +27,7 @@
 import fr.inria.verveine.core.gen.famix.BehaviouralEntity;
 import fr.inria.verveine.core.gen.famix.Comment;
 import fr.inria.verveine.core.gen.famix.FileAnchor;
+import fr.inria.verveine.core.gen.famix.ImplicitVariable;
 import fr.inria.verveine.core.gen.famix.Inheritance;
 import fr.inria.verveine.core.gen.famix.Invocation;
 import fr.inria.verveine.core.gen.famix.LocalVariable;
@@ -36,7 +36,6 @@
 import fr.inria.verveine.core.gen.famix.Parameter;
 import fr.inria.verveine.core.gen.famix.PrimitiveType;
 import fr.inria.verveine.core.gen.famix.SourceAnchor;
-import fr.inria.verveine.core.gen.famix.Type;
 import fr.inria.verveine.extractor.java.JavaDictionary;
 import fr.inria.verveine.extractor.java.VerveineJParser;
 
@@ -60,6 +59,7 @@
 	 */
 	@Before
 	public void setUp() throws Exception {
+		new File(VerveineJParser.OUTPUT_FILE).delete();
 		String[] files = new String[] {
 				"AbstractDestinationAddress.java",
 				"Node.java",
@@ -72,7 +72,6 @@
 				"server/PrintServer.java"
 		};
 
-		new File(VerveineJParser.OUTPUT_FILE).delete();
 
 		// separate parsing of each source file --------
 		for (String f : files) {
@@ -80,9 +79,11 @@
 		}
 
 		// or parsing the entire project in one pass ---
-		//VerveineJParser parser = new VerveineJParser();
-		//parser.compile(	new String[] {"test_src/LANModel/moose/lan/"});
-		//repo = parser.getFamixRepo();
+		/*VerveineJParser parser = new VerveineJParser();
+		repo = parser.getFamixRepo();
+		parser.setOptions(new String[] {"test_src/LANModel/"});
+		parser.parse();
+		parser.outputMSE();*/
 	}
 
 	/**
@@ -340,6 +341,43 @@
 	}
 
 	@Test
+	public void testImplicitVar() {
+		boolean testRan = false;
+		fr.inria.verveine.core.gen.famix.Class clazz = TestVerveineUtils.detectElement(repo, fr.inria.verveine.core.gen.famix.Class.class, "SingleDestinationAddress");
+		assertNotNull(clazz);
+		for (Method m : clazz.getMethods()) {
+			if (m.getName().equals("isDestinationFor" )) {
+				testRan = true;
+				assertEquals(1, m.getOutgoingInvocations().size());
+				Invocation invok = m.getOutgoingInvocations().iterator().next();
+				assertEquals(ImplicitVariable.class, invok.getReceiver().getClass());
+				ImplicitVariable iv = (ImplicitVariable) invok.getReceiver();
+				assertEquals("self", iv.getName());
+				assertSame(m, iv.getBelongsTo());
+			}
+		}
+		assertTrue("Test for SELF did not run, cause: SingleDestinationAddress.isDestinationFor() method not found", testRan);
+
+		testRan = false;
+		clazz = TestVerveineUtils.detectElement(repo, fr.inria.verveine.core.gen.famix.Class.class, "WorkStation");
+		assertNotNull(clazz);
+		for (Method m : clazz.getMethods()) {
+			if (m.getName().equals("name" )) {
+				testRan = true;
+				assertEquals(1, m.getOutgoingInvocations().size());
+				Invocation invok = m.getOutgoingInvocations().iterator().next();
+				assertEquals(ImplicitVariable.class, invok.getReceiver().getClass());
+				ImplicitVariable iv = (ImplicitVariable) invok.getReceiver();
+				assertEquals("super", iv.getName());
+				assertSame(m, iv.getBelongsTo());
+			}
+		}
+		assertTrue("Test for SELF did not run, cause: SingleDestinationAddress.isDestinationFor() method not found", testRan);
+
+	}
+
+
+	@Test
 	public void testInvocation() {
 		fr.inria.verveine.core.gen.famix.Class nodeClass = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "Node");
 		assertNotNull(nodeClass);
@@ -413,6 +451,7 @@
 		}
 
 	}
+
 	
 	@Test
 	public void testAccess() {
@@ -452,6 +491,7 @@
 		}
 	}
 
+
 	@Test
 	public void testSourceAnchors() {
 		SourceAnchor anc = null;
@@ -463,7 +503,7 @@
 		assertNotNull(anc);
 		assertSame(clazz, anc.getElement());
 		assertSame(FileAnchor.class, anc.getClass());
-		assertTrue("Wrong file source for class XPrinter", ((FileAnchor)anc).getFileName().equals("test_src/LANModel/moose/lan/server/PrintServer.java"));
+		assertEquals("test_src/LANModel/moose/lan/server/PrintServer.java", ((FileAnchor)anc).getFileName());
 		assertEquals(17, ((FileAnchor)anc).getStartLine());
 		assertEquals(31, ((FileAnchor)anc).getEndLine());
 
@@ -502,6 +542,7 @@
 		
 	}
 
+
 	@Test
 	public void testModifiers() {
 		fr.inria.verveine.core.gen.famix.Class clazz = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "OutputServer");
@@ -536,6 +577,7 @@
 		assertFalse(a.getIsFinal());
 	}
 
+
 	@Test
 	public void testComment() {	
 		fr.inria.verveine.core.gen.famix.Class clazz = TestVerveineUtils.detectElement(repo, fr.inria.verveine.core.gen.famix.Class.class, "SingleDestinationAddress");
@@ -555,6 +597,7 @@
 		assertEquals(34, ((FileAnchor)anc).getEndLine());
 
 	}
+
 	
 	@Test
 	public void testMetric() {
@@ -576,6 +619,7 @@
 			}
 		}		
 	}
+
 	
 	@Test
 	public void testAnnotation() {
@@ -616,4 +660,5 @@
 			}
 		}	
 	}
+
 }
\ No newline at end of file
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 106)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 107)
@@ -230,7 +230,7 @@
 
 	@SuppressWarnings({ "static-access" })
 	public boolean visit(SuperMethodInvocation node) {
-		methodInvocation(node.resolveMethodBinding(), node.getName().getFullyQualifiedName(), this.dico.ensureFamixImplicitVariable(this.context.topClass(), dico.SUPER_NAME));
+		methodInvocation(node.resolveMethodBinding(), node.getName().getFullyQualifiedName(), this.dico.ensureFamixImplicitVariable(dico.SUPER_NAME, this.context.topClass(), context.top()));
 		return super.visit(node);
 	}
 
@@ -305,7 +305,7 @@
 	private NamedEntity getReceiver(Expression expr) {
 		// msg(), same as ThisExpression
 		if (expr == null) {
-			return this.dico.ensureFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
+			return this.dico.ensureFamixImplicitVariable(dico.SELF_NAME, this.context.topClass(), context.top());
 		}
 
 		// array[i].msg()
@@ -426,7 +426,7 @@
 		
 		// this.msg()
 		else if (expr instanceof ThisExpression) {
-			return this.dico.ensureFamixImplicitVariable(this.context.topClass(), dico.SELF_NAME);
+			return this.dico.ensureFamixImplicitVariable(dico.SELF_NAME, this.context.topClass(), context.top());
 		}
 
 		// type.class.msg()
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 106)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 107)
@@ -23,10 +23,12 @@
 import org.eclipse.jdt.core.dom.ForStatement;
 import org.eclipse.jdt.core.dom.IMethodBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
+import org.eclipse.jdt.core.dom.IVariableBinding;
 import org.eclipse.jdt.core.dom.IfStatement;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.MethodInvocation;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
+import org.eclipse.jdt.core.dom.ParameterizedType;
 import org.eclipse.jdt.core.dom.ReturnStatement;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.SuperConstructorInvocation;
@@ -116,7 +118,7 @@
 		ITypeBinding bnd = node.resolveBinding();
 		@SuppressWarnings("unchecked")
 		List<TypeParameter> tparams = node.typeParameters();
-		fr.inria.verveine.core.gen.famix.Class fmx = (Class) dico.ensureFamixType(bnd, /*name*/node.getName().getIdentifier(), /*owner*/context.top(), /*ctxt*/context.top());  // isGeneric = (tparams.size()>0)
+		fr.inria.verveine.core.gen.famix.Class fmx = (Class) dico.ensureFamixType(bnd, /*name*/node.getName().getIdentifier(), /*owner*/context.top(), /*ctxt*/context.top());
 		if (fmx != null) {
 			fmx.setIsStub(false);
 
@@ -127,9 +129,7 @@
 			
 			for (TypeParameter tp : tparams) {
 				// if there is a type parameter, then fmx will be a Famix ParameterizableClass
-				// FIXME But types created with ensureFamixType cannot be ParameterizableClasses because the bindings of JDT
-				//       don't contain the proper information (isGeneric() return false :-) )
-				ParameterType fmxParam = dico.ensureFamixParameterType( tp.resolveBinding(), tp.getName().getIdentifier(), (ParameterizableClass)fmx); // note owner of the ParameterType is the ParameterizableClass
+				ParameterType fmxParam = dico.ensureFamixParameterType( tp.resolveBinding(), tp.getName().getIdentifier(), (ParameterizableClass)fmx); // note: owner of the ParameterType is the ParameterizableClass
 				if (fmxParam != null) {
 					fmxParam.setIsStub(false);
 				}
@@ -345,22 +345,23 @@
 		return super.visit(node);
 	}
 
+	@SuppressWarnings("unchecked")
 	private Collection<StructuralEntity> visitVariablesDeclarations(ASTNode node, Type varTyp, List<VariableDeclaration> fragments, ContainerEntity ctxt) {
 		Collection<StructuralEntity> ret = new ArrayList<StructuralEntity>();
 
 		fr.inria.verveine.core.gen.famix.Type fmxTyp;
 		if (varTyp.isParameterizedType()) {
-			ITypeBinding tbnd = varTyp.resolveBinding();
+			ITypeBinding parameterizedBnd = varTyp.resolveBinding();
+			ITypeBinding parameterizableBnd = (parameterizedBnd == null) ? null : parameterizedBnd.getErasure();
 			String tname = dico.findTypeName(varTyp);
 			ParameterizableClass tmpGeneric = null;
-			if (tbnd != null) {
-				tmpGeneric = (ParameterizableClass) dico.ensureFamixClass(tbnd.getErasure(), tname, /*owner*/null, /*isGeneric*/true);
-			}
-			else {
-				tmpGeneric = (ParameterizableClass) dico.ensureFamixClass(null, tname, /*owner*/null, /*isGeneric*/true);
+			tmpGeneric = (ParameterizableClass) dico.ensureFamixClass(parameterizableBnd, tname, /*owner*/null, /*isGeneric*/true);
+
+			fmxTyp = dico.ensureFamixParameterizedType(parameterizedBnd, tname, tmpGeneric, /*owner*/ctxt);
+			for (Type targ : (List<Type>) ((ParameterizedType)varTyp).typeArguments()) {
+				fr.inria.verveine.core.gen.famix.Type fmxTArg = dico.ensureFamixType(targ.resolveBinding(), dico.findTypeName(targ), null, ctxt);
+				((fr.inria.verveine.core.gen.famix.ParameterizedType)fmxTyp).addArguments(fmxTArg);
 			}
-			// varType.typeArguments()
-			fmxTyp = dico.ensureFamixParameterizedType(tbnd, tname, tmpGeneric, /*owner*/ctxt);
 		}
 		else {
 			fmxTyp = dico.ensureFamixType(varTyp.resolveBinding(), dico.findTypeName(varTyp), /*owner*/null, ctxt);
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 106)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 107)
@@ -226,7 +226,7 @@
 				name = "anonymous(" + name + ")";
 			}
 		}
-		
+
 		if (name.equals(OBJECT_NAME)) {
 			return ensureFamixClassObject(bnd);
 		}
Index: branches/postMoose4_3Refactoring/verveine.extractor.java/build.xml
===================================================================
--- branches/postMoose4_3Refactoring/verveine.extractor.java/build.xml	(revision 106)
+++ branches/postMoose4_3Refactoring/verveine.extractor.java/build.xml	(revision 107)
@@ -1,5 +1,5 @@
 <?xml version="1.0"?>
-<project name="verveine.extractor.java" default="main" basedir=".">
+<project name="verveine.extractor.java" default="compile" basedir=".">
 	<!-- Sets variables which can later be used. -->
 	<!-- The value of a property is accessed via ${} -->
 	<property name="src.dir"      location="src" />
@@ -80,9 +80,4 @@
 		</junit>
 	</target>
 
-
-	<target name="main" depends="junit">
-		<description>Main target</description>
-	</target>
-
 </project>
Index: verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 16)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 17)
@@ -10,8 +10,10 @@
 import fr.inria.verveine.core.gen.famix.Access;
 import fr.inria.verveine.core.gen.famix.Attribute;
 import fr.inria.verveine.core.gen.famix.BehaviouralEntity;
+import fr.inria.verveine.core.gen.famix.CaughtException;
 import fr.inria.verveine.core.gen.famix.Comment;
 import fr.inria.verveine.core.gen.famix.ContainerEntity;
+import fr.inria.verveine.core.gen.famix.DeclaredException;
 import fr.inria.verveine.core.gen.famix.Entity;
 import fr.inria.verveine.core.gen.famix.ImplicitVariable;
 import fr.inria.verveine.core.gen.famix.Inheritance;
@@ -24,6 +26,7 @@
 import fr.inria.verveine.core.gen.famix.Reference;
 import fr.inria.verveine.core.gen.famix.SourcedEntity;
 import fr.inria.verveine.core.gen.famix.StructuralEntity;
+import fr.inria.verveine.core.gen.famix.ThrownException;
 
 /**
  * A dictionnary of Famix entities to help create them and find them back
@@ -214,7 +217,17 @@
 	 * @return the FAMIX Class or null in case of a FAMIX error
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(String name) {
-		return (fr.inria.verveine.core.gen.famix.Class) ensureFamixEntity(fr.inria.verveine.core.gen.famix.Class.class, null, name);
+		fr.inria.verveine.core.gen.famix.Class fmx = ensureFamixEntity(fr.inria.verveine.core.gen.famix.Class.class, null, name);
+		if (fmx != null) {
+			fmx.setIsAbstract(Boolean.FALSE);
+			fmx.setIsFinal(Boolean.FALSE);
+			fmx.setIsInterface(Boolean.FALSE);
+			fmx.setIsPrivate(Boolean.FALSE);
+			fmx.setIsProtected(Boolean.FALSE);
+			fmx.setIsPublic(Boolean.FALSE);
+		}
+
+		return fmx;
 	}
 
 	/**
@@ -355,6 +368,50 @@
 		return acc;
 	}
 
+	/**
+	 * Returns a Famix DeclaredException between a method and an Exception that it declares to throw
+	 * @param meth -- the method throwing the exception
+	 * @param excep -- the exception declared to be thrown
+	 * @return the DeclaredException
+	 */
+	public DeclaredException ensureFamixDeclaredException(Method meth, fr.inria.verveine.core.gen.famix.Class excep) {
+		DeclaredException decl = new DeclaredException();
+		decl.setExceptionClass(excep);
+		decl.setDefiningMethod(meth);
+		famixRepoAdd(decl);
+		return decl;
+	}
+
+	/**
+	 * Returns a Famix CaughtException between a method and an Exception that is caught
+	 * @param meth -- the method catching the exception
+	 * @param excep -- the exception caught
+	 * @return the CaughtException
+	 */
+	public CaughtException ensureFamixCaughtException(Method meth, fr.inria.verveine.core.gen.famix.Class excep) {
+		CaughtException decl = new CaughtException();
+		decl.setExceptionClass(excep);
+		decl.setDefiningMethod(meth);
+		famixRepoAdd(decl);
+		return decl;
+	}
+
+	/**
+	 * Returns a Famix ThrownException between a method and an Exception that it (actually) throws.
+	 * Note: DeclaredException indicates that the method declares it can throw the exception,
+	 * here we state that the exception is actually thrown
+	 * @param meth -- the method throwing the exception
+	 * @param excep -- the exception thrown
+	 * @return the ThrownException
+	 */
+	public ThrownException ensureFamixThrownException(Method meth, fr.inria.verveine.core.gen.famix.Class excep) {
+		ThrownException decl = new ThrownException();
+		decl.setExceptionClass(excep);
+		decl.setDefiningMethod(meth);
+		famixRepoAdd(decl);
+		return decl;
+	}
+
 	///// Special Case: ImplicitVariables /////
 
 	/**
