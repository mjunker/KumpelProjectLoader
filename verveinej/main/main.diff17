Index: branches/postMoose4_3Refactoring/verveine.core/.classpath
===================================================================
--- branches/postMoose4_3Refactoring/verveine.core/.classpath	(revision 105)
+++ branches/postMoose4_3Refactoring/verveine.core/.classpath	(revision 106)
@@ -4,6 +4,6 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry kind="lib" path="lib/akuhn-util-r28011.jar"/>
 	<classpathentry kind="lib" path="lib/fame.jar"/>
-	<classpathentry kind="lib" path="lib/org.eclipse.jdt.core_3.6.0.v_A58.jar"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.eclipse.jdt.core"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: branches/postMoose4_3Refactoring/verveine.core/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: branches/postMoose4_3Refactoring/verveine.core/lib/famix.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: branches/postMoose4_3Refactoring/verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: branches/postMoose4_3Refactoring/verveine.core/lib/verveine.core.jar
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: branches/postMoose4_3Refactoring/verveine.core/src/fr/inria/verveine/core/VerveineParser.java
===================================================================
--- branches/postMoose4_3Refactoring/verveine.core/src/fr/inria/verveine/core/VerveineParser.java	(revision 105)
+++ branches/postMoose4_3Refactoring/verveine.core/src/fr/inria/verveine/core/VerveineParser.java	(revision 106)
@@ -8,15 +8,12 @@
 import java.util.Map;
 import java.util.Vector;
 
-import org.eclipse.jdt.core.compiler.CompilationProgress;
-import org.eclipse.jdt.internal.compiler.batch.Main;
-
 import ch.akuhn.fame.Repository;
 import fr.inria.verveine.core.gen.famix.Entity;
 import fr.inria.verveine.core.gen.famix.FAMIXModel;
 import fr.inria.verveine.core.gen.famix.SourceLanguage;
 
-public class VerveineParser extends Main {
+public class VerveineParser {
 
 	public final static String OUTPUT_FILE = "output.mse";
 	
@@ -25,21 +22,6 @@
 	SourceLanguage myLgge = null;
 
 	public VerveineParser() {
-		this(new PrintWriter(System.out),
-				new PrintWriter(System.err),
-				false/*systemExitWhenFinished*/,
-				null/*customDefaultOptions*/,
-				null/*compilationProgress*/);
-		
-	}
-
-	public VerveineParser(PrintWriter outWriter, PrintWriter errWriter,	boolean systemExitWhenFinished, @SuppressWarnings("rawtypes")Map customDefaultOptions, CompilationProgress compilationProgress) {
-		super(outWriter,
-				errWriter,
-				systemExitWhenFinished,
-				customDefaultOptions,
-				compilationProgress);
-		
 		Repository repo = new Repository(FAMIXModel.metamodel());
 		setFamixRepo(repo);
 		if (myLgge != null) {
Index: branches/postMoose4_3Refactoring/verveine.core/build.xml
===================================================================
--- branches/postMoose4_3Refactoring/verveine.core/build.xml	(revision 0)
+++ branches/postMoose4_3Refactoring/verveine.core/build.xml	(revision 106)
@@ -0,0 +1,67 @@
+<?xml version="1.0"?>
+<project name="verveine.core" default="main" basedir=".">
+	<!-- Sets variables which can later be used. -->
+	<!-- The value of a property is accessed via ${} -->
+	<property name="src.dir"      location="src" />
+	<property name="build.dir"    location="bin" />
+	<property name="docs.dir"     location="docs" />
+	<property name="dist.dir"     location="lib" />
+	<property name="famix.jar"    location="${dist.dir}/famix.jar" />
+	<property name="verveine.jar" location="${dist.dir}/verveine.core.jar" />
+
+	<!-- Create a classpath container which can be later used in the ant task
+	-->
+	<path id="build.classpath">
+		<fileset dir="${dist.dir}">
+			<include name="*.jar" />
+		</fileset>
+	</path>
+
+
+	<!-- Deletes the existing build, docs and dist directory-->
+	<target name="clean">
+		<delete dir="${build.dir}" />
+		<delete dir="${docs.dir}" />
+		<delete file="${famix.jar}" />
+		<delete file="${verveine.jar}" />
+	</target>
+
+	<!-- Creates the  build, docs and dist directory-->
+	<target name="makedir">
+		<mkdir dir="${build.dir}" />
+		<mkdir dir="${docs.dir}" />
+	</target>
+
+	<!-- Compiles the java code (including the usage of library for JUnit -->
+	<target name="compile" depends="clean, makedir">
+		<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="build.classpath">
+		</javac>
+	</target>
+
+	<!-- Creates Javadoc -->
+	<target name="docs" depends="compile">
+		<javadoc packagenames="src" sourcepath="${src.dir}" destdir="${docs.dir}">
+			<!-- Define which files / directory should get included, we include all -->
+			<fileset dir="${src.dir}">
+				<include name="**" />
+			</fileset>
+		</javadoc>
+	</target>
+
+	<!--Creates the deployable jar files  -->
+	<target name="jar" depends="compile">
+		<jar destfile="${famix.jar}" basedir="${build.dir}">
+			<include name="fr/inria/verveine/core/gen/famix/*.class"/>
+			<include name="fr/inria/verveine/core/gen/moose/*.class"/>
+		</jar>
+		<jar destfile="${verveine.jar}" basedir="${build.dir}">
+			<include name="fr/inria/verveine/core/*.class"/>
+			<include name="test/fr/inria/verveine/core/*.class"/>
+		</jar>
+	</target>
+
+	<target name="main" depends="jar">
+		<description>Main target</description>
+	</target>
+
+</project>
Index: verveine.core/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/src/fr/inria/verveine/core/VerveineParser.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/VerveineParser.java	(revision 79)
+++ verveine.core/src/fr/inria/verveine/core/VerveineParser.java	(revision 80)
@@ -42,13 +42,13 @@
 
 	public boolean linkToExisting() {
 		File existingMSE = new File(OUTPUT_FILE);
-		if (! existingMSE.exists()) {
-			return false;
-		}
-		else {
+		if (existingMSE.exists()) {
 			this.getFamixRepo().importMSEFile(OUTPUT_FILE);
 			return true;
 		}
+		else {
+			return false;
+		}
 	}
 	
 	/**
Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 79)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 80)
@@ -5,6 +5,8 @@
 import java.util.LinkedList;
 import java.util.Map;
 
+import org.eclipse.jdt.core.dom.ITypeBinding;
+
 import ch.akuhn.fame.Repository;
 
 import fr.inria.verveine.core.gen.famix.Access;
@@ -24,11 +26,14 @@
 import fr.inria.verveine.core.gen.famix.NamedEntity;
 import fr.inria.verveine.core.gen.famix.Namespace;
 import fr.inria.verveine.core.gen.famix.Parameter;
+import fr.inria.verveine.core.gen.famix.ParameterType;
+import fr.inria.verveine.core.gen.famix.ParameterizableClass;
 import fr.inria.verveine.core.gen.famix.PrimitiveType;
 import fr.inria.verveine.core.gen.famix.Reference;
 import fr.inria.verveine.core.gen.famix.SourcedEntity;
 import fr.inria.verveine.core.gen.famix.StructuralEntity;
 import fr.inria.verveine.core.gen.famix.ThrownException;
+import fr.inria.verveine.core.gen.famix.Type;
 
 /**
  * A dictionnary of Famix entities to help create them and find them back
@@ -208,7 +213,7 @@
 	 */
 	protected <T extends NamedEntity> T createFamixEntity(Class<T> fmxClass, String name) {
 		T fmx = null;
-
+//System.out.println("creating FMX Entity:"+ name +"   type: "+ fmxClass.getCanonicalName());
 		try {
 			fmx = fmxClass.newInstance();
 		} catch (Exception e) {
@@ -243,7 +248,7 @@
 	@SuppressWarnings("unchecked")
 	protected <T extends NamedEntity> T ensureFamixEntity(Class<T> fmxClass, B bnd, String name) {
 		T fmx = null;
-		
+
 		if (ImplicitVariable.class.isAssignableFrom(fmxClass)) {
 			return null;
 		}
@@ -282,18 +287,12 @@
 	}
 
 	///// ensure Famix Entities /////
-	
-	/**
-	 * Returns a FAMIX Class with the given <b>name</b>, creating it if it does not exist yet
-	 * @param name -- the name of the FAMIX Class
-	 * @return the FAMIX Class or null in case of a FAMIX error
-	 */
-	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(String name) {
-		fr.inria.verveine.core.gen.famix.Class fmx = ensureFamixEntity(fr.inria.verveine.core.gen.famix.Class.class, null, name);
+
+	protected <T extends fr.inria.verveine.core.gen.famix.Type> T ensureFamixType(Class<T> fmxClass, String name) {
+		T fmx = ensureFamixEntity(fmxClass, null, name);
 		if (fmx != null) {
 			fmx.setIsAbstract(Boolean.FALSE);
 			fmx.setIsFinal(Boolean.FALSE);
-			fmx.setIsInterface(Boolean.FALSE);
 			fmx.setIsPrivate(Boolean.FALSE);
 			fmx.setIsProtected(Boolean.FALSE);
 			fmx.setIsPublic(Boolean.FALSE);
@@ -301,12 +300,58 @@
 
 		return fmx;
 	}
+	
+	/**
+	 * Returns a FAMIX Type with the given <b>name</b>, creating it if it does not exist yet.
+	 * In the second case, sets some default properties: not Abstract, not Final, not Private, not Protected, not Public, not Interface
+	 * @param name -- the name of the FAMIX Class
+	 * @return the FAMIX Class or null in case of a FAMIX error
+	 */
+	public Type ensureFamixType(String name) {
+		return ensureFamixType(Type.class, name);
+	}
+
+	/**
+	 * Returns a FAMIX Class with the given <b>name</b>, creating it if it does not exist yet.
+	 * In the second case, sets some default properties: not Abstract, not Final, not Private, not Protected, not Public, not Interface
+	 * @param name -- the name of the FAMIX Class
+	 * @return the FAMIX Class or null in case of a FAMIX error
+	 */
+	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(String name) {
+		fr.inria.verveine.core.gen.famix.Class fmx = ensureFamixType(fr.inria.verveine.core.gen.famix.Class.class, name);
+		fmx.setIsInterface(Boolean.FALSE);
+		return fmx;
+	}
+
+	/**
+	 * Returns a FAMIX Class with the given <b>name</b>, creating it if it does not exist yet
+	 * In the second case, sets some default properties: not Abstract, not Final, not Private, not Protected, not Public, not Interface
+	 * @param name -- the name of the FAMIX Class
+	 * @return the FAMIX Class or null in case of a FAMIX error
+	 */
+	public ParameterizableClass ensureFamixParameterizableClass(String name) {
+		ParameterizableClass fmx = ensureFamixType(ParameterizableClass.class, name);
+		fmx.setIsInterface(Boolean.FALSE);
+		return fmx;
+	}
+
+	/**
+	 * Returns a FAMIX ParameterType (created by a FAMIX ParameterizableClass) with the given <b>name</b>, creating it if it does not exist yet
+	 * In the second case, sets some default properties: not Abstract, not Final, not Private, not Protected, not Public
+	 * @param name -- the name of the FAMIX ParameterType
+	 * @return the FAMIX ParameterType or null in case of a FAMIX error
+	 */
+	public ParameterType ensureFamixParameterType(String name) {
+		ParameterType fmx = ensureFamixType(ParameterType.class, name);
+		return fmx;
+	}
 
 	/**
 	 * Returns a FAMIX Method with the given <b>name</b>, creating it if it does not exist yet
 	 * @param name -- the name of the FAMIX Method
 	 * @return the FAMIX Method or null in case of a FAMIX error
 	 */
+
 	public Method ensureFamixMethod(String name) {
 		return (Method) ensureFamixEntity(Method.class, null, name);
 	}
@@ -358,17 +403,17 @@
 	}
 	
 	/**
-	 * Creates and returns a FAMIX Parameter and associates it with an BehaviouralEntity
+	 * Creates and returns a FAMIX Parameter and associates it with a BehaviouralEntity
 	 * @param identifier -- the name of the parameter
 	 * @param owner -- the entity concerned by this parameter
 	 * @param type -- the type of the parameter
 	 * @return the FAMIX parameter
 	 */
-	public Parameter createFamixParameter(String identifier, BehaviouralEntity owner, String type) {
+	public Parameter createFamixParameter(String identifier, BehaviouralEntity owner, Type type) {
 		Parameter fmx = new Parameter();
 		fmx.setName(identifier);
 		fmx.setParentBehaviouralEntity(owner);
-		fmx.setDeclaredType(ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, type));
+		fmx.setDeclaredType(type);
 		this.famixRepo.add(fmx);
 		
 		return fmx;
@@ -382,11 +427,11 @@
 	 * @param sub -- the sub class
 	 * @return the Inheritance relationship
 	 */
-	public Inheritance ensureFamixInheritance(fr.inria.verveine.core.gen.famix.Class sup, fr.inria.verveine.core.gen.famix.Class sub) {
+	public Inheritance ensureFamixInheritance(Type sup, Type sub) {
 		return ensureFamixInheritance(sup, sub, null);
 	}
 	
-	public Inheritance ensureFamixInheritance(fr.inria.verveine.core.gen.famix.Class sup, fr.inria.verveine.core.gen.famix.Class sub, Association prev) {
+	public Inheritance ensureFamixInheritance(Type sup, Type sub, Association prev) {
 		for (Inheritance i : sup.getSubInheritances()) {
 			if (i.getSubclass() == sub) {
 				return i;
@@ -671,5 +716,6 @@
 
 		return fmx;
 	}
+
 	
 }
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/AnnotationInstance.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/AnnotationInstance.java	(revision 79)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/AnnotationInstance.java	(revision 80)
@@ -50,7 +50,7 @@
     @FameProperty(name = "attributes", derived = true)
     public Collection<AnnotationInstanceAttribute> getAttributes() {
         // TODO: this is a derived property, implement this method manually.
-        throw new UnsupportedOperationException("Not yet implemented!");  
+    	return null;
     }
         
 
Index: verveine.core/src/fr/inria/verveine/core/gen/famix/ParameterizableClass.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/gen/famix/ParameterizableClass.java	(revision 79)
+++ verveine.core/src/fr/inria/verveine/core/gen/famix/ParameterizableClass.java	(revision 80)
@@ -11,12 +11,18 @@
 @FameDescription("ParameterizableClass")
 public class ParameterizableClass extends Class {
 
-
-
     @FameProperty(name = "parameters", derived = true)
     public Collection<ParameterType> getParameters() {
-        // TODO: this is a derived property, implement this method manually.
-        throw new UnsupportedOperationException("Not yet implemented!");  
+        // this is a derived property, implement this method manually.
+    	Collection<ParameterType> ret = new LinkedList<ParameterType>();
+    	
+        for (Type inner : getTypes()) {
+        	if (inner instanceof ParameterType) {
+        		ret.add((ParameterType) inner);
+        	}
+        }
+        
+        return ret;
     }
         
 
Index: verveine.core/export-famix.jardesc
===================================================================
--- verveine.core/export-famix.jardesc	(revision 0)
+++ verveine.core/export-famix.jardesc	(revision 80)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<jardesc>
+    <jar path="verveine.core/lib/famix.jar"/>
+    <options buildIfNeeded="true" compress="true" descriptionLocation="/verveine.core/export-famix.jardesc" exportErrors="true" exportWarnings="true" includeDirectoryEntries="false" overwrite="false" saveDescription="true" storeRefactorings="false" useSourceFolders="false"/>
+    <storedRefactorings deprecationInfo="true" structuralOnly="false"/>
+    <selectedProjects/>
+    <manifest generateManifest="true" manifestLocation="/Fame/META-INF/MANIFEST.MF" manifestVersion="1.0" reuseManifest="false" saveManifest="false" usesManifest="true">
+        <sealing sealJar="false">
+            <packagesToSeal/>
+            <packagesToUnSeal/>
+        </sealing>
+    </manifest>
+    <selectedElements exportClassFiles="true" exportJavaFiles="false" exportOutputFolder="false">
+        <javaElement handleIdentifier="=verveine.core/src&lt;fr.inria.verveine.core.gen.famix"/>
+        <javaElement handleIdentifier="=verveine.core/src&lt;fr.inria.verveine.core.gen.moose"/>
+    </selectedElements>
+</jardesc>
Index: verveine.extractor.java/lib/verveine.extractor.java.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 19)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 20)
@@ -558,7 +558,15 @@
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClassStubOwner() {
 		fr.inria.verveine.core.gen.famix.Class fmx =  ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, STUB_METHOD_CONTAINER_NAME);
-		fmx.setContainer( ensureFamixNamespaceDefault());
+		if (fmx != null) {
+			fmx.setContainer( ensureFamixNamespaceDefault());
+			fmx.setIsAbstract(Boolean.FALSE);
+			fmx.setIsFinal(Boolean.FALSE);
+			fmx.setIsInterface(Boolean.FALSE);
+			fmx.setIsPrivate(Boolean.FALSE);
+			fmx.setIsProtected(Boolean.FALSE);
+			fmx.setIsPublic(Boolean.FALSE);
+		}
 
 		return fmx;
 	}
