Index: verveine.core/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 46)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 47)
@@ -22,6 +22,8 @@
 import test.fr.inria.verveine.core.TestVerveineUtils;
 import ch.akuhn.fame.Repository;
 import fr.inria.verveine.core.gen.famix.Access;
+import fr.inria.verveine.core.gen.famix.AnnotationInstance;
+import fr.inria.verveine.core.gen.famix.AnnotationType;
 import fr.inria.verveine.core.gen.famix.Attribute;
 import fr.inria.verveine.core.gen.famix.BehaviouralEntity;
 import fr.inria.verveine.core.gen.famix.Comment;
@@ -112,6 +114,8 @@
 		assertEquals(6+24, TestVerveineUtils.selectElementsOfType(repo,Inheritance.class).size());//6 internal + 24 from imported packages/classes
 		assertEquals(25, TestVerveineUtils.selectElementsOfType(repo,Access.class).size());// 16 "internal" attributes + 9 System.out
 		assertEquals(0, TestVerveineUtils.selectElementsOfType(repo,LocalVariable.class).size());
+		assertEquals(1, TestVerveineUtils.selectElementsOfType(repo,AnnotationType.class).size()); //Override
+		assertEquals(2, TestVerveineUtils.selectElementsOfType(repo,AnnotationInstance.class).size()); //PrintServer.output, SingleDestinationAddress.isDestinationFor
 	}
 
 	@Test
@@ -549,7 +553,7 @@
 	}
 	
 	@Test
-	public void testMetric() {	
+	public void testMetric() {
 		for (Method m : TestVerveineUtils.listElements(repo, Method.class, "accept")) {
 			assertNotNull(m);
 			fr.inria.verveine.core.gen.famix.Class owner = (fr.inria.verveine.core.gen.famix.Class) m.getParentType();
@@ -568,5 +572,43 @@
 			}
 		}		
 	}
-
-}
+	
+	@Test
+	public void testAnnotation() {
+		fr.inria.verveine.core.gen.famix.Class clazz;
+		Collection<AnnotationInstance> annInstances;
+		
+		AnnotationType annType = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.AnnotationType.class, "Override");
+		assertNotNull(annType);
+		assertEquals("Override", annType.getName());
+		
+		clazz = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "PrintServer");
+		assertNotNull(clazz);
+		for (Method method : clazz.getMethods()) {
+			annInstances = method.getAnnotationInstances();
+			if (method.getName().equals("output")) {
+				assertEquals(1, annInstances.size());
+				AnnotationInstance annInstance = annInstances.iterator().next();
+				assertEquals("Override", annInstance.getAnnotationType().getName());
+				assertSame(annType, annInstance.getAnnotationType());
+				assertSame(method, annInstance.getAnnotatedEntity());
+			} else {
+				assertEquals(0, annInstances.size());
+			}
+		}
+		clazz = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "SingleDestinationAddress");
+		assertNotNull(clazz);
+		for (Method method : clazz.getMethods()) {
+			annInstances = method.getAnnotationInstances();
+			if (method.getName().equals("isDestinationFor")) {
+				assertEquals(1, annInstances.size());
+				AnnotationInstance annInstance = annInstances.iterator().next();
+				assertEquals("Override", annInstance.getAnnotationType().getName());
+				assertSame(annType, annInstance.getAnnotationType());
+				assertSame(method, annInstance.getAnnotatedEntity());
+			} else {
+				assertEquals(0, annInstances.size());
+			}
+		}	
+	}
+}
\ No newline at end of file
Index: verveine.core/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.core/src/fr/inria/verveine/core/Dictionary.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 6)
+++ verveine.core/src/fr/inria/verveine/core/Dictionary.java	(revision 7)
@@ -117,12 +117,12 @@
 
 	/**
 	 * Creates and returns a FAMIX Entity of the type <b>fmxClass</b>.
-	 * The Entity is always created (see {@link Dictionary#ensureFamixStub(Class, Object, String)}).
+	 * The Entity is always created (see {@link Dictionary#ensureFamixEntity(Class, Object, String)}).
 	 * @param fmxClass -- the FAMIX class of the instance to create
 	 * @param name -- the name of the new instance
 	 * @return the FAMIX Entity or null in case of a FAMIX error
 	 */
-	protected <T extends NamedEntity> T createFamixStub(Class<T> fmxClass, String name) {
+	protected <T extends NamedEntity> T createFamixEntity(Class<T> fmxClass, String name) {
 		T fmx = null;
 
 		try {
@@ -163,7 +163,7 @@
 	 * TODO Make public and remove ensureFamixClass(name), ensureFamixAttribute(name), ... ????
 	 */
 	@SuppressWarnings("unchecked")
-	protected <T extends NamedEntity> T ensureFamixStub(Class<T> fmxClass, B bnd, String name) {
+	protected <T extends NamedEntity> T ensureFamixEntity(Class<T> fmxClass, B bnd, String name) {
 		T fmx = null;
 		
 		if (ImplicitVariable.class.isAssignableFrom(fmxClass)) {
@@ -185,7 +185,7 @@
 			return fmx;
 		}
 
-		fmx = createFamixStub(fmxClass, name);
+		fmx = createFamixEntity(fmxClass, name);
 		// put new entity in mappers
 		if (bnd != null) {
 			mapBind.put(bnd, fmx);
@@ -211,7 +211,7 @@
 	 * @return the FAMIX Class or null in case of a FAMIX error
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(String name) {
-		return (fr.inria.verveine.core.gen.famix.Class) ensureFamixStub(fr.inria.verveine.core.gen.famix.Class.class, null, name);
+		return (fr.inria.verveine.core.gen.famix.Class) ensureFamixEntity(fr.inria.verveine.core.gen.famix.Class.class, null, name);
 	}
 
 	/**
@@ -220,7 +220,7 @@
 	 * @return the FAMIX Method or null in case of a FAMIX error
 	 */
 	public Method ensureFamixMethod(String name) {
-		return (Method) ensureFamixStub(Method.class, null, name);
+		return (Method) ensureFamixEntity(Method.class, null, name);
 	}
 
 	/**
@@ -229,7 +229,7 @@
 	 * @return the FAMIX Attribute or null in case of a FAMIX error
 	 */
 	public Attribute ensureFamixAttribute(String name) {
-		return (Attribute) ensureFamixStub(Attribute.class, null, name);
+		return (Attribute) ensureFamixEntity(Attribute.class, null, name);
 	}
 
 	/**
@@ -238,7 +238,7 @@
 	 * @return the FAMIX LocalVariable or null in case of a FAMIX error
 	 */
 	public LocalVariable ensureFamixLocalVariable(String name) {
-		return (LocalVariable) ensureFamixStub(LocalVariable.class, null, name);
+		return (LocalVariable) ensureFamixEntity(LocalVariable.class, null, name);
 	}
 
 	///// ensure Famix Relationships /////
@@ -371,7 +371,7 @@
 		ImplicitVariable fmx = getImplicitVariableByClass(clazz, name);
 		
 		if (fmx == null) {
-			fmx = (ImplicitVariable) createFamixStub(ImplicitVariable.class, name);
+			fmx = (ImplicitVariable) createFamixEntity(ImplicitVariable.class, name);
 			if (fmx!=null) {
 				fmx.setContainer(clazz);
 				fmx.setIsStub(Boolean.FALSE);
@@ -419,7 +419,7 @@
 				fmx = l.iterator().next();
 			}
 			else {
-				fmx = createFamixStub(fmxClass, name);
+				fmx = createFamixEntity(fmxClass, name);
 			}
 			
 			if (bnd != null) {
