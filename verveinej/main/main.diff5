Index: verveine.extractor.java/test_src/ad_hoc/Dictionary.java
===================================================================
--- verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 117)
+++ verveine.extractor.java/test_src/ad_hoc/Dictionary.java	(revision 118)
@@ -127,6 +127,10 @@
 	}
 }
 
+class ImplicitVariable extends NamedEntity {
+	
+}
+
 class Repository {
 	public boolean isEmtpy() {
 		return false;
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineVisitor.java	(revision 117)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineVisitor.java	(revision 118)
@@ -170,7 +170,7 @@
 		ITypeBinding bnd = node.resolveBinding();
 		@SuppressWarnings("unchecked")
 		List<TypeParameter> tparams = (List<TypeParameter>)node.typeParameters();
-		fr.inria.verveine.core.gen.famix.Class fmx = dico.ensureFamixClass(bnd, /*name*/node.getName().getIdentifier(), /*owner*/context.top(), tparams.size()>0); //   /*ctxt*/context.top());
+		fr.inria.verveine.core.gen.famix.Class fmx = dico.ensureFamixClass(bnd, /*name*/node.getName().getIdentifier(), /*owner*/context.top(), tparams.size()>0);
 		if (fmx != null) {
 			fmx.setIsStub(false);
 
@@ -301,18 +301,23 @@
 				paramTypes.add(param.getType());
 		}
 
-		// creating/recovering it
-		// creates it with a fake return type because we might need this FamixMethod to create the return type (if it is a ParameterizedType)
-		// we reset the return type to its proper value later
-		Method fmx = dico.ensureFamixMethod(bnd, node.getName().getIdentifier(), paramTypes, /*retType*/dico.ensureFamixClassObject(null), context.topClass());
+		fr.inria.verveine.core.gen.famix.Type fmxRetTyp = null;
+		if (! node.isConstructor()) {
+			// creates the method with a fake return type because we might need this FamixMethod to create the return type (if it is a ParameterizedType)
+			// we reset the return type to its proper value later
+			fmxRetTyp = dico.ensureFamixClassObject(null);
+		}
+		Method fmx = dico.ensureFamixMethod(bnd, node.getName().getIdentifier(), paramTypes, /*retType*/fmxRetTyp, context.topClass());
 
 		if (fmx != null) {
 			fmx.setIsStub(false);
 			
 			// now will recompute the actual returnType
 			this.context.pushMethod(fmx);
-			fr.inria.verveine.core.gen.famix.Type fmxRetTyp = referedType(node.getReturnType2(), fmx);
-			fmx.setDeclaredType(fmxRetTyp);
+			if (! node.isConstructor()) {
+				fmxRetTyp = referedType(node.getReturnType2(), fmx);
+				fmx.setDeclaredType(fmxRetTyp);
+			}
 
 			dico.addSourceAnchor(fmx, node);
 			dico.addFamixAnnotationInstances(bnd, fmx);
@@ -466,6 +471,11 @@
 				((fr.inria.verveine.core.gen.famix.ParameterizedType)fmxTyp).addArguments(fmxTArg);
 			}
 		}
+		else if ( typ.isSimpleType() && (typ.resolveBinding()==null) && (ctxt instanceof Method)) {
+			// might be a wildcardType with no previous "definition"
+			// in this case the owner is this very method
+			fmxTyp = dico.ensureFamixType((ITypeBinding)null, dico.findTypeName(typ), /*owner*/ctxt, ctxt);
+		}
 		else {
 			fmxTyp = dico.ensureFamixType(typ.resolveBinding(), dico.findTypeName(typ), /*owner*/null, ctxt);
 		}
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 117)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 118)
@@ -114,7 +114,7 @@
 			if (name == null) {
 				return null;
 			}
-			fmx = searchTypeInContext(name, ctxt);
+			fmx = searchTypeInContext(name, ctxt); // WildCard Types don't have binding
 			if (fmx != null) {
 				return fmx;
 			}
@@ -146,10 +146,6 @@
 			return ensureFamixEnum(bnd, name, owner);
 		}
 		
-		if (bnd.isTypeVariable() ) {
-			return ensureFamixParameterType(bnd, name, (ParameterizableClass) owner);
-		}
-
 		if (bnd.isRawType() || bnd.isGenericType()) {
 			return ensureFamixClass(bnd.getErasure(), name, owner, /*isGeneric*/true);
 		}
@@ -163,6 +159,20 @@
 			return ensureFamixClass(bnd, name, owner, /*isGeneric*/false);
 		}
 
+		if (name == null) {
+			name = bnd.getName();
+		}
+		
+		if (owner == null) {
+			owner = ensureOwner(bnd);
+		}
+
+		if (bnd.isTypeVariable() ) {
+			// a type defined for a method parameter or return type
+			fmx = super.ensureFamixType(bnd, name, owner);
+			
+			return fmx;
+		}
 
 		return super.ensureFamixType(bnd, name, owner);
 	}
@@ -205,7 +215,6 @@
 
 		fmx = (fr.inria.verveine.core.gen.famix.Class)getEntityByKey(bnd);	// to avoid useless computations if we can
 		if (fmx != null) {
-//			System.out.println("ensureClass, recovered from bnd:"+fmx.toString());
 			return fmx;
 		}
 
@@ -246,31 +255,7 @@
 
 		// --------------- owner
 		if (owner == null) {
-			IMethodBinding parentMtd = bnd.getDeclaringMethod();
-			if (parentMtd != null) {
-				owner = this.ensureFamixMethod(parentMtd, null, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, null);  // cast needed to desambiguate the call
-			}
-			else {
-				ITypeBinding parentClass = bnd.getDeclaringClass();
-				if (parentClass != null) {
-					Type tmpOwn = this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null);
-					if (tmpOwn instanceof ParameterizedType) {
-						owner = ((ParameterizedType) tmpOwn).getParameterizableClass(); 
-					}
-					else {
-						owner = tmpOwn;
-					}
-				}
-				else {
-					IPackageBinding parentPckg = bnd.getPackage();
-					if (parentPckg != null) {
-						owner = this.ensureFamixNamespace(parentPckg, null);
-					}
-					else {
-						owner = this.ensureFamixNamespaceDefault();
-					}
-				}
-			}
+			owner = ensureOwner(bnd);
 		}
 
 		// --------------- superclasses (including interfaces)
@@ -315,6 +300,41 @@
 		return fmx;
 	}
 
+	/**
+	 * Ensures a famix entity for a owner that can be a method, a class or a namespace
+	 * @param bnd -- binding for the owned entity
+	 * @return a famix entity for the owner
+	 */
+	private ContainerEntity ensureOwner(ITypeBinding bnd) {
+		ContainerEntity owner = null;
+		IMethodBinding parentMtd = bnd.getDeclaringMethod();
+		if (parentMtd != null) {
+			owner = this.ensureFamixMethod(parentMtd, null, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, null);  // cast needed to desambiguate the call
+		}
+		else {
+			ITypeBinding parentClass = bnd.getDeclaringClass();
+			if (parentClass != null) {
+				Type tmpOwn = this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null);
+				if (tmpOwn instanceof ParameterizedType) {
+					owner = ((ParameterizedType) tmpOwn).getParameterizableClass(); 
+				}
+				else {
+					owner = tmpOwn;
+				}
+			}
+			else {
+				IPackageBinding parentPckg = bnd.getPackage();
+				if (parentPckg != null) {
+					owner = this.ensureFamixNamespace(parentPckg, null);
+				}
+				else {
+					owner = this.ensureFamixNamespaceDefault();
+				}
+			}
+		}
+		return owner;
+	}
+
 /*	public ParameterizableClass ensureFamixParameterizableType(ITypeBinding bnd, String name, ContainerEntity owner) {
 		ParameterizableClass fmx = null;
 		
@@ -349,31 +369,7 @@
 
 		// --------------- owner
 		if (owner == null) {
-			IMethodBinding parentMtd = bnd.getDeclaringMethod();
-			if (parentMtd != null) {
-				owner = this.ensureFamixMethod(parentMtd, null, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, null);  // cast needed to desambiguate the call
-			}
-			else {
-				ITypeBinding parentClass = bnd.getDeclaringClass();
-				if (parentClass != null) {
-					Type tmpOwn = this.ensureFamixType(parentClass, /*name*/null, /*owner*/null, /*ctxt*/null);
-					if (tmpOwn instanceof ParameterizedType) {
-						owner = ((ParameterizedType) tmpOwn).getParameterizableClass(); 
-					}
-					else {
-						owner = tmpOwn;
-					}
-				}
-				else {
-					IPackageBinding parentPckg = bnd.getPackage();
-					if (parentPckg != null) {
-						owner = this.ensureFamixNamespace(parentPckg, null);
-					}
-					else {
-						owner = this.ensureFamixNamespaceDefault();
-					}
-				}
-			}
+			owner = ensureOwner(bnd);
 		}
 
 		// --------------- generic
@@ -432,25 +428,7 @@
 
 		// --------------- owner
 		if (owner == null) {
-			IMethodBinding parentMtd = bnd.getDeclaringMethod();
-			if (parentMtd != null) {
-				owner = this.ensureFamixMethod(parentMtd, null, (Collection<org.eclipse.jdt.core.dom.Type>)null, null, null);  // cast needed to desambiguate the call
-			}
-			else {
-				ITypeBinding parentClass = bnd.getDeclaringClass();
-				if (parentClass != null) {
-					owner = this.ensureFamixClass(parentClass, null, null);
-				}
-				else {
-					IPackageBinding parentPckg = bnd.getPackage();
-					if (parentPckg != null) {
-						owner = this.ensureFamixNamespace(parentPckg, null);
-					}
-					else {
-						owner = this.ensureFamixNamespaceDefault();
-					}
-				}
-			}
+			owner = ensureOwner(bnd);
 		}
 
 		// --------------- recover from name ?
Index: verveine.extractor.java/.classpath
===================================================================
--- verveine.extractor.java/.classpath	(revision 80)
+++ verveine.extractor.java/.classpath	(revision 81)
@@ -11,8 +11,7 @@
 	<classpathentry kind="lib" path="lib/org.eclipse.equinox.common_3.6.0.v20100503.jar"/>
 	<classpathentry kind="lib" path="lib/org.eclipse.equinox.preferences_3.3.0.v20100503.jar"/>
 	<classpathentry kind="lib" path="lib/fame.jar"/>
-	<classpathentry kind="lib" path="lib/famix.jar"/>
-	<classpathentry kind="lib" path="lib/verveine.core.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/verveine.core"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: verveine.extractor.java/memusage.txt
===================================================================
--- verveine.extractor.java/memusage.txt	(revision 0)
+++ verveine.extractor.java/memusage.txt	(revision 81)
@@ -0,0 +1,54 @@
+
+memory usage for Eclipse 3.1
+$ time ./verveinej3_1.sh 2> toto.log >&2
+$ time ./verveinej-mono-3_1.sh 2> toto.log >&2
+
+120.51user 3.31system 2:25.05elapsed 85%CPU 
+(0avgtext+0avgdata 9.646.080maxresident)k
+292144inputs+221248outputs (2356major+700607minor)pagefaults 0swaps
+8522 toto.log
+
+120.79user 2.95system 1:53.51elapsed 109%CPU 
+(0avgtext+0avgdata 9.175.040maxresident)k
+142416inputs+220976outputs (87major+622960minor)pagefaults 0swaps
+8522 toto.log
+3.340.182 output.mse
+
+112.33user 4.35system 1:40.17elapsed 116%CPU 
+(0avgtext+0avgdata 9.777.152maxresident)k
+68760inputs+221504outputs (190major+682907minor)pagefaults 0swaps
+
+$ for i in `grep FAMIX output.mse | sed -e 's/ (id:.*//' | sed -e 's/^        (//' | sort -u`; do echo -n "$i   "; grep -c $i output.mse ; done
+FAMIX.Access   60984
+FAMIX.Attribute   27473
+FAMIX.CaughtException   3690
+FAMIX.Class   7906
+FAMIX.Comment   37000
+FAMIX.DeclaredException   3848
+FAMIX.FileAnchor   124493
+FAMIX.ImplicitVariable   4996
+FAMIX.Inheritance   7136
+FAMIX.Invocation   169940
+FAMIX.LocalVariable   37753
+FAMIX.Method   53602
+FAMIX.Namespace   377
+FAMIX.Parameter   52480
+FAMIX.PrimitiveType   9
+FAMIX.Reference   30799
+FAMIX.ThrownException   2414
+FAMIX.UnknownVariable   23090
+FAMIX   647990
+
+$ grep -c 'null binding' toto.log 
+8413
+
+
+=======================================
+SEPARATE
+
+2041.59user 115.58system 27:47.42elapsed 129%CPU 
+(0avgtext+0avgdata 7.086.080maxresident)k
+135200inputs+6149832outputs (110major+16978083minor)pagefaults 0swaps
+
+
+FAMIX.Attribute   27520
Index: verveine.extractor.java/lib/famix.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/test_src/Dictionary/Dictionary.java
===================================================================
--- verveine.extractor.java/test_src/Dictionary/Dictionary.java	(revision 80)
+++ verveine.extractor.java/test_src/Dictionary/Dictionary.java	(revision 81)
@@ -32,13 +32,6 @@
 
 public class Dictionary<B> {
 
-	public static final String DEFAULT_PCKG_NAME = "<Default Package>";
-	public static final String STUB_METHOD_CONTAINER_NAME = "<StubMethodContainer>";
-	public static final String SELF_NAME = "self";
-	public static final String SUPER_NAME = "super";
-
-	protected Repository famixRepo;
-
 	protected Map<B,NamedEntity> mapBind;
 
 	protected Map<String,Collection<NamedEntity>> mapName;
@@ -66,78 +59,6 @@
 			recoverExistingRepository();
 		}
 	}
-
-	protected void recoverExistingRepository() {
-		for (Object obj : famixRepo.getElements()) {
-			if (obj instanceof NamedEntity) {
-				mapEntityToName( ((NamedEntity)obj).getName(), (NamedEntity) obj);
-			}
-		}
-		
-		for (Access acc : famixRepo.all(Access.class)) {
-			try {
-				if (acc.getIsWrite()) { }
-			}
-			catch (NullPointerException e) {
-				acc.setIsWrite(Boolean.FALSE);
-			}
-		}
-
-		for (fr.inria.verveine.core.gen.famix.Class clazz : famixRepo.all(fr.inria.verveine.core.gen.famix.Class.class)) {
-			try { if (clazz.getIsAbstract()) { } }
-			catch (NullPointerException e) { clazz.setIsAbstract(Boolean.FALSE); }
-			try { if (clazz.getIsStub()) { } }
-			catch (NullPointerException e) { clazz.setIsStub(Boolean.FALSE); }
-			try { if (clazz.getIsPublic()) { } }
-			catch (NullPointerException e) { clazz.setIsPublic(Boolean.FALSE); }
-			try { if (clazz.getIsPrivate()) { } }
-			catch (NullPointerException e) { clazz.setIsPrivate(Boolean.FALSE); }
-			try { if (clazz.getIsProtected()) { } }
-			catch (NullPointerException e) { clazz.setIsProtected(Boolean.FALSE); }
-			try { if (clazz.getIsFinal()) { } }
-			catch (NullPointerException e) { clazz.setIsFinal(Boolean.FALSE); }
-		}
-
-		for (Method meth : famixRepo.all(Method.class)) {
-			try { if (meth.getIsAbstract()) { } }
-			catch (NullPointerException e) { meth.setIsAbstract(Boolean.FALSE); }
-			try { if (meth.getIsStub()) { } }
-			catch (NullPointerException e) { meth.setIsStub(Boolean.FALSE); }
-			try { if (meth.getIsPublic()) { } }
-			catch (NullPointerException e) { meth.setIsPublic(Boolean.FALSE); }
-			try { if (meth.getIsPrivate()) { } }
-			catch (NullPointerException e) { meth.setIsPrivate(Boolean.FALSE); }
-			try { if (meth.getIsProtected()) { } }
-			catch (NullPointerException e) { meth.setIsProtected(Boolean.FALSE); }
-			try { if (meth.getIsFinal()) { } }
-			catch (NullPointerException e) { meth.setIsFinal(Boolean.FALSE); }
-		}
-
-		for (Attribute att : famixRepo.all(Attribute.class)) {
-			try { if (att.getIsAbstract()) { } }
-			catch (NullPointerException e) { att.setIsAbstract(Boolean.FALSE); }
-			try { if (att.getIsStub()) { } }
-			catch (NullPointerException e) { att.setIsStub(Boolean.FALSE); }
-			try { if (att.getIsPublic()) { } }
-			catch (NullPointerException e) { att.setIsPublic(Boolean.FALSE); }
-			try { if (att.getIsPrivate()) { } }
-			catch (NullPointerException e) { att.setIsPrivate(Boolean.FALSE); }
-			try { if (att.getIsProtected()) { } }
-			catch (NullPointerException e) { att.setIsProtected(Boolean.FALSE); }
-			try { if (att.getIsFinal()) { } }
-			catch (NullPointerException e) { att.setIsFinal(Boolean.FALSE); }
-		}
-
-	}
-	
-	protected void mapEntityToName(String name, NamedEntity ent) {
-		Collection<NamedEntity> l_ent = mapName.get(name);
-		if (l_ent == null) {
-			l_ent = new LinkedList<NamedEntity>();
-		}
-		l_ent.add(ent);
-		mapName.put(name, l_ent);
-	}
 	
 	@SuppressWarnings("unchecked")
 	public <T extends NamedEntity> Collection<T> getEntityByName(Class<T> fmxClass, String name) {
@@ -218,264 +139,5 @@
 		
 		return fmx;
 	}
-
-	public void famixRepoAdd(Entity e) {
-		this.famixRepo.add(e);
-	}
-
-	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(String name) {
-		fr.inria.verveine.core.gen.famix.Class fmx = ensureFamixEntity(fr.inria.verveine.core.gen.famix.Class.class, null, name);
-		if (fmx != null) {
-			fmx.setIsAbstract(Boolean.FALSE);
-			fmx.setIsFinal(Boolean.FALSE);
-			fmx.setIsInterface(Boolean.FALSE);
-			fmx.setIsPrivate(Boolean.FALSE);
-			fmx.setIsProtected(Boolean.FALSE);
-			fmx.setIsPublic(Boolean.FALSE);
-		}
-
-		return fmx;
-	}
-
-	public Method ensureFamixMethod(String name) {
-		return (Method) ensureFamixEntity(Method.class, null, name);
-	}
-
-	public Attribute ensureFamixAttribute(String name) {
-		return (Attribute) ensureFamixEntity(Attribute.class, null, name);
-	}
-
-	public LocalVariable ensureFamixLocalVariable(String name) {
-		return (LocalVariable) ensureFamixEntity(LocalVariable.class, null, name);
-	}
-
-	public Comment createFamixComment(String cmt) {
-		Comment fmx = new Comment();
-		fmx.setContent(cmt);
-		this.famixRepo.add(fmx);
-		
-		return fmx;
-	}
-
-	public Comment createFamixComment(String cmt, SourcedEntity owner) {
-		Comment fmx = new Comment();
-		fmx.setContent(cmt);
-		fmx.setContainer(owner);
-		this.famixRepo.add(fmx);
-		
-		return fmx;
-	}
-
-	public Parameter createFamixParameter(String identifier, BehaviouralEntity owner, String type) {
-		Parameter fmx = new Parameter();
-		fmx.setName(identifier);
-		fmx.setParentBehaviouralEntity(owner);
-		fmx.setDeclaredType(ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, type));
-		this.famixRepo.add(fmx);
-		
-		return fmx;
-	}
-	
-	public Inheritance ensureFamixInheritance(fr.inria.verveine.core.gen.famix.Class sup, fr.inria.verveine.core.gen.famix.Class sub) {
-		return ensureFamixInheritance(sup, sub, null);
-	}
-	
-	public Inheritance ensureFamixInheritance(fr.inria.verveine.core.gen.famix.Class sup, fr.inria.verveine.core.gen.famix.Class sub, Association prev) {
-		for (Inheritance i : sup.getSubInheritances()) {
-			if (i.getSubclass() == sub) {
-				return i;
-			}
-		}
-		Inheritance inh = new Inheritance();
-		inh.setSuperclass(sup);
-		inh.setSubclass(sub);
-		chainPrevNext(prev,inh);
-		famixRepoAdd(inh);
-		return inh;
-	}
-
-	public Reference ensureFamixReference(ContainerEntity src, ContainerEntity tgt) {
-		return ensureFamixReference(src, tgt, null);
-	}
-	
-	public Reference ensureFamixReference(ContainerEntity src, ContainerEntity tgt, Association prev) {
-		Reference ref = new Reference();
-		ref.setTarget(tgt);
-		ref.setSource(src);
-		chainPrevNext(prev,ref);
-		famixRepoAdd(ref);
-		
-		return ref;
-	}
-
-	public Invocation ensureFamixInvocation(BehaviouralEntity sender, BehaviouralEntity invoked, NamedEntity receiver) {
-		return ensureFamixInvocation(sender, invoked, receiver, null);
-	}
-
-	public Invocation ensureFamixInvocation(BehaviouralEntity sender, BehaviouralEntity invoked, NamedEntity receiver, Association prev) {
-		Invocation invok = new Invocation();
-		invok.setReceiver(receiver);
-		invok.setSender(sender);
-		invok.setSignature(invoked.getSignature());
-		invok.addCandidates(invoked);
-		chainPrevNext(prev,invok);
-		famixRepoAdd(invok);
-		
-		return invok;
-	}
-
-	public Access ensureFamixAccess(BehaviouralEntity accessor, StructuralEntity var, boolean isWrite, Association prev) {
-		Access acc = new Access();
-		acc.setAccessor(accessor);
-		acc.setVariable(var);
-		acc.setIsWrite(new Boolean(isWrite));
-		chainPrevNext(prev, acc);
-		famixRepoAdd(acc);
-		
-		return acc;
-	}
-
-	public Access ensureFamixAccess(BehaviouralEntity accessor, StructuralEntity var, boolean isWrite) {
-		return ensureFamixAccess(accessor, var, isWrite, null);
-	}
-	
-	public Access ensureFamixAccess(BehaviouralEntity accessor, StructuralEntity var) {
-		return ensureFamixAccess(accessor, var, false, null);  // must set some default for isWrite and this one seems safer than the opposite
-	}
-
-	private void chainPrevNext(Association prev, Association next) {
-		if (prev != null) {
-			next.setPrevious(prev);  // not yet implemented in importer
-		}
-	}
-
-	public DeclaredException ensureFamixDeclaredException(Method meth, fr.inria.verveine.core.gen.famix.Class excep) {
-		DeclaredException decl = new DeclaredException();
-		decl.setExceptionClass(excep);
-		decl.setDefiningMethod(meth);
-		famixRepoAdd(decl);
-		return decl;
-	}
-
-	public CaughtException ensureFamixCaughtException(Method meth, fr.inria.verveine.core.gen.famix.Class excep) {
-		CaughtException decl = new CaughtException();
-		decl.setExceptionClass(excep);
-		decl.setDefiningMethod(meth);
-		famixRepoAdd(decl);
-		return decl;
-	}
-
-	public ThrownException ensureFamixThrownException(Method meth, fr.inria.verveine.core.gen.famix.Class excep) {
-		ThrownException decl = new ThrownException();
-		decl.setExceptionClass(excep);
-		decl.setDefiningMethod(meth);
-		famixRepoAdd(decl);
-		return decl;
-	}
-
-	public ImplicitVariable getImplicitVariableByBinding(B bnd, String iv_name) {
-		return getImplicitVariableByClass((fr.inria.verveine.core.gen.famix.Class)getEntityByBinding(bnd), iv_name);
-	}
-
-	public ImplicitVariable getImplicitVariableByClass(fr.inria.verveine.core.gen.famix.Class clazz, String name) {
-		ImplicitVars iv = mapImpVar.get(clazz);
-		ImplicitVariable ret = null;
-		
-		if (iv == null) {
-			iv = new ImplicitVars();
-		}
-		
-		if (name.equals(SELF_NAME)) {
-			ret = iv.self_iv;
-		}
-		else if (name.equals(SUPER_NAME)) {
-			ret = iv.super_iv;
-		}
-
-		return ret;
-	}
-
-	public ImplicitVariable ensureFamixImplicitVariable(fr.inria.verveine.core.gen.famix.Class clazz, String name) {
-		ImplicitVariable fmx = getImplicitVariableByClass(clazz, name);
-		
-		if (fmx == null) {
-			fmx = (ImplicitVariable) createFamixEntity(ImplicitVariable.class, name);
-			if (fmx!=null) {
-				fmx.setContainer(clazz);
-				fmx.setIsStub(Boolean.FALSE);
-
-				ImplicitVars iv = mapImpVar.get(clazz);				
-				if (iv == null) {
-					iv = new ImplicitVars();
-				}
-
-				if (name.equals(SELF_NAME)) {
-					iv.self_iv = fmx;
-				}
-				else if (name.equals(SUPER_NAME)) {
-					iv.super_iv = fmx;
-				}
-				
-				mapImpVar.put(clazz, iv);
-			}
-		}
-
-		return fmx;
-	}
-
-	@SuppressWarnings("unchecked")
-	public <T extends NamedEntity> T ensureFamixUniqEntity(Class<T> fmxClass, B bnd, String name) {
-		T fmx = null;
-		if (bnd != null) {
-			fmx = (T) getEntityByBinding(bnd);
-		}
-		
-		if (fmx == null) {
-			Collection<T> l = getEntityByName( fmxClass, name);
-			if (l.size() > 0) {
-				fmx = l.iterator().next();
-			}
-			else {
-				fmx = createFamixEntity(fmxClass, name);
-			}
-			
-			if (bnd != null) {
-				// may happen for example if the entity was first created without binding
-				// and we find a binding for it later
-				mapBind.put(bnd, fmx);
-			}
-		}
-
-		return fmx;
-	}
-
-	public Namespace ensureFamixNamespace(String name) {
-		return  ensureFamixUniqEntity(Namespace.class, null, name);
-	}
-
-	public Namespace ensureFamixNamespaceDefault() {
-		Namespace fmx =  ensureFamixUniqEntity(Namespace.class, null, DEFAULT_PCKG_NAME);
-
-		return fmx;
-	}
-
-	public PrimitiveType ensureFamixPrimitiveType(String name) {
-		return  ensureFamixUniqEntity(PrimitiveType.class, null, name);
-	}
-
-	public fr.inria.verveine.core.gen.famix.Class ensureFamixClassStubOwner() {
-		fr.inria.verveine.core.gen.famix.Class fmx =  ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, STUB_METHOD_CONTAINER_NAME);
-		if (fmx != null) {
-			fmx.setContainer( ensureFamixNamespaceDefault());
-			fmx.setIsAbstract(Boolean.FALSE);
-			fmx.setIsFinal(Boolean.FALSE);
-			fmx.setIsInterface(Boolean.FALSE);
-			fmx.setIsPrivate(Boolean.FALSE);
-			fmx.setIsProtected(Boolean.FALSE);
-			fmx.setIsPublic(Boolean.FALSE);
-		}
-
-		return fmx;
-	}
 	
 }
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_Dictionary.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_Dictionary.java	(revision 80)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_Dictionary.java	(revision 81)
@@ -22,10 +22,15 @@
 import test.fr.inria.verveine.core.TestVerveineUtils;
 import ch.akuhn.fame.Repository;
 import fr.inria.verveine.core.gen.famix.Attribute;
+import fr.inria.verveine.core.gen.famix.ContainerEntity;
+import fr.inria.verveine.core.gen.famix.Entity;
 import fr.inria.verveine.core.gen.famix.LocalVariable;
 import fr.inria.verveine.core.gen.famix.Method;
+import fr.inria.verveine.core.gen.famix.NamedEntity;
 import fr.inria.verveine.core.gen.famix.Namespace;
 import fr.inria.verveine.core.gen.famix.Parameter;
+import fr.inria.verveine.core.gen.famix.ParameterType;
+import fr.inria.verveine.core.gen.famix.ParameterizableClass;
 import fr.inria.verveine.core.gen.famix.Type;
 import fr.inria.verveine.extractor.java.JavaDictionary;
 import fr.inria.verveine.extractor.java.VerveineJParser;
@@ -60,75 +65,54 @@
 
 	@Test
 	public void testClassParameterTypes() {
-		fr.inria.verveine.core.gen.famix.Class nodeClass = TestVerveineUtils.detectElement(repo, fr.inria.verveine.core.gen.famix.Class.class, "Dictionary");
-		assertNotNull(nodeClass);
-		assertEquals("Dictionary", nodeClass.getName());
-		assertFalse(nodeClass.getIsInterface());
-		assertEquals(1, nodeClass.getParameterTypes().size());
-		assertSame(TestVerveineUtils.detectElement(repo, Type.class, "B"), nodeClass.getParameterTypes().iterator().next());
+		ParameterizableClass dicoClass = TestVerveineUtils.detectElement(repo, ParameterizableClass.class, "Dictionary");
+		assertNotNull(dicoClass);
+		assertEquals("Dictionary", dicoClass.getName());
+		assertEquals(2, dicoClass.getTypes().size());
+		assertEquals(1, dicoClass.getParameters().size());
+		
+		ParameterType dicoParam = TestVerveineUtils.detectElement(repo, ParameterType.class, "B");
+		assertNotNull(dicoParam);
+		assertEquals("B", dicoParam.getName());
+		
+		assertSame(dicoClass, dicoParam.getContainer());
+		assertSame(dicoParam, dicoClass.getParameters().iterator().next());
 	}
 
 	@Test
-	public void testFieldArgumentTypes() {
-		Attribute famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "DEFAULT_PCKG_NAME");
-		assertNotNull(famixAtt);
-		assertEquals("DEFAULT_PCKG_NAME", famixAtt.getName());
-		assertNull(famixAtt.getDeclaredArgumentTypes());
+	public void testParameterTypeAsType() {
+		Method gebb = TestVerveineUtils.detectElement(repo, Method.class, "getEntityByBinding");
+		assertNotNull(gebb);
+		assertSame(1, gebb.getParameters().size());
 		
-		famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "STUB_METHOD_CONTAINER_NAME");
-		assertNotNull(famixAtt);
-		assertEquals("STUB_METHOD_CONTAINER_NAME", famixAtt.getName());
-		assertNull(famixAtt.getDeclaredArgumentTypes());
+		Parameter bnd = gebb.getParameters().iterator().next();
+		assertNotNull(bnd);
+		assertEquals("bnd", bnd.getName());
 		
-		famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "SELF_NAME");
-		assertNotNull(famixAtt);
-		assertEquals("SELF_NAME", famixAtt.getName());
-		assertNull(famixAtt.getDeclaredArgumentTypes());
+		Type b = bnd.getDeclaredType();
+		assertNotNull(b);
+		assertEquals("B", b.getName());
+		assertSame(ParameterType.class, b.getClass());
 		
-		famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "SUPER_NAME");
-		assertNotNull(famixAtt);
-		assertEquals("SUPER_NAME", famixAtt.getName());
-		assertNull(famixAtt.getDeclaredArgumentTypes());
-		
-		famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "famixRepo");
-		assertNotNull(famixAtt);
-		assertEquals("famixRepo", famixAtt.getName());
-		assertNull(famixAtt.getDeclaredArgumentTypes());
-
-		famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "mapBind");
+		ContainerEntity cont = b.getContainer();
+		assertNotNull(cont);
+		assertEquals("Dictionary", cont.getName());
+		assertSame(ParameterizableClass.class, cont.getClass());
+	}
+	
+	/*Test
+	public void testFieldArgumentTypes() {
+		Attribute famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "mapBind");
 		assertNotNull(famixAtt);
 		assertEquals("mapBind", famixAtt.getName());
 		assertEquals(2, famixAtt.getDeclaredArgumentTypes().size());
 		Iterator<Type> it = famixAtt.getDeclaredArgumentTypes().iterator();
 		assertSame(TestVerveineUtils.detectElement(repo, Type.class, "B"), it.next());
 		assertSame(TestVerveineUtils.detectElement(repo, Type.class, "NamedEntity"), it.next());
-		
-		famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "mapName");
-		assertNotNull(famixAtt);
-		assertEquals("mapName", famixAtt.getName());
-		assertEquals(2, famixAtt.getDeclaredArgumentTypes().size());
-		it = famixAtt.getDeclaredArgumentTypes().iterator();
-		assertSame(TestVerveineUtils.detectElement(repo, Type.class, "String"), it.next());
-		assertSame(TestVerveineUtils.detectElement(repo, Type.class, "Collection"), it.next());
-		
-		famixAtt = TestVerveineUtils.detectElement(repo, Attribute.class, "mapImpVar");
-		assertNotNull(famixAtt);
-		assertEquals("mapImpVar", famixAtt.getName());
-		assertEquals(2, famixAtt.getDeclaredArgumentTypes().size());
-		it = famixAtt.getDeclaredArgumentTypes().iterator();
-		Collection<Type> fmxClasses = TestVerveineUtils.listElements(repo, Type.class, "Class");
-		String javaLangNamespace = JavaDictionary.OBJECT_PACKAGE_NAME.substring(JavaDictionary.OBJECT_PACKAGE_NAME.lastIndexOf('.')+1);
-		Namespace ns = TestVerveineUtils.detectElement(repo, Namespace.class, javaLangNamespace);
-		//There are two classes with the name Class (java.lang and famix namespaces). Ensure to get the correct one.
-		for (Type fmxClass : fmxClasses) {
-			if (ns != fmxClass.getContainer()) {
-				assertSame(fmxClass, it.next());
-			}
-		}
-		assertSame(TestVerveineUtils.detectElement(repo, Type.class, "ImplicitVars"), it.next());
 	}
-
-	@Test
+*/
+	
+	/*Test
 	public void testMethodParameterArgumentTypes() {
 		Method fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "getEntityByName");
 		assertNotNull(fmxMethod);
@@ -192,8 +176,9 @@
 			}
 		}
 	}
+	*/
 	
-	@Test
+	/*Test
 	public void testMethodLocalVariableArgumentTypes() {
 		Method fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "mapEntityToName");
 		assertNotNull(fmxMethod);
@@ -233,12 +218,14 @@
 			}
 		}
 	}
+	*/
 	
-	@Test
+	/*Test
 	public void testMethodReturnArgumentTypes() {
 		Method fmxMethod = TestVerveineUtils.detectElement(repo, Method.class, "getEntityByName");
 		assertNotNull(fmxMethod);
 		assertEquals(1, fmxMethod.getDeclaredArgumentTypes().size());
 		assertSame(TestVerveineUtils.detectElement(repo, Type.class, "T"), fmxMethod.getDeclaredArgumentTypes().iterator().next());
 	}
+	*/
 }
\ No newline at end of file
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 80)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineJTest_LanModel.java	(revision 81)
@@ -36,6 +36,7 @@
 import fr.inria.verveine.core.gen.famix.Parameter;
 import fr.inria.verveine.core.gen.famix.PrimitiveType;
 import fr.inria.verveine.core.gen.famix.SourceAnchor;
+import fr.inria.verveine.core.gen.famix.Type;
 import fr.inria.verveine.extractor.java.JavaDictionary;
 import fr.inria.verveine.extractor.java.VerveineJParser;
 
@@ -70,7 +71,7 @@
 				"server/OutputServer.java",
 				"server/PrintServer.java"
 		};
-		
+
 		// separate parsing of each source file
 		for (String f : files) {
 			parseFile(f);
@@ -104,7 +105,10 @@
 	
 	@Test
 	public void testEntitiesNumber() {
-		assertEquals(11+14, TestVerveineUtils.selectElementsOfType(repo,fr.inria.verveine.core.gen.famix.Class.class).size()); // 11 + {Object,String,StringBuffer,AbstractStringBuilder,PrintStream,FilterOutputStream,OutputStream,System,Comparable,Serializable,Flushable,Appendable,CharSequence,Closeable,}
+		for (Type t : TestVerveineUtils.selectElementsOfType(repo, Type.class) ) {
+			System.out.println("TEST TYPES "+t.getName()+"   --> "+t.getClass().getCanonicalName());
+		}
+		assertEquals(11+14, TestVerveineUtils.selectElementsOfType(repo,fr.inria.verveine.core.gen.famix.Class.class).size()); // 11 + {Object,String,StringBuffer,AbstractStringBuilder,PrintStream,FilterOutputStream,OutputStream,System,Comparable,Serializable,Flushable,Appendable,CharSequence,Closeable}
 		assertEquals(3, TestVerveineUtils.selectElementsOfType(repo,PrimitiveType.class).size());//int,boolean,void
 		assertEquals(40+7, TestVerveineUtils.selectElementsOfType(repo,Method.class).size());//40+{System.out.println(),System.out.println(...),System.out.print,StringBuffer.append,Object.equals,String.equals,Object.toString}
 		assertEquals(10+1, TestVerveineUtils.selectElementsOfType(repo,Attribute.class).size());//10+{System.out}
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 80)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 81)
@@ -304,7 +304,7 @@
 			if (bnd != null) {
 				if (bnd instanceof ITypeBinding) {
 					// msg() is a static method of Name
-					ret = dico.createFamixUnknownVariable( dico.ensureFamixType((ITypeBinding)bnd), bnd.getName());
+					ret = dico.createFamixUnknownVariable( dico.ensureFamixType((ITypeBinding)bnd, this.context.top()), bnd.getName());
 				}
 				else if (bnd instanceof IVariableBinding) {
 					if ( ((IVariableBinding)bnd).isField() ) {
@@ -362,7 +362,7 @@
 		// type.class.msg()
 		else if (expr instanceof TypeLiteral) {
 			// may be could specify: ensureFamixClass ??
-			return dico.ensureFamixType( expr.resolveTypeBinding());
+			return dico.ensureFamixType( expr.resolveTypeBinding(), this.context.top());
 		}
 
 		// ... OTHER POSSIBLE EXPRESSIONS ?
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 80)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 81)
@@ -36,6 +36,7 @@
 import org.eclipse.jdt.core.dom.TryStatement;
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
+import org.eclipse.jdt.core.dom.TypeParameter;
 import org.eclipse.jdt.core.dom.VariableDeclarationExpression;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
@@ -49,6 +50,7 @@
 import fr.inria.verveine.core.gen.famix.Method;
 import fr.inria.verveine.core.gen.famix.Namespace;
 import fr.inria.verveine.core.gen.famix.Parameter;
+import fr.inria.verveine.core.gen.famix.ParameterizableClass;
 
 /**
  * AST Visitor that defines all the (Famix) entities of interest
@@ -102,20 +104,43 @@
 	}
 
 	public boolean visit(TypeDeclaration node) {
-//		System.err.println("TRACE, DefVisiting TypeDeclaration: "+node.getName().getIdentifier());
+//		System.out.println("TRACE, DefVisiting TypeDeclaration: "+node.getName().getIdentifier());
+		fr.inria.verveine.core.gen.famix.Class fmx = null;
+
 		ITypeBinding bnd = node.resolveBinding();
-		fr.inria.verveine.core.gen.famix.Class fmx = dico.ensureFamixClass(bnd);
+
+		// Dealing with Parameterized classes
+		List<TypeParameter> nodeParameters = node.typeParameters();
+
+//System.out.println("                                        size="+nodeParameters.size());
+		if (nodeParameters.size() > 0) {
+			fmx = dico.ensureFamixParameterizableClass(bnd);
+		}
+		else {
+			fmx = dico.ensureFamixClass(bnd);
+		}
+		
 		if (fmx != null) {
 			fmx.setIsStub(false);
 		}
 		else {
-			// TODO try to find a binded version corresponding to this stub?
 			System.err.println("         Class="+node.getName().getIdentifier() + ",  fallback to creating a stub");
-			fmx = dico.ensureFamixClass(node.getName().getIdentifier());
+			if (nodeParameters.size() > 0) {
+				fmx = dico.ensureFamixParameterizableClass(node.getName().getIdentifier());
+			}
+			else {
+				fmx = dico.ensureFamixClass(node.getName().getIdentifier());
+			}
 			dico.ensureFamixInheritance(dico.ensureFamixClassObject(null), fmx);
 			fmx.setContainer( context.top());
 		}
-		fmx.setParameterTypes(dico.ensureFamixTypesParameters(node.typeParameters()));
+
+		// Dealing with Parameterized classes: adding the parameters
+		if (nodeParameters.size() > 0) {
+			for (TypeParameter param : nodeParameters) {
+				dico.ensureFamixParameterType(param.getName().getIdentifier(), (ParameterizableClass)fmx);
+			}
+		}
 		
 		dico.addSourceAnchor(fmx, node);
 		Javadoc jdoc = node.getJavadoc();
@@ -123,6 +148,7 @@
 			Comment cmt = dico.createFamixComment(jdoc.toString(), fmx);
 			dico.addSourceAnchor(cmt, jdoc);
 		}
+		
 		//Annotation
 		if (bnd != null) {
 			for (IAnnotationBinding abnd : bnd.getAnnotations()) {
@@ -130,6 +156,7 @@
 				dico.createFamixAnnotationInstance(fmx, annType);
 			}
 		}
+		
 		this.context.pushClass(fmx);
 		return super.visit(node);
 	}
@@ -193,10 +220,10 @@
 				} else {
 					// Has no binding? It might be a Generic parameter
 					System.err.println("         Parameter="+param.getName().getIdentifier());
-					fmxParam = dico.createFamixParameter(param.getName().getIdentifier(), fmx, param.getType().toString());
+					fmxParam = dico.createFamixParameter(param.getName().getIdentifier(), fmx, dico.ensureFamixType(param.getType().resolveBinding(), param.getType().toString(), this.context.topClass()));
 				}
 				if (param.getType().isParameterizedType()) {
-					fmxParam.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)param.getType()).typeArguments()));
+					//TODO fmxParam.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)param.getType()).typeArguments()));
 				}
 			}
 			
@@ -253,7 +280,7 @@
 				fmx.setDeclaredType(dico.ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, node.getType().toString()));
 			}
 			if (node.getType().isParameterizedType()) {
-				fmx.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)node.getType()).typeArguments()));
+				//TODO fmx.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)node.getType()).typeArguments()));
 			}
 			dico.addSourceAnchor(fmx, node);
 			Javadoc jdoc = node.getJavadoc();
@@ -307,7 +334,7 @@
 				dico.addSourceAnchor(fmx, node);
 			}
 			if (nodeTyp.isParameterizedType()) {
-				fmx.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)nodeTyp).typeArguments()));
+				//TODO fmx.setDeclaredArgumentTypes(dico.ensureFamixTypes(((ParameterizedType)nodeTyp).typeArguments()));
 			}
 		}
 	}
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 80)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 81)
@@ -30,6 +30,8 @@
 import fr.inria.verveine.core.gen.famix.NamedEntity;
 import fr.inria.verveine.core.gen.famix.Namespace;
 import fr.inria.verveine.core.gen.famix.Parameter;
+import fr.inria.verveine.core.gen.famix.ParameterType;
+import fr.inria.verveine.core.gen.famix.ParameterizableClass;
 import fr.inria.verveine.core.gen.famix.PrimitiveType;
 import fr.inria.verveine.core.gen.famix.SourceAnchor;
 import fr.inria.verveine.core.gen.famix.SourcedEntity;
@@ -67,7 +69,7 @@
 	 */
 	public Namespace ensureFamixNamespace(IPackageBinding bnd) {
 		if (bnd == null) {
-			System.err.println("Warning: Unexpected null binding, cannot create Famix Namespace");
+//			System.err.println("Warning: Unexpected null binding, cannot create Famix Namespace");
 			return null;
 		}
 
@@ -118,54 +120,108 @@
 		return fmx;
 	}
 
-	public Type ensureFamixType(ITypeBinding bnd) {
+	/** Creates or recovers a FAMIX Type. Tries to guess the exact subclass of Type of the entity.
+	 * Checks for: primitive type, interface, class, parameterizable class
+	 * @param bnd -- JDT binding for the type
+	 * @return the type recovered or created, or null in case of an error
+	 */
+	public Type ensureFamixType(ITypeBinding bnd, ContainerEntity ctxt) {
 		if (bnd == null) {
-			System.err.println("Warning: Unexpected null binding, cannot create Famix Type");
+//			System.err.println("Warning: Unexpected null binding, cannot create Famix Type");
 			return null;
 		}
+		return ensureFamixType(bnd, bnd.getName(), ctxt);
+	}
 
-		while (bnd.isArray()) {
-			bnd = bnd.getComponentType();
+	/** Creates or recovers a FAMIX Type. Tries to guess the exact subclass of Type of the entity.
+	 * Checks for: primitive type, interface, class, parameterizable class
+	 * Types are more difficult entities, they can be recovered from their binding or from their name in their context
+	 * @param bnd -- JDT binding for the type
+	 * @param name -- name of the type
+	 * @return the type recovered or created, or null in case of an error
+	 */
+	public Type ensureFamixType(ITypeBinding bnd, String name, ContainerEntity ctxt) {
+		Type fmx = null;
+	
+		if (bnd != null) {
+			bnd = findNonArrayType(bnd);
+			
+			fmx = (Type) getEntityByBinding(bnd);
+			
+			if (fmx != null) {
+				return fmx;
+			}
+
+			fmx = findTypeInContext(name, ctxt);
+			if (fmx != null) {
+				mapBind.put(bnd, fmx);
+				return fmx;
+			}
 		}
 		
-		if (bnd.isPrimitive()) {
-			return ensureFamixPrimitiveType(bnd);
+		if ( (fmx == null) && (bnd != null) ) {		
+			// not found, will have to create it
+			// from the binding
+			if (bnd.isPrimitive()) {
+				fmx = ensureFamixPrimitiveType(bnd);
+			}
+			else if (bnd.isClass())  {
+				fmx = ensureFamixClass(bnd);
+			}
+			else if (bnd.isGenericType())  {
+				fmx = ensureFamixParameterizableClass(bnd);
+			}
+			else if (bnd.isParameterizedType())  {
+				fmx = super.ensureFamixType(bnd.getName());
+				mapBind.put(bnd, fmx);
+			}
+			else {
+				fmx = super.ensureFamixType(bnd.getName());
+				mapBind.put(bnd, fmx);
+			}
 		}
-		else {
-			return ensureFamixClass(bnd);
+
+		if (fmx == null) {
+			// not found and not created by binding (probably null), will have to create it
+			// from its name
+			fmx = this.ensureFamixType(name);
 		}
+		return fmx;
 	}
 	
-	public Collection<Type> ensureFamixTypes(List<org.eclipse.jdt.core.dom.Type> types) {
-		Collection<Type> fmxTypes = new ArrayList<Type>();
-		Type fmxType = null;
-		for (org.eclipse.jdt.core.dom.Type type : types) {
-			ITypeBinding bnd = type.resolveBinding();
-			if (bnd != null) {
-				fmxType = ensureFamixType(bnd);
-			} else {
-				fmxType = ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, type.toString());
+	/** Searches for a type with the given name in the context (a Famix Method or Famix Type)
+	 * If the context is a method, zsearches in its owner. Otherwise returns null.
+	 * See {@link getEntityByName} to search an entity by its name outside any special context
+	 * @param name of the type to look for
+	 * @param ctxt -- context of the search
+	 * @return the Famix Type found or null
+	 */
+	private Type findTypeInContext(String name, ContainerEntity ctxt) {
+		if (ctxt == null) {
+//System.out.println("lookfor type"+ name+"  in NULL context  :-(");
+			return null;
+		}
+//System.out.println("lookfor type"+ name+"  in context:" +ctxt.getName());
+		for (Type typ : ctxt.getTypes()) {
+			if (typ.getName().equals(name)) {
+				return typ;
 			}
-			fmxTypes.add(fmxType);
 		}
-		return fmxTypes;
-	}
-	
-	public Type ensureFamixType(ITypeBinding bnd, String type) {
-		Type fmx = ensureFamixType(bnd);
-		if (fmx == null) {
-			return ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, type);
+		if (ctxt instanceof Method) {
+			return findTypeInContext(name, ctxt.getBelongsTo());
 		}
-		return fmx;
+		
+		return null;
 	}
-	
-	public Collection<Type> ensureFamixTypesParameters(List<TypeParameter> types) {
+
+	//TODO remove this method
+	public Collection<Type> ensureFamixTypes(List<org.eclipse.jdt.core.dom.Type> types) {
 		Collection<Type> fmxTypes = new ArrayList<Type>();
 		Type fmxType = null;
-		for (TypeParameter type : types) {
+		for (org.eclipse.jdt.core.dom.Type type : types) {
 			ITypeBinding bnd = type.resolveBinding();
 			if (bnd != null) {
-				fmxType = ensureFamixType(bnd);
+				fmxType = ensureFamixType(bnd, null);
 			} else {
 				fmxType = ensureFamixUniqEntity(fr.inria.verveine.core.gen.famix.Class.class, null, type.toString());
 			}
@@ -177,12 +233,11 @@
 	public PrimitiveType ensureFamixPrimitiveType(ITypeBinding bnd) {
 
 		if (bnd == null) {
-			System.err.println("Warning: Unexpected null binding, cannot create Famix Primitive Type");
+//			System.err.println("Warning: Unexpected null binding, cannot create Famix Primitive Type");
 			return null;
 		}
 		
 		PrimitiveType fmx = super.ensureFamixPrimitiveType(bnd.getName());
-		fmx.setIsStub(false);
 		mapBind.put(bnd, fmx);
 		return fmx;
 	}
@@ -190,7 +245,7 @@
 	public AnnotationType ensureFamixAnnotationType(ITypeBinding bnd) {
 
 		if (bnd == null) {
-			System.err.println("Warning: Unexpected null binding, cannot create Famix Annotation Type");
+//			System.err.println("Warning: Unexpected null binding, cannot create Famix Annotation Type");
 			return null;
 		}
 		
@@ -202,6 +257,41 @@
 	}
 
 	/**
+	 * Returns a Famix ParameterType (in a ParameterizableClass) with the given name
+	 * We cannot use bindings here since they are usually null (TODO check the javadoc)
+	 * @param paramName -- the name of the ParameterType
+	 * @param owner -- the ParameterizableClass that defines this ParameterType
+	 * @return the Famix Entity created. May return null if "bnd" is null or in case of a Famix error
+	 */
+	public ParameterType ensureFamixParameterType(String paramName, ParameterizableClass owner) {
+		//System.err.println("TRACE: ensureFamixParameterType( "+paramName+" , "+owner.getName()+" )");
+		ParameterType fmx = null;
+System.out.println("creating CLASS: "+paramName+"   type: ParameterType");
+		fmx = ensureFamixParameterType(paramName);
+
+		ensureFamixInheritance(ensureFamixClassObject(null), fmx);
+		fmx.setContainer( owner);
+
+		return fmx;
+	}
+	
+	/**
+	 * Returns a Famix Parameterizable Class associated with the ITypeBinding similarly to ensureFamixClass for normal classes
+	 * @param bnd -- the JDT Binding 
+	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
+	 */
+	public ParameterizableClass ensureFamixParameterizableClass(ITypeBinding bnd) {
+		if (bnd == null) {
+//			System.err.println("Warning: Unexpected null binding, cannot create Famix Class");
+			return null;
+		}
+
+		bnd = findNonArrayType(bnd);
+
+		return ensureFamixClassOrSub(ParameterizableClass.class, bnd, findClassOwner(bnd));
+	}
+
+	/**
 	 * Returns a Famix Class associated with the ITypeBinding. The Entity is created if it does not exist.
 	 * The JDT Binding is a unique representation of a java entity within the AST.
 	 * This method also creates some basic links between the entity and others (e.g. declaring container, return type, ...)
@@ -209,75 +299,105 @@
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public fr.inria.verveine.core.gen.famix.Class ensureFamixClass(ITypeBinding bnd) {
-		ContainerEntity owner = null;
-		Collection<fr.inria.verveine.core.gen.famix.Class> sups = new LinkedList<fr.inria.verveine.core.gen.famix.Class>();
-		String identifier = null;
-		boolean wasBound = false;
-		
-		
+
 		if (bnd == null) {
-			System.err.println("Warning: Unexpected null binding, cannot create Famix Class");
+//			System.err.println("Warning: Unexpected null binding, cannot create Famix Class");
 			return null;
 		}
-		
+
 		if (bnd.getName().equals(OBJECT_NAME)) {
 			return ensureFamixClassObject(bnd);
 		}
 
-		while (bnd.isArray()) {
-			bnd = bnd.getComponentType();
-		}
-		
-		if (bnd.isPrimitive()) {
-			// should have called ensureFamixPrimitiveType(bnd). Why are we here ?
-			System.err.println("Warning: cannot create Famix Class from a primitive type");
-			return null;
-		}
+		bnd = findNonArrayType(bnd);
+
+		return ensureFamixClassOrSub(fr.inria.verveine.core.gen.famix.Class.class, bnd, findClassOwner(bnd));
+	}
 		
-		// container
-		IMethodBinding parentMtd = bnd.getDeclaringMethod();
-		if (parentMtd != null) {
-			owner = this.ensureFamixMethod(parentMtd);
+	/**
+	 * Create a FamixClass or one of its subclass
+	 * @param bnd -- the JDT Binding. If null the methods silently returns null
+	 */
+	@SuppressWarnings("unchecked")
+	private <T extends fr.inria.verveine.core.gen.famix.Class>
+			T ensureFamixClassOrSub( Class<T> fmxClass, ITypeBinding bnd, ContainerEntity owner) {
+
+		String identifier = findClassName(bnd);
+//System.out.println("ensure CLASS: "+identifier+"   type: "+fmxClass.getCanonicalName());
+		Collection<fr.inria.verveine.core.gen.famix.Class> sups = findClassSupers(bnd);
+
+		// finally trying to recover the entity or creating it
+		T fmx = null;
+		// ... trying to recover from binding
+		fmx = (T) getEntityByBinding(bnd);
+
+		boolean wasBound = false;
+		if (fmx != null) {
+			wasBound = true;
 		}
 		else {
-			ITypeBinding parentClass = bnd.getDeclaringClass();
-			if (parentClass != null) {
-				owner = this.ensureFamixClass(parentClass);
-			}
-			else {
-				IPackageBinding parentPckg = bnd.getPackage();
-				if (parentPckg != null) {
-					owner = this.ensureFamixNamespace(parentPckg);
-				}
-				else {
-					owner = this.ensureFamixNamespaceDefault();
+			wasBound = false;
+			// trying to recover from name and other informations
+			for (T candidate : getEntityByName(fmxClass, identifier) ) {
+				if (candidate.getContainer() == owner) {
+					// could test superclass also...
+					fmx = candidate;
+					break;
 				}
 			}
 		}
-
-		// name
-		if (bnd.isAnonymous()) {
-			if (bnd.getSuperclass() != null) {
-				identifier = bnd.getSuperclass().getName();
-			}
-			if ( (identifier == null) || identifier.equals(OBJECT_NAME)) {
-				ITypeBinding[] intfcs = bnd.getInterfaces();
-				if ( (intfcs != null) && (intfcs.length > 0) ) {
-					identifier = bnd.getInterfaces()[0].getName();
-				}
-				else {
-					identifier = "???";
+		
+		if (fmx == null) {
+			// could not recover it, creating a new entity
+			// note: name might be different from bnd.getName() in the case of anonymous class
+			fmx = (T) ensureFamixEntity(fmxClass, bnd, identifier);
+		}
+		
+		if ((fmx!=null) && (! wasBound)) {
+			// apparently we just created it or it already existed but was not bound, so add information to it
+			fmx.setIsInterface(bnd.isInterface());
+			fmx.setContainer(owner);
+			if (sups.size() > 0) {
+				// some types don't have superclass
+				Inheritance lastInheritance = null;
+				for (fr.inria.verveine.core.gen.famix.Class sup : sups) {
+					lastInheritance = ensureFamixInheritance(sup, fmx, lastInheritance);
 				}
 			}
-			identifier = "anonymous(" + identifier + ")";
+			if (! wasBound) {
+				mapBind.put(bnd, fmx);
+			}
+			// modifiers
+			setNamedEntityModifiers(fmx, bnd.getDeclaredModifiers());
+			if (fmx.getIsAbstract()) {
+				// don't know why there must be two different ways to mark abstract classes !!! But this is a pain!
+				fmx.addModifiers("abstract");
+			}
 		}
-		else {
-			identifier = bnd.getName();
+	
+		return fmx;
+	}
+
+	/** Find the "basic" type of something that may be an array
+	 * @param bnd -- non null binding for the class definition
+	 * @return the "basic" (non array) type binding
+	 */
+	private ITypeBinding findNonArrayType(ITypeBinding bnd) {
+		while (bnd.isArray()) {
+			bnd = bnd.getComponentType();
 		}
+		return bnd;
+	}
 
-		// superclass and/or implemented interfaces
+	/** 
+	 * Finds and returns the superclass and/or implemented interfaces of a class declaration
+	 * @param bnd -- non null binding for the class definition
+	 * @return the list of super types
+	 */
+	private Collection<fr.inria.verveine.core.gen.famix.Class> findClassSupers(ITypeBinding bnd) {
+		Collection<fr.inria.verveine.core.gen.famix.Class> sups = new LinkedList<fr.inria.verveine.core.gen.famix.Class>();
 		if (! bnd.getName().equals(OBJECT_NAME)) {
-			// "Object" does't have a superclass
+			// "Object" doesn't have a superclass
 			
 			// superclass
 			if (! bnd.isInterface()) {
@@ -288,87 +408,79 @@
 				}
 				else {
 					if (supbnd != null) {
+						//TODO ensureFamixType ??
 						sups.add(ensureFamixClass(supbnd));
 					}
 					for (ITypeBinding intbnd : intsbnd) {
+						//TODO ensureFamixType ??
 						sups.add( ensureFamixClass(intbnd));
 					}
 				}
 			}
 			else {
 				for (ITypeBinding supbnd : bnd.getInterfaces()) {
+					//TODO ensureFamixType ??
 					sups.add( ensureFamixClass(supbnd));
 				}
 			}
 		}
+		return sups;
+	}
 
-		// finally trying to recover the entity or creating it
-		fr.inria.verveine.core.gen.famix.Class fmx = null;
-		// ... trying to recover from binding
-		fmx = (fr.inria.verveine.core.gen.famix.Class) getEntityByBinding(bnd);
-		
-		if (fmx != null) {
-			wasBound = true;
+	/** Finds and returns the name of a class declaration, especially for anonymous class
+	 * @param bnd -- non null binding for the class definition
+	 * @return the name
+	 */
+	private String findClassName(ITypeBinding bnd) {
+		String identifier = null;
+		if (! bnd.isAnonymous()) {
+			identifier = bnd.getName();
 		}
 		else {
-			wasBound = false;
-			// trying to recover from name and other informations
-			for (fr.inria.verveine.core.gen.famix.Class candidate : getEntityByName(fr.inria.verveine.core.gen.famix.Class.class, identifier) ) {
-				if ( //(! candidate.getIsStub()) &&
-						(candidate.getContainer() == owner) ) {
-					// could test superclass also...
-					fmx = candidate;
-					mapBind.put(bnd, fmx);
-					break;
+			if (bnd.getSuperclass() != null) {
+				identifier = bnd.getSuperclass().getName();
+			}
+			if ( (identifier == null) || identifier.equals(OBJECT_NAME)) {
+				ITypeBinding[] intfcs = bnd.getInterfaces();
+				if ( (intfcs != null) && (intfcs.length > 0) ) {
+					identifier = bnd.getInterfaces()[0].getName();
 				}
-/*				else if ( candidate.getIsStub() ) {
-					// find out whether this candidate is defined in the same namespace as the binding received in parameter
-					ContainerEntity ownerBnd = owner;  // the owner of the bounded entity received as parameter
-					ContainerEntity ownerStub = candidate.getContainer();  // the owner of the current candidate
-					while ( (ownerBnd != null) &&
-							(ownerStub != null) &&
-							(! (ownerBnd instanceof Namespace)) &&
-							(ownerBnd.getClass() == ownerStub.getClass()) &&
-							ownerBnd.getName().equals(ownerStub.getName()) ) {
-								ownerBnd = ownerBnd.getContainer();
-								ownerStub = ownerStub.getContainer();
-					}
-					if ( (ownerBnd instanceof Namespace) &&
-						(ownerStub instanceof Namespace) &&
-						ownerBnd.getName().equals(ownerStub.getName()) ) {
-						fmx = candidate;
-						mapBind.put(bnd, fmx);
-						break;
-					}
-				}*/
+				else {
+					identifier = "???";
+				}
 			}
+			identifier = "anonymous(" + identifier + ")";
 		}
-		
-		if (fmx == null) {
-			// could not recover it, creating a new entity
-			fmx = (fr.inria.verveine.core.gen.famix.Class) ensureFamixEntity(fr.inria.verveine.core.gen.famix.Class.class, bnd, bnd.getName());
+		return identifier;
+	}
+
+	/** Finds and returns the owner of a class declaration
+	 * It can be a method (anonymous class), a class (inner class, or ParameterType), or a package (normal class)
+	 * @param bnd -- non null binding for the class definition
+	 * @return the owner found
+	 */
+	private ContainerEntity findClassOwner(ITypeBinding bnd) {
+		ContainerEntity owner = null;
+		IMethodBinding parentMtd = bnd.getDeclaringMethod();
+		if (parentMtd != null) {
+			owner = this.ensureFamixMethod(parentMtd);
 		}
-		
-		if ((fmx!=null) && (! wasBound)) {
-			// apparently we just created it or it already existed but was not bound, so add information to it
-			fmx.setIsInterface(bnd.isInterface());
-			fmx.setContainer(owner);
-			if (sups.size() > 0) {
-				// some types don't have superclass
-				Inheritance lastInheritance = null;
-				for (fr.inria.verveine.core.gen.famix.Class sup : sups) {
-					lastInheritance = ensureFamixInheritance(sup, fmx, lastInheritance);
-				}
+		else {
+			ITypeBinding parentClass = bnd.getDeclaringClass();
+			if (parentClass != null) {
+				owner = this.ensureFamixClass(parentClass);
 			}
-			setNamedEntityModifiers(fmx, bnd.getDeclaredModifiers());
-			if (fmx.getIsAbstract()) {
-				// don't know why there must be two different ways to mark abstract classes !!! But this is a pain!
-				fmx.addModifiers("abstract");
+			else {
+				IPackageBinding parentPckg = bnd.getPackage();
+				if (parentPckg != null) {
+					owner = this.ensureFamixNamespace(parentPckg);
+				}
+				else {
+					owner = this.ensureFamixNamespaceDefault();
+				}
 			}
-			fmx.setName(identifier); // might be different from bnd.getName() in the case of anonymous class
 		}
-	
-		return fmx;
+		return owner;
 	}
 
 	/**
@@ -379,38 +491,26 @@
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public Method ensureFamixMethod(IMethodBinding bnd) {
-		fr.inria.verveine.core.gen.famix.Class owner = null;
+		Type owner = null;
 		Type rettyp = null;
 		String sig = null;
 		boolean wasBound = false;
 		
 		if (bnd == null) {
-			System.err.println("Warning: Unexpected null binding to Famix Method");
+//			System.err.println("Warning: Unexpected null binding to Famix Method");
 			return null;
 		}
 
 		// owner
-		owner = this.ensureFamixClass(bnd.getDeclaringClass());
+		owner = this.ensureFamixType(bnd.getDeclaringClass(), null);
 
 		// return type
 		if (! bnd.isConstructor()) {
-			rettyp = this.ensureFamixType(bnd.getReturnType());
+			rettyp = this.ensureFamixType(bnd.getReturnType(), /*context*/owner); // the context is the declaring class
 		}
 		// TODO   else what?
 
-		// method signature
-		sig = bnd.getName() + "(";
-		boolean first = true;
-		for (ITypeBinding parBnd : bnd.getParameterTypes()) {
-			if (! first) {
-				sig += "," + parBnd.getName();
-			}
-			else {
-				sig += parBnd.getName();
-				first = false;
-			}
-		}
-		sig += ")";
+		sig = computeSignature(bnd);
 
 		// finally trying to recover the entity or creating it
 		Method fmx = null;
@@ -428,7 +528,7 @@
 					 (candidate.getDeclaredType() == rettyp) &&
 					 (candidate.getSignature().equals(sig)) ) {
 					// we could also test that this candidate is not bound yet (to another bnd)
-					// but it requires significant modifications and might not be that useful?
+					// but it would require significant modifications and might not be that useful?
 					fmx = candidate;
 					mapBind.put(bnd, fmx);
 					break;
@@ -452,6 +552,28 @@
 
 		return fmx;
 	}
+
+	/** Computes the signature of a method from its binding
+	 * @param bnd -- bJDT binding of the method
+	 * @return the signature of the method in a String
+	 */
+	private String computeSignature(IMethodBinding bnd) {
+		String sig;
+		// method signature
+		sig = bnd.getName() + "(";
+		boolean first = true;
+		for (ITypeBinding parBnd : bnd.getParameterTypes()) {
+			if (! first) {
+				sig += "," + parBnd.getName();
+			}
+			else {
+				sig += parBnd.getName();
+				first = false;
+			}
+		}
+		sig += ")";
+		return sig;
+	}
 	
 	@SuppressWarnings("unchecked")
 	public String stubMethodSignature(MethodDeclaration node) {
@@ -509,17 +631,17 @@
 	 * @return the Famix Entity found or created. May return null if "bnd" is null or in case of a Famix error
 	 */
 	public Attribute ensureFamixAttribute(IVariableBinding bnd) {
-		fr.inria.verveine.core.gen.famix.Class owner = null;
+		Type owner = null;
 		Type typ = null;
 		boolean wasBound = false;
 
 		if (bnd == null) {
-			System.err.println("Warning: Unexpected null binding to Famix Attribute");
+//			System.err.println("Warning: Unexpected null binding to Famix Attribute");
 			return null;
 		}
 
-		owner = this.ensureFamixClass(bnd.getDeclaringClass());
-		typ = this.ensureFamixType(bnd.getType());
+		owner = this.ensureFamixType(bnd.getDeclaringClass(), /*context*/null); // the context is the declaring class=owner
+		typ = this.ensureFamixType(bnd.getType(), owner);
 
 		// finally trying to recover the entity or creating it
 		Attribute fmx = null;
@@ -587,11 +709,11 @@
 		boolean wasBound = false;
 		
 		if (bnd == null) {
-			System.err.println("Warning: Unexpected null binding to Famix Parameter");
+//			System.err.println("Warning: Unexpected null binding to Famix Parameter");
 			return null;
 		}
 
-		// actually it seems to be very little chances that the aprameter alreasy exist.
+		// actually it seems to be very little chances that the parameter alreasy exist.
 		// but who knows? Does not hurt to try
 		Parameter fmx = (Parameter) getEntityByBinding(bnd);
 		
@@ -611,7 +733,8 @@
 				fmx.setParentBehaviouralEntity(owner);
 			}
 			// type of the attribute
-			fmx.setDeclaredType(this.ensureFamixType(bnd.getType()));
+//System.out.println("looking for parameter type:"+bnd.getName()+"  context="+owner.getName());
+			fmx.setDeclaredType(this.ensureFamixType(bnd.getType(), /*context*/owner));
 		}
 		
 		return fmx;
@@ -634,7 +757,7 @@
 		boolean wasBound = false;
 
 		if (bnd == null) {
-			System.err.println("Warning: Unexpected null binding to Famix LocalVariable");
+//			System.err.println("Warning: Unexpected null binding to Famix LocalVariable");
 			return null;
 		}
 
@@ -642,7 +765,7 @@
 		if (owner == null) {
 			owner = fmxMethod;
 		}
-		typ = this.ensureFamixType(bnd.getType());
+		typ = this.ensureFamixType(bnd.getType(), /*context*/fmxMethod);
 
 		// finally trying to recover the entity or creating it
 		LocalVariable fmx = null;
@@ -834,4 +957,5 @@
 
 		return fmx;
 	}
+
 }
\ No newline at end of file
Index: verveine.core/src/fr/inria/verveine/core/EntityStack.java
===================================================================
--- verveine.core/src/fr/inria/verveine/core/EntityStack.java	(revision 38)
+++ verveine.core/src/fr/inria/verveine/core/EntityStack.java	(revision 39)
@@ -116,6 +116,7 @@
 			metric_cyclo = EMPTY_CYCLO;
 			metric_nos = EMPTY_NOS;
 			setLastInvocation(null);
+			setLastAccess(null);
 		}
 
 	}
@@ -131,11 +132,6 @@
 	Access lastAccess = null;
 	
 	/**
-	 * last Inheritance registered to set the previous/next
-	 */
-	Inheritance lastInheritance = null;
-	
-	/**
 	 * last Reference registered to set the previous/next
 	 */
 	Reference lastReference = null;
@@ -148,14 +144,6 @@
 		this.lastAccess = lastAccess;
 	}
 
-	public Inheritance getLastInheritance() {
-		return lastInheritance;
-	}
-
-	public void setLastInheritance(Inheritance lastInheritance) {
-		this.lastInheritance = lastInheritance;
-	}
-
 	public Reference getLastReference() {
 		return lastReference;
 	}
Index: verveine.extractor.java/lib/verveine.core.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/lib/verveine.extractor.java.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineExtractorJavaTest.java
===================================================================
--- verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineExtractorJavaTest.java	(revision 2)
+++ verveine.extractor.java/src/tests/fr/inria/verveine/extractor/java/VerveineExtractorJavaTest.java	(revision 3)
@@ -25,12 +25,14 @@
 import fr.inria.verveine.core.gen.famix.Access;
 import fr.inria.verveine.core.gen.famix.Attribute;
 import fr.inria.verveine.core.gen.famix.BehaviouralEntity;
+import fr.inria.verveine.core.gen.famix.FileAnchor;
 import fr.inria.verveine.core.gen.famix.Inheritance;
 import fr.inria.verveine.core.gen.famix.Invocation;
 import fr.inria.verveine.core.gen.famix.LocalVariable;
 import fr.inria.verveine.core.gen.famix.Method;
 import fr.inria.verveine.core.gen.famix.Namespace;
 import fr.inria.verveine.core.gen.famix.Parameter;
+import fr.inria.verveine.core.gen.famix.SourceAnchor;
 
 import fr.inria.verveine.extractor.java.BatchParser;
 import fr.inria.verveine.extractor.java.JavaDictionary;
@@ -77,7 +79,7 @@
 		assertEquals("Node", nodeClass.getName());
 		assertEquals(11, nodeClass.getMethods().size());
 		assertEquals(2, nodeClass.getAttributes().size());
-		assertSame(TestVerveineUtils.detectElement(repo,Namespace.class, "moose.lan"), nodeClass.getContainer());
+		assertSame(TestVerveineUtils.detectElement(repo, Namespace.class, "lan"), nodeClass.getContainer());
 		
 		fr.inria.verveine.core.gen.famix.Class innerClass = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "XPrinter");
 		assertNotNull(innerClass);
@@ -101,7 +103,8 @@
 		assertNotSame(dico.ensureFamixClass(A_CLASS_NAME),dico.ensureFamixClass(A_CLASS_NAME));
 		
 		Namespace javaLang = dico.ensureFamixNamespaceJavaLang(null);
-		assertEquals(JavaDictionary.OBJECT_PACKAGE_NAME, javaLang.getName());
+		String javaLangName = JavaDictionary.OBJECT_PACKAGE_NAME.substring(JavaDictionary.OBJECT_PACKAGE_NAME.lastIndexOf('.')+1);
+		assertEquals( javaLangName, javaLang.getName());
 		assertSame(javaLang, dico.ensureFamixNamespaceJavaLang(null));
 
 		fr.inria.verveine.core.gen.famix.Class obj = dico.ensureFamixClassObject(null);
@@ -143,14 +146,14 @@
 		Method mweb = TestVerveineUtils.detectElement(repo,Method.class, "methodWithEmptyBody");
 		assertNotNull(mweb);
 		assertEquals("methodWithEmptyBody", mweb.getName());
-		assertEquals("methodWithEmptyBody ()", mweb.getSignature());
+		assertEquals("methodWithEmptyBody()", mweb.getSignature());
 		assertSame(TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "Node"), mweb.getParentType());
 		assertSame(TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "void"), mweb.getDeclaredType());
 
 		Method em = TestVerveineUtils.detectElement(repo,Method.class, "equalsMultiple");
 		assertNotNull(em);
 		assertEquals("equalsMultiple", em.getName());
-		assertEquals("equalsMultiple (AbstractDestinationAddress)", em.getSignature());
+		assertEquals("equalsMultiple(AbstractDestinationAddress)", em.getSignature());
 		assertSame(TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "SingleDestinationAddress"), em.getParentType());
 		assertSame(TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "boolean"), em.getDeclaredType());
 
@@ -165,7 +168,7 @@
 		}
 		assertNotNull(n);
 		assertEquals("name", n.getName());
-		assertEquals("name ()", n.getSignature());
+		assertEquals("name()", n.getSignature());
 		assertSame(TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "FileServer"), n.getParentType());
 		assertSame(TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "String"), n.getDeclaredType());
 	}
@@ -190,7 +193,8 @@
 
 	@Test
 	public void testStubs() {
-		Namespace ns = TestVerveineUtils.detectElement(repo,Namespace.class, JavaDictionary.OBJECT_PACKAGE_NAME);
+		String javaLangName = JavaDictionary.OBJECT_PACKAGE_NAME.substring(JavaDictionary.OBJECT_PACKAGE_NAME.lastIndexOf('.')+1);
+		Namespace ns = TestVerveineUtils.detectElement(repo,Namespace.class, javaLangName);
 		assertNotNull(ns);
 		assertEquals(5, ns.getTypes().size());  // Object,String,StringBuffer,AbstractStringBuilder,System
 		
@@ -271,7 +275,7 @@
 		for (Method mSDA : sdaClass.getMethods()) {
 			for (Invocation inv : mSDA.getOutgoingInvocations()) {
 				assertTrue( "Unexpected method signature: "+inv.getSignature(),
-							inv.getSignature().equals("equalsSingle (String)") || inv.getSignature().equals("id ()") || inv.getSignature().equals("equals (Object)"));
+							inv.getSignature().equals("equalsSingle(String)") || inv.getSignature().equals("id()") || inv.getSignature().equals("equals(Object)"));
 				if (inv.getSignature().equals("equalsSingle (String)")) {
 					assertSame(sdaClass, ((Method)inv.getSender()).getParentType());
 					assertEquals("self", inv.getReceiver().getName());
@@ -331,4 +335,41 @@
 			assertEquals(output, acc.getAccessor());
 		}
 	}
+
+	@Test
+	public void testSourceAnchors() {
+		SourceAnchor anc = null;
+		
+		fr.inria.verveine.core.gen.famix.Class clazz = TestVerveineUtils.detectElement(repo,fr.inria.verveine.core.gen.famix.Class.class, "XPrinter");
+		assertNotNull(clazz);
+
+		anc = clazz.getSourceAnchor();
+		assertNotNull(anc);
+		assertSame(clazz, anc.getElement());
+		assertSame(FileAnchor.class, anc.getClass());
+		assertTrue("Wrong file source for class XPrinter", ((FileAnchor)anc).getFileName().endsWith("moose/lan/server/PrintServer.java"));
+		assertEquals(17, ((FileAnchor)anc).getStartLine());
+		
+		Method meth = TestVerveineUtils.detectElement(repo, Method.class, "equalsMultiple");
+		assertNotNull(meth);
+
+		anc = meth.getSourceAnchor();
+		assertNotNull(anc);
+		assertSame(meth, anc.getElement());
+		assertSame(FileAnchor.class, anc.getClass());
+		assertTrue("Wrong file source for method SingleDestinationAddress.equalsMultiple()", ((FileAnchor)anc).getFileName().endsWith("moose/lan/SingleDestinationAddress.java"));
+		assertEquals(39, ((FileAnchor)anc).getStartLine());
+		
+		Attribute att = TestVerveineUtils.detectElement(repo, Attribute.class, "originator");
+		assertNotNull(meth);
+
+		anc = att.getSourceAnchor();
+		assertNotNull(anc);
+		assertSame(att, anc.getElement());
+		assertSame(FileAnchor.class, anc.getClass());
+		assertTrue("Wrong file source for field Packet.originator", ((FileAnchor)anc).getFileName().endsWith("moose/lan/Packet.java"));
+		assertEquals(15, ((FileAnchor)anc).getStartLine());
+		
+	}
+
 }
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 2)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineRefVisitor.java	(revision 3)
@@ -336,9 +336,9 @@
 			if (invoked == null) {
 				invoked = this.dico.ensureFamixStubMethod(name);
 			}
-			/*Invocation inv =*/ dico.ensureFamixInvocation(sender, invoked, receiver);
-			/* An example of how to include location information to an entity:
-			   dico.addSourceAnchor(inv, node); */
+			/* An example of how to include location information to an invocation
+			 * But would require to pass the ASTNode in parameter to this method */
+			/*dico.addSourceAnchor(*/ dico.ensureFamixInvocation(sender, invoked, receiver) /*,node)*/ ;
 		}
 	}
 
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 2)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/VerveineDefVisitor.java	(revision 3)
@@ -3,6 +3,7 @@
 import java.util.Iterator;
 import java.util.List;
 
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.ASTVisitor;
 import org.eclipse.jdt.core.dom.AnonymousClassDeclaration;
 import org.eclipse.jdt.core.dom.ClassInstanceCreation;
@@ -13,7 +14,6 @@
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.Type;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
-import org.eclipse.jdt.core.dom.VariableDeclaration;
 import org.eclipse.jdt.core.dom.VariableDeclarationExpression;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
@@ -57,7 +57,8 @@
 		else {
 			fmx = dico.ensureFamixNamespace(pckg.resolveBinding());
 			if (fmx == null) {
-			System.err.println("         Namespace="+pckg.getName().getFullyQualifiedName());
+				System.err.println("         Namespace="+pckg.getName().getFullyQualifiedName() + ",  fallback to creating a stub");
+				// try again without binding
 				fmx = dico.ensureFamixNamespace(pckg.getName().getFullyQualifiedName());
 			}
 		}
@@ -75,12 +76,13 @@
 //		System.err.println("TRACE, DefVisiting TypeDeclaration: "+node.getName().getIdentifier());
 		fr.inria.verveine.core.gen.famix.Class fmx = dico.ensureFamixClass(node.resolveBinding());
 		if (fmx == null) {
-			// TODO try to find a bounded version corresponding to this stub?
-			System.err.println("         Class="+node.getName().getIdentifier());
+			// TODO try to find a binded version corresponding to this stub?
+			System.err.println("         Class="+node.getName().getIdentifier() + ",  fallback to creating a stub");
 			fmx = dico.ensureFamixClass(node.getName().getIdentifier());
 			dico.ensureFamixInheritance(dico.ensureFamixClassObject(null), fmx);
 			fmx.setContainer( context.top());
 		}
+		dico.addSourceAnchor(fmx, node);
 		this.context.pushClass(fmx);
 		return super.visit(node);
 	}
@@ -96,11 +98,12 @@
 		if (decl != null) {
 			fr.inria.verveine.core.gen.famix.Class fmx = this.dico.ensureFamixClass(decl.resolveBinding());
 			if (fmx == null) {
-				System.err.println("         Class="+"anonymous(??)");
+				System.err.println("         Class="+"anonymous(??),  fallback to creating a stub");
 				fmx = dico.ensureFamixClass("anonymous(??)");
 				dico.ensureFamixInheritance(dico.ensureFamixClassObject(null), fmx);
 				fmx.setContainer( context.top());
 			}
+			dico.addSourceAnchor(fmx, node);
 			this.context.pushClass(fmx);
 		}
 		return super.visit(node);
@@ -115,12 +118,13 @@
 //		System.err.println("TRACE, DefVisiting MethodDeclaration: "+node.getName().getIdentifier());
 		Method fmx = dico.ensureFamixMethod(node.resolveBinding());
 		if (fmx == null) {
-			System.err.println("         Method="+node.getName().getIdentifier());
+			System.err.println("         Method="+node.getName().getIdentifier() + ",  fallback to creating a stub");
 			fmx = dico.ensureFamixMethod(node.getName().getIdentifier());
 			fmx.setParentType(context.topClass());
 			fmx.setSignature(fmx.getName()+" (???)");
 			fmx.setDeclaredType( dico.ensureFamixClassObject(null) );
 		}
+		
 		if (fmx != null) {
 			@SuppressWarnings("unchecked")
 			Iterator<SingleVariableDeclaration> iter = node.parameters().iterator();
@@ -128,6 +132,8 @@
 				SingleVariableDeclaration param = iter.next();
 				dico.ensureFamixParameter(param.resolveBinding());
 			}
+			
+			dico.addSourceAnchor(fmx, node);
 			this.context.pushMethod(fmx);
 		}
 		return super.visit(node);	
@@ -145,12 +151,14 @@
 //			System.err.println("            Field: "+vd.getName().getIdentifier());
 			Attribute fmx = dico.ensureFamixAttribute(vd.resolveBinding());
 			if (fmx == null) {
-				System.err.println("         Attribute="+vd.getName().getFullyQualifiedName());
+				System.err.println("         Attribute="+vd.getName().getFullyQualifiedName() + ",  fallback to creating a stub");
 				fmx = dico.ensureFamixAttribute(vd.getName().getFullyQualifiedName());
 				fmx.setParentType(context.topClass());
 				// should try to find type name from 'node.getType()' ?
 				fmx.setDeclaredType( dico.ensureFamixClassObject(null) );
 			}
+			
+			dico.addSourceAnchor(fmx, node);
 		}
 		return super.visit(node);
 	}
@@ -158,18 +166,18 @@
 	@SuppressWarnings("unchecked")
 	public boolean visit(VariableDeclarationExpression node) {
 		//System.err.println("TRACE, DefVisiting VariableDeclarationExpression");
-		visitVariableDeclaration(node.getType(), (List<VariableDeclarationFragment>)node.fragments());
+		visitVariableDeclaration(node, node.getType(), (List<VariableDeclarationFragment>)node.fragments());
 		return super.visit(node);
 	}
 
 	@SuppressWarnings("unchecked")
 	public boolean visit(VariableDeclarationStatement node) {
 		//System.err.println("TRACE, DefVisiting VariableDeclarationStatement");
-		visitVariableDeclaration(node.getType(), (List<VariableDeclarationFragment>)node.fragments());
+		visitVariableDeclaration(node, node.getType(), (List<VariableDeclarationFragment>)node.fragments());
 		return super.visit(node);
 	}
 
-	private void visitVariableDeclaration(Type nodeTyp, List<VariableDeclarationFragment> fragments) {
+	private void visitVariableDeclaration(ASTNode node, Type nodeTyp, List<VariableDeclarationFragment> fragments) {
 		if (nodeTyp.isPrimitiveType()) {
 			return;
 		}
@@ -177,11 +185,13 @@
 		for (VariableDeclarationFragment vd : fragments) {
 			LocalVariable fmx = dico.ensureFamixLocalVariable(vd.resolveBinding());
 			if (fmx == null) {
-				System.err.println("         Variable="+vd.getName().getFullyQualifiedName());
+				System.err.println("         Variable="+vd.getName().getFullyQualifiedName() + ",  fallback to creating a stub");
 				fmx = dico.ensureFamixLocalVariable(vd.getName().getFullyQualifiedName());
 				fmx.setParentBehaviouralEntity(context.topMethod());
 				// should try to find type name from 'node.getType()' ?
 				fmx.setDeclaredType( dico.ensureFamixClassObject(null) );
+
+				dico.addSourceAnchor(fmx, node);
 			}
 		}
 	}
Index: verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java
===================================================================
--- verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 2)
+++ verveine.extractor.java/src/fr/inria/verveine/extractor/java/JavaDictionary.java	(revision 3)
@@ -56,14 +56,9 @@
 			return null;
 		}
 
-		Namespace fmx = ensureFamixUniqEntity(Namespace.class, bnd, bnd.getName());
+		Namespace fmx = ensureFamixNamespaceWithParentScope(bnd, null);
 
 		if (fmx!=null) {
-			if (createParentScope(fmx) != null) {
-				// remove the name of the parent from the name of this package
-				/*String name = fmx.getName();
-				fmx.setName(name.substring(name.lastIndexOf('.')+1));*/
-			}
 			fmx.setIsStub(Boolean.FALSE);			
 		}
 		return fmx;
@@ -71,13 +66,9 @@
 
 	@Override
 	public Namespace ensureFamixNamespace(String name) {
-		Namespace fmx = super.ensureFamixNamespace(name);
+		Namespace fmx = ensureFamixNamespaceWithParentScope(null, name);
 		
 		if (fmx!=null) {
-			if (createParentScope(fmx) != null) {
-				// remove the name of the parent from the name of this package
-				/*fmx.setName(name.substring(name.lastIndexOf('.')+1));*/
-			}
 			fmx.setIsStub(Boolean.FALSE);			
 		}
 		
@@ -85,24 +76,42 @@
 	}
 
 	/**
-	 * Creates and returns a parent namespace for 'fmx'
-	 * @param fmx - the namespace for which to create a parent
-	 * @return the parent namespace created or null
+	 * Creates or recovers a namespace. Also creates or recovers recusively it's parent namespaces
+	 * At least one of bnd and name must be passed, possibly both
+	 * @param bnd - the (optional) binding for the namespace
+	 * @param name - the (optional) full name for the namespace
+	 * @return the namespace created or null
 	 */
-	private Namespace createParentScope(Namespace fmx) {
-		String name = fmx.getName();
-		Namespace parentScope = null;
-		if (fmx.getParentScope() == null) {
-			int pt = name.lastIndexOf('.');
-			if (pt > 0) {
-				parentScope = ensureFamixNamespace(name.substring(0, pt));
-				if (parentScope != null) {
-					parentScope.addChildScopes(fmx);
-				}
+	private Namespace ensureFamixNamespaceWithParentScope(IPackageBinding bnd, String name) {
+		Namespace fmx = null;
+		Namespace parent = null;
+		String[] nameComps;
+		
+		if (bnd != null) {
+			nameComps = bnd.getNameComponents();
+		}
+		else {
+			if (name != null) {
+				nameComps = name.split("\\.");
+			}
+			else {
+				return null;
 			}
 		}
+
+		for (String nameComp : nameComps ) {
+			fmx = ensureFamixUniqEntity(Namespace.class, null, nameComp);
+			if ( (parent != null) && (fmx != null) && (fmx.getParentScope() == null)) {
+				parent.addChildScopes(fmx);
+			}
+			parent = fmx;
+		}
 		
-		return parentScope;
+		if ( (fmx != null) && (bnd != null) ) {
+			mapBind.put(bnd, fmx);
+		}
+
+		return fmx;
 	}
 
 	/**
@@ -270,7 +279,7 @@
 		}
 
 		// method signature
-		sig = bnd.getName() + " (";
+		sig = bnd.getName() + "(";
 		boolean first = true;
 		for (ITypeBinding parBnd : bnd.getParameterTypes()) {
 			if (! first) {
@@ -486,14 +495,14 @@
 			while ( ! (ast instanceof CompilationUnit) ) {
 				ASTNode tmp = ast.getParent();
 				if ( (ast == null) || (tmp == ast) ) {
-					// we reach the top node without finding a CompilationUnit. This is strange, but what can we do ... ?
+					// we reached the top node without finding a CompilationUnit. This would be strange, but what can one do ... ?
 					return null;
 				}
 				else {
 					ast = tmp;
 				}
 			}
-			// noew create the Famix SourceAnchor
+			// now create the Famix SourceAnchor
 			fa = new FileAnchor();
 			fa.setFileName((String) ((CompilationUnit)ast).getProperty(SOURCE_FILENAME_PROPERTY));
 			fa.setStartLine(((CompilationUnit)ast).getLineNumber(pos));
@@ -524,8 +533,9 @@
 	 * @param bnd -- a potential binding for the "java.lang" package
 	 * @return a Famix Namespace for "java.lang"
 	 */
-	public Namespace ensureFamixNamespaceJavaLang(ITypeBinding bnd) {
-		Namespace fmx =  ensureFamixUniqEntity(Namespace.class, bnd, OBJECT_PACKAGE_NAME);
+	public Namespace ensureFamixNamespaceJavaLang(IPackageBinding bnd) {
+		Namespace fmx = ensureFamixNamespaceWithParentScope(bnd, OBJECT_PACKAGE_NAME);
+		
 		fmx.setIsStub(false);
 
 		return fmx;
